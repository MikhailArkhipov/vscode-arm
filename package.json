{
  "name": "arm",
  "displayName": "ARM Assembly",
  "description": "ARM Assembly Language Editor (IntelliSense, documentation tooltips, formatting, diagnostics and more)",
  "version": "0.0.1",
  "author": "Mikhail Arkhipov",
  "icon": "images/ArmIcon.png",
  "publisher": "Mikhail-Arkhipov",
  "license": "MIT",
  "preview": true,
  "homepage": "https://github.com/MikhailArkhipov/vscode-arm",
  "bugs": {
    "url": "https://github.com/MikhailArkhipov/vscode-arm"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/MikhailArkhipov/vscode-arm"
  },
  "keywords": [
    "ARM",
    "Assembly"
  ],
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Linters",
    "Snippets"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "commands": [
      {
        "command": "arm.openInstructionDocumentation",
        "title": "Open ARM instruction documentation",
        "category": "ARM",
        "icon": {
          "light": "images/ArmIcon.png",
          "dark": "images/ArmIcon.png"
        }
      },
      {
        "command": "arm.convertHtmlToIndex",
        "title": "Convert ARM HTML instruction documentation to index file",
        "category": "ARM",
        "icon": {
          "light": "images/ArmIcon.png",
          "dark": "images/ArmIcon.png"
        }
      }
    ],
    "keybindings": [
      {
        "command": "arm.openInstructionDocumentation",
        "key": "ctrl+o ctrl+d",
        "when": "editorTextFocus"
      }
    ],
    "languages": [
      {
        "id": "arm",
        "aliases": [
          "ARM",
          "Arm",
          "ARM Assembly Language"
        ],
        "extensions": [
          ".s",
          ".S",
          ".asm",
          ".sx"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "configuration": [
      {
        "properties": {
          "arm.general.instructionSet": {
            "type": "string",
            "default": "A64",
            "enum": [
              "A32",
              "A64"
            ],
            "description": "ARM instruction sets to use."
          },
          "arm.general.documentationFolder": {
            "type": "string",
            "description": "Folder with ARM instruction documentation in HTML. Editor appends A32 or A64 to the folder name."
          },
          "arm.color.show": {
            "type": "boolean",
            "default": true,
            "description": "Editor provides item coloring. Set to false if you prefer another extension to do the job."
          },
          "arm.color.registers": {
            "type": "boolean",
            "default": true,
            "description": "Color register names in a distinct color."
          },
          "arm.color.variables": {
            "type": "boolean",
            "default": true,
            "description": "Color variables in a distinct color."
          },
          "arm.completion.show": {
            "type": "boolean",
            "default": true,
            "description": "Editor provides completion list during typing."
          },
          "arm.completion.advancedDirectives": {
            "type": "boolean",
            "default": false,
            "description": "Show advanced assembler directives in the completion list."
          },
          "arm.diagnostic.show": {
            "type": "boolean",
            "default": true,
            "description": "Editor displays diagnostics for syntax errors, unknown directives and instructions, etc."
          },
          "arm.diagnostic.unknownInstructions": {
            "type": "boolean",
            "default": true,
            "description": "Flag unknown instructions. Instruction check does not take into account symbol possible redefition by .equ or .set."
          },
          "arm.diagnostic.unknownDirectives": {
            "type": "boolean",
            "default": true,
            "description": "Flag unknown directives. Directive check does not take into account symbol possible redefition by .equ or .set."
          },
          "arm.diagnostic.unknownSymbols": {
            "type": "boolean",
            "default": true,
            "description": "Flag unknown symbols. This does not take into account possible definitions outside of the file, such as in .include."
          },
          "arm.diagnostic.mixedCasing": {
            "type": "boolean",
            "default": true,
            "description": "Flag inconsistent casing in instructions and operands."
          },
          "arm.formatting.spaceAfterComma": {
            "type": "boolean",
            "default": true,
            "description": "Insert space after comma during formatting."
          },
          "arm.formatting.spaceAroundOperators": {
            "type": "boolean",
            "default": false,
            "description": "Place space around math operators (as in 1 + 2)."
          },
          "arm.formatting.upperCaseDirectives": {
            "type": "boolean",
            "default": false,
            "description": "Emit directives in uppercase during formatting and completion."
          },
          "arm.formatting.upperCaseInstructions": {
            "type": "boolean",
            "default": false,
            "description": "Emit instructions in uppercase during formatting and completion."
          },
          "arm.formatting.upperCaseLabels": {
            "type": "boolean",
            "default": false,
            "description": "Emit labels in uppercase during formatting."
          },
          "arm.formatting.upperCaseRegisters": {
            "type": "boolean",
            "default": false,
            "description": "Emit register names in uppercase during formatting."
          },
          "arm.formatting.alignInstructions": {
            "type": "boolean",
            "default": true,
            "description": "Align instructions into a single column. Column position is determined by the longest label unless fixed position is specified."
          },
          "arm.formatting.alignInstructionsPosition": {
            "type": "number",
            "default": 0,
            "description": "Align instructions at a fixed distance from the left, in tabs. Editor may separate long label from the instruction statement. 0 means calculate position based on longest label."
          },
          "arm.formatting.alignOperands": {
            "type": "boolean",
            "default": true,
            "description": "Align operands at a nearest tab position after longest instruction."
          },
          "arm.formatting.alignOperandsPosition": {
            "type": "number",
            "default": 0,
            "description": "Align instruction operands at a fixed distance from the instruction, in tabs. 0 means align based on longest instruction."
          },
          "arm.formatting.alignDirectivesToInstructions": {
            "type": "boolean",
            "default": true,
            "description": "Align directives to the same column as instructions."
          },
          "arm.formatting.alignBlockDirectivesToInstructions": {
            "type": "boolean",
            "default": false,
            "description": "Align directives that start or end blocks of code (.macro, .if), to the same column as instructions."
          },
          "arm.hover.show": {
            "type": "boolean",
            "default": true,
            "description": "Editor provides documentation when hovering over instruction and directives."
          }
        }
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "instruction",
        "superType": "enumMember",
        "description": "Assembly instruction."
      },
      {
        "id": "directive",
        "superType": "keyword",
        "description": "Assembler directive."
      },
      {
        "id": "register",
        "superType": "parameter",
        "description": "Processor register."
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "definition",
        "superType": "definition",
        "description": "Symbol definition."
      },
      {
        "id": "declaration",
        "superType": "declaration",
        "description": "Symbol declaration."
      }
    ],
    "configurationDefaults": {
      "[arm]": {
        "editor.semanticHighlighting.enabled": true
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "build": "tsc -p ./",
    "test": "jest",
    "lint": "eslint **/*.ts",
    "prettier": "prettier -c ."
  },
  "devDependencies": {
    "@jest/globals": "^29.7.0",
    "@types/jest": "^29.5.5",
    "@types/node": "^20.6.2",
    "@types/vscode": "^1.82.0",
    "@typescript-eslint/eslint-plugin": "^6.7.2",
    "@typescript-eslint/parser": "^6.7.2",
    "@vscode/vsce": "^2.21.0",
    "chai": "^4.3.8",
    "eslint": "^8.49.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-config-standard-with-typescript": "^39.0.0",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-n": "^16.0.2",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-simple-import-sort": "^10.0.0",
    "jest": "^29.7.0",
    "madge": "^6.1.0",
    "ts-jest": "^29.1.1",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "node-html-parser": "^6.1.10",
    "turndown": "^7.1.2",
    "typed-rest-client": "^1.8.11",
    "vscode-languageclient": "^8.1.0"
  },
  "jest": {
    "transform": {
      "^.+\\.(ts|tsx)$": "ts-jest"
    }
  }
}

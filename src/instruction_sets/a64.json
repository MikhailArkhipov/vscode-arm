[
  {
    "name": "ABS",
    "doc": "Absolute value computes the absolute value of the signed integer value in the source register, and writes the result to the destination register.",
    "file": "abs.html"
  },
  {
    "name": "ADC",
    "doc": "Add with Carry adds two register values and the Carry flag value, and writes the result to the destination register.",
    "file": "adc.html"
  },
  {
    "name": "ADCLB",
    "doc": "Add with carry long (bottom)",
    "file": "adclb_z_zzz.html"
  },
  {
    "name": "ADCLT",
    "doc": "Add with carry long (top)",
    "file": "adclt_z_zzz.html"
  },
  {
    "name": "ADCS",
    "doc": "Add with Carry, setting flags, adds two register values and the Carry flag value, and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "adcs.html"
  },
  {
    "name": "ADDG",
    "doc": "Add with Tag adds an immediate value scaled by the Tag granule to the address in the source register, modifies the Logical Address Tag of the address using an immediate value, and writes the result to the destination register. Tags specified in GCR_EL1.Exclude are excluded from the possible outputs when modifying the Logical Address Tag.",
    "file": "addg.html"
  },
  {
    "name": "ADDHA",
    "doc": "Add horizontally vector elements to ZA tile",
    "file": "addha_za_pp_z.html"
  },
  {
    "name": "ADDHNB",
    "doc": "Add narrow high part (bottom)",
    "file": "addhnb_z_zz.html"
  },
  {
    "name": "ADDHNT",
    "doc": "Add narrow high part (top)",
    "file": "addhnt_z_zz.html"
  },
  {
    "name": "ADDHN",
    "doc": "Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "addhn_advsimd.html"
  },
  {
    "name": "ADDHN2",
    "doc": "Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "addhn_advsimd.html"
  },
  {
    "name": "ADDPL",
    "doc": "Add multiple of predicate register size to scalar register",
    "file": "addpl_r_ri.html"
  },
  {
    "name": "ADDP",
    "doc": "Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.",
    "file": "addp_advsimd_pair.html"
  },
  {
    "name": "ADDQV",
    "doc": "Unsigned add reduction of quadword vector segments",
    "file": "addqv_z_p_z.html"
  },
  {
    "name": "ADDSPL",
    "doc": "Add multiple of Streaming SVE predicate register size to scalar register",
    "file": "addspl_r_ri.html"
  },
  {
    "name": "ADDSVL",
    "doc": "Add multiple of Streaming SVE vector register size to scalar register",
    "file": "addsvl_r_ri.html"
  },
  {
    "name": "ADDS",
    "doc": "Add (extended register), setting flags, adds a register value and a sign or zero-extended register value, followed by an optional left shift amount, and writes the result to the destination register. The argument that is extended from the &lt;Rm&gt; register can be a byte, halfword, word, or doubleword. It updates the condition flags based on the result.",
    "file": "adds_addsub_ext.html"
  },
  {
    "name": "ADDVA",
    "doc": "Add vertically vector elements to ZA tile",
    "file": "addva_za_pp_z.html"
  },
  {
    "name": "ADDVL",
    "doc": "Add multiple of vector register size to scalar register",
    "file": "addvl_r_ri.html"
  },
  {
    "name": "ADDV",
    "doc": "Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.",
    "file": "addv_advsimd.html"
  },
  {
    "name": "ADD",
    "doc": "Add (extended register) adds a register value and a sign or zero-extended register value, followed by an optional left shift amount, and writes the result to the destination register. The argument that is extended from the &lt;Rm&gt; register can be a byte, halfword, word, or doubleword.",
    "file": "add_addsub_ext.html"
  },
  {
    "name": "ADR",
    "doc": "Form PC-relative address adds an immediate value to the PC value to form a PC-relative address, and writes the result to the destination register.",
    "file": "adr.html"
  },
  {
    "name": "ADRP",
    "doc": "Form PC-relative address to 4KB page adds an immediate value that is shifted left by 12 bits, to the PC value to form a PC-relative address, with the bottom 12 bits masked out, and writes the result to the destination register.",
    "file": "adrp.html"
  },
  {
    "name": "AESD",
    "doc": "AES single round decryption.",
    "file": "aesd_advsimd.html"
  },
  {
    "name": "AESE",
    "doc": "AES single round encryption.",
    "file": "aese_advsimd.html"
  },
  {
    "name": "AESIMC",
    "doc": "AES inverse mix columns.",
    "file": "aesimc_advsimd.html"
  },
  {
    "name": "AESMC",
    "doc": "AES mix columns.",
    "file": "aesmc_advsimd.html"
  },
  {
    "name": "ANDQV",
    "doc": "Bitwise AND reduction of quadword vector segments",
    "file": "andqv_z_p_z.html"
  },
  {
    "name": "ANDS",
    "doc": "Bitwise AND (immediate), setting flags, performs a bitwise AND of a register value and an immediate value, and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "ands_log_imm.html"
  },
  {
    "name": "ANDV",
    "doc": "Bitwise AND reduction to scalar",
    "file": "andv_r_p_z.html"
  },
  {
    "name": "AND",
    "doc": "Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.",
    "file": "and_advsimd.html"
  },
  {
    "name": "ASRD",
    "doc": "Arithmetic shift right for divide by immediate (predicated)",
    "file": "asrd_z_p_zi.html"
  },
  {
    "name": "ASRR",
    "doc": "Reversed arithmetic shift right by vector (predicated)",
    "file": "asrr_z_p_zz.html"
  },
  {
    "name": "ASRV",
    "doc": "Arithmetic Shift Right Variable shifts a register value right by a variable number of bits, shifting in copies of its sign bit, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is right-shifted.",
    "file": "asrv.html"
  },
  {
    "name": "ASR",
    "doc": "Arithmetic Shift Right (register) shifts a register value right by a variable number of bits, shifting in copies of its sign bit, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is right-shifted.",
    "file": "asr_asrv.html"
  },
  {
    "name": "AT",
    "doc": "Address Translate. For more information, see op0==0b01, cache maintenance, TLB maintenance, and address translation instructions.",
    "file": "at_sys.html"
  },
  {
    "name": "AUTDA",
    "doc": "Authenticate Data address, using key A. This instruction authenticates a data address, using a modifier and key A.",
    "file": "autda.html"
  },
  {
    "name": "AUTDZA",
    "doc": "Authenticate Data address, using key A. This instruction authenticates a data address, using a modifier and key A.",
    "file": "autda.html"
  },
  {
    "name": "AUTDB",
    "doc": "Authenticate Data address, using key B. This instruction authenticates a data address, using a modifier and key B.",
    "file": "autdb.html"
  },
  {
    "name": "AUTDZB",
    "doc": "Authenticate Data address, using key B. This instruction authenticates a data address, using a modifier and key B.",
    "file": "autdb.html"
  },
  {
    "name": "AUTIA",
    "doc": "Authenticate Instruction address, using key A. This instruction authenticates an instruction address, using a modifier and key A.",
    "file": "autia.html"
  },
  {
    "name": "AUTIA1716",
    "doc": "Authenticate Instruction address, using key A. This instruction authenticates an instruction address, using a modifier and key A.",
    "file": "autia.html"
  },
  {
    "name": "AUTIASP",
    "doc": "Authenticate Instruction address, using key A. This instruction authenticates an instruction address, using a modifier and key A.",
    "file": "autia.html"
  },
  {
    "name": "AUTIAZ",
    "doc": "Authenticate Instruction address, using key A. This instruction authenticates an instruction address, using a modifier and key A.",
    "file": "autia.html"
  },
  {
    "name": "AUTIZA",
    "doc": "Authenticate Instruction address, using key A. This instruction authenticates an instruction address, using a modifier and key A.",
    "file": "autia.html"
  },
  {
    "name": "AUTIB",
    "doc": "Authenticate Instruction address, using key B. This instruction authenticates an instruction address, using a modifier and key B.",
    "file": "autib.html"
  },
  {
    "name": "AUTIB1716",
    "doc": "Authenticate Instruction address, using key B. This instruction authenticates an instruction address, using a modifier and key B.",
    "file": "autib.html"
  },
  {
    "name": "AUTIBSP",
    "doc": "Authenticate Instruction address, using key B. This instruction authenticates an instruction address, using a modifier and key B.",
    "file": "autib.html"
  },
  {
    "name": "AUTIBZ",
    "doc": "Authenticate Instruction address, using key B. This instruction authenticates an instruction address, using a modifier and key B.",
    "file": "autib.html"
  },
  {
    "name": "AUTIZB",
    "doc": "Authenticate Instruction address, using key B. This instruction authenticates an instruction address, using a modifier and key B.",
    "file": "autib.html"
  },
  {
    "name": "AXFLAG",
    "doc": "Convert floating-point condition flags from Arm to external format. This instruction converts the state of the PSTATE.{N,Z,C,V} flags from a form representing the result of an Arm floating-point scalar compare instruction to an alternative representation required by some software.",
    "file": "axflag.html"
  },
  {
    "name": "BCAX",
    "doc": "Bit Clear and exclusive-OR performs a bitwise AND of the 128-bit vector in a source SIMD&amp;FP register and the complement of the vector in another source SIMD&amp;FP register, then performs a bitwise exclusive-OR of the resulting vector and the vector in a third source SIMD&amp;FP register, and writes the result to the destination SIMD&amp;FP register.",
    "file": "bcax_advsimd.html"
  },
  {
    "name": "BC",
    "doc": "Branch Consistent conditionally to a label at a PC-relative offset, with a hint that this branch will behave very consistently and is very unlikely to change direction.",
    "file": "bc_cond.html"
  },
  {
    "name": "BDEP",
    "doc": "Scatter lower bits into positions selected by bitmask",
    "file": "bdep_z_zz.html"
  },
  {
    "name": "BEXT",
    "doc": "Gather lower bits from positions selected by bitmask",
    "file": "bext_z_zz.html"
  },
  {
    "name": "BFADD",
    "doc": "BFloat16 floating-point add multi-vector to ZA array vector accumulators",
    "file": "bfadd_za_zw.html"
  },
  {
    "name": "BFCLAMP",
    "doc": "Multi-vector BFloat16 floating-point clamp to minimum/maximum number",
    "file": "bfclamp_mz_zz.html"
  },
  {
    "name": "BFCVTNT",
    "doc": "Floating-point down convert and narrow to BFloat16 (top, predicated)",
    "file": "bfcvtnt_z_p_z.html"
  },
  {
    "name": "BFCVTN",
    "doc": "Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&amp;FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&amp;FP destination vector. The result elements are half the width of the source elements.",
    "file": "bfcvtn_advsimd.html"
  },
  {
    "name": "BFCVTN2",
    "doc": "Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&amp;FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&amp;FP destination vector. The result elements are half the width of the source elements.",
    "file": "bfcvtn_advsimd.html"
  },
  {
    "name": "BFCVT",
    "doc": "Floating-point convert from single-precision to BFloat16 format (scalar) converts the single-precision floating-point value in the 32-bit SIMD&amp;FP source register to BFloat16 format and writes the result in the 16-bit SIMD&amp;FP destination register.",
    "file": "bfcvt_float.html"
  },
  {
    "name": "BFC",
    "doc": "Bitfield Clear sets a bitfield of &lt;width&gt; bits at bit position &lt;lsb&gt; of the destination register to zero, leaving the other destination bits unchanged.",
    "file": "bfc_bfm.html"
  },
  {
    "name": "BFDOT",
    "doc": "BFloat16 floating-point dot product (vector, by element). This instruction delimits the source vectors into pairs of BFloat16 elements. The BFloat16 pair within the second source vector is specified using an immediate index. The index range is from 0 to 3 inclusive.",
    "file": "bfdot_advsimd_elt.html"
  },
  {
    "name": "BFI",
    "doc": "Bitfield Insert copies a bitfield of &lt;width&gt; bits from the least significant bits of the source register to bit position &lt;lsb&gt; of the destination register, leaving the other destination bits unchanged.",
    "file": "bfi_bfm.html"
  },
  {
    "name": "BFM",
    "doc": "Bitfield Move is usually accessed via one of its aliases, which are always preferred for disassembly.",
    "file": "bfm.html"
  },
  {
    "name": "BFMAXNM",
    "doc": "Multi-vector BFloat16 floating-point maximum number by vector",
    "file": "bfmaxnm_mz_zzv.html"
  },
  {
    "name": "BFMAX",
    "doc": "Multi-vector BFloat16 floating-point maximum by vector",
    "file": "bfmax_mz_zzv.html"
  },
  {
    "name": "BFMINNM",
    "doc": "Multi-vector BFloat16 floating-point minimum number by vector",
    "file": "bfminnm_mz_zzv.html"
  },
  {
    "name": "BFMIN",
    "doc": "Multi-vector BFloat16 floating-point minimum by vector",
    "file": "bfmin_mz_zzv.html"
  },
  {
    "name": "BFMLALB",
    "doc": "BFloat16 floating-point multiply-add long to single-precision (bottom)",
    "file": "bfmlalb_z_zzz.html"
  },
  {
    "name": "BFMLALT",
    "doc": "BFloat16 floating-point multiply-add long to single-precision (top)",
    "file": "bfmlalt_z_zzz.html"
  },
  {
    "name": "BFMLAL",
    "doc": "Multi-vector BFloat16 floating-point multiply-add long by indexed element",
    "file": "bfmlal_za_zzi.html"
  },
  {
    "name": "BFMLA",
    "doc": "Multi-vector BFloat16 floating-point fused multiply-add by indexed element",
    "file": "bfmla_za_zzi.html"
  },
  {
    "name": "BFMLSLB",
    "doc": "BFloat16 floating-point multiply-subtract long from single-precision (bottom)",
    "file": "bfmlslb_z_zzz.html"
  },
  {
    "name": "BFMLSLT",
    "doc": "BFloat16 floating-point multiply-subtract long from single-precision (top)",
    "file": "bfmlslt_z_zzz.html"
  },
  {
    "name": "BFMLSL",
    "doc": "Multi-vector BFloat16 floating-point multiply-subtract long by indexed element",
    "file": "bfmlsl_za_zzi.html"
  },
  {
    "name": "BFMLS",
    "doc": "Multi-vector BFloat16 floating-point fused multiply-subtract by indexed element",
    "file": "bfmls_za_zzi.html"
  },
  {
    "name": "BFMMLA",
    "doc": "BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix.",
    "file": "bfmmla_advsimd.html"
  },
  {
    "name": "BFMOPA",
    "doc": "BFloat16 sum of outer products and accumulate",
    "file": "bfmopa_za32_pp_zz.html"
  },
  {
    "name": "BFMOPS",
    "doc": "BFloat16 sum of outer products and subtract",
    "file": "bfmops_za32_pp_zz.html"
  },
  {
    "name": "BFMUL",
    "doc": "BFloat16 floating-point multiply vectors (predicated)",
    "file": "bfmul_z_p_zz.html"
  },
  {
    "name": "BFSUB",
    "doc": "BFloat16 floating-point subtract multi-vector from ZA array vector accumulators",
    "file": "bfsub_za_zw.html"
  },
  {
    "name": "BFVDOT",
    "doc": "Multi-vector BFloat16 floating-point vertical dot-product by indexed element",
    "file": "bfvdot_za_zzi.html"
  },
  {
    "name": "BFXIL",
    "doc": "Bitfield Extract and Insert Low copies a bitfield of &lt;width&gt; bits starting from bit position &lt;lsb&gt; in the source register to the least significant bits of the destination register, leaving the other destination bits unchanged.",
    "file": "bfxil_bfm.html"
  },
  {
    "name": "BGRP",
    "doc": "Group bits to right or left as selected by bitmask",
    "file": "bgrp_z_zz.html"
  },
  {
    "name": "BICS",
    "doc": "Bitwise Bit Clear (shifted register), setting flags, performs a bitwise AND of a register value and the complement of an optionally-shifted register value, and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "bics.html"
  },
  {
    "name": "BIC",
    "doc": "Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "bic_advsimd_imm.html"
  },
  {
    "name": "BIF",
    "doc": "Bitwise Insert if False. This instruction inserts each bit from the first source SIMD&amp;FP register into the destination SIMD&amp;FP register if the corresponding bit of the second source SIMD&amp;FP register is 0, otherwise leaves the bit in the destination register unchanged.",
    "file": "bif_advsimd.html"
  },
  {
    "name": "BIT",
    "doc": "Bitwise Insert if True. This instruction inserts each bit from the first source SIMD&amp;FP register into the SIMD&amp;FP destination register if the corresponding bit of the second source SIMD&amp;FP register is 1, otherwise leaves the bit in the destination register unchanged.",
    "file": "bit_advsimd.html"
  },
  {
    "name": "BL",
    "doc": "Branch with Link branches to a PC-relative offset, setting the register X30 to PC+4. It provides a hint that this is a subroutine call.",
    "file": "bl.html"
  },
  {
    "name": "BLR",
    "doc": "Branch with Link to Register calls a subroutine at an address in a register, setting register X30 to PC+4.",
    "file": "blr.html"
  },
  {
    "name": "BLRAA",
    "doc": "Branch with Link to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and calls a subroutine at the authenticated address, setting register X30 to PC+4.",
    "file": "blra.html"
  },
  {
    "name": "BLRAAZ",
    "doc": "Branch with Link to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and calls a subroutine at the authenticated address, setting register X30 to PC+4.",
    "file": "blra.html"
  },
  {
    "name": "BLRAB",
    "doc": "Branch with Link to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and calls a subroutine at the authenticated address, setting register X30 to PC+4.",
    "file": "blra.html"
  },
  {
    "name": "BLRABZ",
    "doc": "Branch with Link to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and calls a subroutine at the authenticated address, setting register X30 to PC+4.",
    "file": "blra.html"
  },
  {
    "name": "BMOPA",
    "doc": "Bitwise exclusive NOR population count outer product and accumulate",
    "file": "bmopa_za_pp_zz.html"
  },
  {
    "name": "BMOPS",
    "doc": "Bitwise exclusive NOR population count outer product and subtract",
    "file": "bmops_za_pp_zz.html"
  },
  {
    "name": "BR",
    "doc": "Branch to Register branches unconditionally to an address in a register, with a hint that this is not a subroutine return.",
    "file": "br.html"
  },
  {
    "name": "BRAA",
    "doc": "Branch to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and branches to the authenticated address.",
    "file": "bra.html"
  },
  {
    "name": "BRAAZ",
    "doc": "Branch to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and branches to the authenticated address.",
    "file": "bra.html"
  },
  {
    "name": "BRAB",
    "doc": "Branch to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and branches to the authenticated address.",
    "file": "bra.html"
  },
  {
    "name": "BRABZ",
    "doc": "Branch to Register, with pointer authentication. This instruction authenticates the address in the general-purpose register that is specified by &lt;Xn&gt;, using a modifier and the specified key, and branches to the authenticated address.",
    "file": "bra.html"
  },
  {
    "name": "BRB",
    "doc": "Branch Record Buffer. For more information, see op0==0b01, cache maintenance, TLB maintenance, and address translation instructions.",
    "file": "brb_sys.html"
  },
  {
    "name": "BRK",
    "doc": "Breakpoint instruction. A BRK instruction generates a Breakpoint Instruction exception. The PE records the exception in ESR_ELx, using the EC value 0x3c, and captures the value of the immediate argument in ESR_ELx.ISS.",
    "file": "brk.html"
  },
  {
    "name": "BRKAS",
    "doc": "Break after first true condition, setting the condition flags",
    "file": "brkas_p_p_p.html"
  },
  {
    "name": "BRKA",
    "doc": "Break after first true condition",
    "file": "brka_p_p_p.html"
  },
  {
    "name": "BRKBS",
    "doc": "Break before first true condition, setting the condition flags",
    "file": "brkbs_p_p_p.html"
  },
  {
    "name": "BRKB",
    "doc": "Break before first true condition",
    "file": "brkb_p_p_p.html"
  },
  {
    "name": "BRKNS",
    "doc": "Propagate break to next partition, setting the condition flags",
    "file": "brkns_p_p_pp.html"
  },
  {
    "name": "BRKN",
    "doc": "Propagate break to next partition",
    "file": "brkn_p_p_pp.html"
  },
  {
    "name": "BRKPAS",
    "doc": "Break after first true condition, propagating from previous partition and setting the condition flags",
    "file": "brkpas_p_p_pp.html"
  },
  {
    "name": "BRKPA",
    "doc": "Break after first true condition, propagating from previous partition",
    "file": "brkpa_p_p_pp.html"
  },
  {
    "name": "BRKPBS",
    "doc": "Break before first true condition, propagating from previous partition and setting the condition flags",
    "file": "brkpbs_p_p_pp.html"
  },
  {
    "name": "BRKPB",
    "doc": "Break before first true condition, propagating from previous partition",
    "file": "brkpb_p_p_pp.html"
  },
  {
    "name": "BSL1N",
    "doc": "Bitwise select with first input inverted",
    "file": "bsl1n_z_zzz.html"
  },
  {
    "name": "BSL2N",
    "doc": "Bitwise select with second input inverted",
    "file": "bsl2n_z_zzz.html"
  },
  {
    "name": "BSL",
    "doc": "Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.",
    "file": "bsl_advsimd.html"
  },
  {
    "name": "BTI",
    "doc": "Branch Target Identification. A BTI instruction is used to guard against the execution of instructions which are not the intended target of a branch.",
    "file": "bti.html"
  },
  {
    "name": "B",
    "doc": "Branch conditionally to a label at a PC-relative offset, with a hint that this is not a subroutine call or return.",
    "file": "b_cond.html"
  },
  {
    "name": "CADD",
    "doc": "Complex integer add with rotate",
    "file": "cadd_z_zz.html"
  },
  {
    "name": "CAS",
    "doc": "Compare and Swap word or doubleword in memory reads a 32-bit word or 64-bit doubleword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cas.html"
  },
  {
    "name": "CASA",
    "doc": "Compare and Swap word or doubleword in memory reads a 32-bit word or 64-bit doubleword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cas.html"
  },
  {
    "name": "CASAL",
    "doc": "Compare and Swap word or doubleword in memory reads a 32-bit word or 64-bit doubleword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cas.html"
  },
  {
    "name": "CASL",
    "doc": "Compare and Swap word or doubleword in memory reads a 32-bit word or 64-bit doubleword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cas.html"
  },
  {
    "name": "CASB",
    "doc": "Compare and Swap byte in memory reads an 8-bit byte from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "casb.html"
  },
  {
    "name": "CASAB",
    "doc": "Compare and Swap byte in memory reads an 8-bit byte from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "casb.html"
  },
  {
    "name": "CASALB",
    "doc": "Compare and Swap byte in memory reads an 8-bit byte from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "casb.html"
  },
  {
    "name": "CASLB",
    "doc": "Compare and Swap byte in memory reads an 8-bit byte from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "casb.html"
  },
  {
    "name": "CASH",
    "doc": "Compare and Swap halfword in memory reads a 16-bit halfword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cash.html"
  },
  {
    "name": "CASAH",
    "doc": "Compare and Swap halfword in memory reads a 16-bit halfword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cash.html"
  },
  {
    "name": "CASALH",
    "doc": "Compare and Swap halfword in memory reads a 16-bit halfword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cash.html"
  },
  {
    "name": "CASLH",
    "doc": "Compare and Swap halfword in memory reads a 16-bit halfword from memory, and compares it against the value held in a first register. If the comparison is equal, the value in a second register is written to memory. If the write is performed, the read and write occur atomically such that no other modification of the memory location can take place between the read and write.",
    "file": "cash.html"
  },
  {
    "name": "CASP",
    "doc": "Compare and Swap Pair of words or doublewords in memory reads a pair of 32-bit words or 64-bit doublewords from memory, and compares them against the values held in the first pair of registers. If the comparison is equal, the values in the second pair of registers are written to memory. If the writes are performed, the reads and writes occur atomically such that no other modification of the memory location can take place between the reads and writes.",
    "file": "casp.html"
  },
  {
    "name": "CASPA",
    "doc": "Compare and Swap Pair of words or doublewords in memory reads a pair of 32-bit words or 64-bit doublewords from memory, and compares them against the values held in the first pair of registers. If the comparison is equal, the values in the second pair of registers are written to memory. If the writes are performed, the reads and writes occur atomically such that no other modification of the memory location can take place between the reads and writes.",
    "file": "casp.html"
  },
  {
    "name": "CASPAL",
    "doc": "Compare and Swap Pair of words or doublewords in memory reads a pair of 32-bit words or 64-bit doublewords from memory, and compares them against the values held in the first pair of registers. If the comparison is equal, the values in the second pair of registers are written to memory. If the writes are performed, the reads and writes occur atomically such that no other modification of the memory location can take place between the reads and writes.",
    "file": "casp.html"
  },
  {
    "name": "CASPL",
    "doc": "Compare and Swap Pair of words or doublewords in memory reads a pair of 32-bit words or 64-bit doublewords from memory, and compares them against the values held in the first pair of registers. If the comparison is equal, the values in the second pair of registers are written to memory. If the writes are performed, the reads and writes occur atomically such that no other modification of the memory location can take place between the reads and writes.",
    "file": "casp.html"
  },
  {
    "name": "CBNZ",
    "doc": "Compare and Branch on Nonzero compares the value in a register with zero, and conditionally branches to a label at a PC-relative offset if the comparison is not equal. It provides a hint that this is not a subroutine call or return. This instruction does not affect the condition flags.",
    "file": "cbnz.html"
  },
  {
    "name": "CBZ",
    "doc": "Compare and Branch on Zero compares the value in a register with zero, and conditionally branches to a label at a PC-relative offset if the comparison is equal. It provides a hint that this is not a subroutine call or return. This instruction does not affect condition flags.",
    "file": "cbz.html"
  },
  {
    "name": "CCMN",
    "doc": "Conditional Compare Negative (immediate) sets the value of the condition flags to the result of the comparison of a register value and a negated immediate value if the condition is TRUE, and an immediate value otherwise.",
    "file": "ccmn_imm.html"
  },
  {
    "name": "CCMP",
    "doc": "Conditional Compare (immediate) sets the value of the condition flags to the result of the comparison of a register value and an immediate value if the condition is TRUE, and an immediate value otherwise.",
    "file": "ccmp_imm.html"
  },
  {
    "name": "CDOT",
    "doc": "Complex integer dot product",
    "file": "cdot_z_zzz.html"
  },
  {
    "name": "CFINV",
    "doc": "Invert Carry Flag. This instruction inverts the value of the PSTATE.C flag.",
    "file": "cfinv.html"
  },
  {
    "name": "CFP",
    "doc": "Control Flow Prediction Restriction by Context prevents control flow predictions that predict execution addresses based on information gathered from earlier execution within a particular execution context. Control flow predictions determined by the actions of code in the target execution context or contexts appearing in program order before the instruction cannot be used to exploitatively control speculative execution occurring after the instruction is complete and synchronized.",
    "file": "cfp_sys.html"
  },
  {
    "name": "CHKFEAT",
    "doc": "Check feature status. This instruction indicates the status of features.",
    "file": "chkfeat.html"
  },
  {
    "name": "CINC",
    "doc": "Conditional Increment returns, in the destination register, the value of the source register incremented by 1 if the condition is TRUE, and otherwise returns the value of the source register.",
    "file": "cinc_csinc.html"
  },
  {
    "name": "CINV",
    "doc": "Conditional Invert returns, in the destination register, the bitwise inversion of the value of the source register if the condition is TRUE, and otherwise returns the value of the source register.",
    "file": "cinv_csinv.html"
  },
  {
    "name": "CLASTA",
    "doc": "Conditionally extract element after last to general-purpose register",
    "file": "clasta_r_p_z.html"
  },
  {
    "name": "SIMD",
    "doc": "Conditionally extract element after last to SIMD&amp;FP scalar register",
    "file": "clasta_v_p_z.html"
  },
  {
    "name": "CLASTB",
    "doc": "Conditionally extract last element to general-purpose register",
    "file": "clastb_r_p_z.html"
  },
  {
    "name": "CLRBHB",
    "doc": "Clear Branch History clears the branch history for the current context to the extent that branch history information created before the CLRBHB instruction cannot be used by code before the CLRBHB instruction to exploitatively control the execution of any indirect branches in code in the current context that appear in program order after the instruction.",
    "file": "clrbhb.html"
  },
  {
    "name": "CLREX",
    "doc": "Clear Exclusive clears the local monitor of the executing PE.",
    "file": "clrex.html"
  },
  {
    "name": "CLS",
    "doc": "Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.",
    "file": "cls_advsimd.html"
  },
  {
    "name": "CLZ",
    "doc": "Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "clz_advsimd.html"
  },
  {
    "name": "CMEQ",
    "doc": "Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmeq_advsimd_reg.html"
  },
  {
    "name": "CMGE",
    "doc": "Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmge_advsimd_reg.html"
  },
  {
    "name": "CMGT",
    "doc": "Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmgt_advsimd_reg.html"
  },
  {
    "name": "CMHI",
    "doc": "Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmhi_advsimd.html"
  },
  {
    "name": "CMHS",
    "doc": "Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmhs_advsimd.html"
  },
  {
    "name": "CMLA",
    "doc": "Complex integer multiply-add with rotate",
    "file": "cmla_z_zzz.html"
  },
  {
    "name": "CMLE",
    "doc": "Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmle_advsimd.html"
  },
  {
    "name": "CMLT",
    "doc": "Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmlt_advsimd.html"
  },
  {
    "name": "CMN",
    "doc": "Compare Negative (extended register) adds a register value and a sign or zero-extended register value, followed by an optional left shift amount. The argument that is extended from the &lt;Rm&gt; register can be a byte, halfword, word, or doubleword. It updates the condition flags based on the result, and discards the result.",
    "file": "cmn_adds_addsub_ext.html"
  },
  {
    "name": "CMP",
    "doc": "Compare vector to immediate",
    "file": "cmpeq_p_p_zi.html"
  },
  {
    "name": "CMPLE",
    "doc": "Compare signed less than or equal to vector, setting the condition flags",
    "file": "cmple_cmpeq_p_p_zz.html"
  },
  {
    "name": "CMPLO",
    "doc": "Compare unsigned lower than vector, setting the condition flags",
    "file": "cmplo_cmpeq_p_p_zz.html"
  },
  {
    "name": "CMPLS",
    "doc": "Compare unsigned lower or same as vector, setting the condition flags",
    "file": "cmpls_cmpeq_p_p_zz.html"
  },
  {
    "name": "CMPLT",
    "doc": "Compare signed less than vector, setting the condition flags",
    "file": "cmplt_cmpeq_p_p_zz.html"
  },
  {
    "name": "CMPP",
    "doc": "Compare with Tag subtracts the 56-bit address held in the second source register from the 56-bit address held in the first source register, updates the condition flags based on the result of the subtraction, and discards the result.",
    "file": "cmpp_subps.html"
  },
  {
    "name": "CMTST",
    "doc": "Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "cmtst_advsimd.html"
  },
  {
    "name": "CNEG",
    "doc": "Conditional Negate returns, in the destination register, the negated value of the source register if the condition is TRUE, and otherwise returns the value of the source register.",
    "file": "cneg_csneg.html"
  },
  {
    "name": "CNOT",
    "doc": "Logically invert boolean condition in vector (predicated)",
    "file": "cnot_z_p_z.html"
  },
  {
    "name": "CNT",
    "doc": "Count bits counts the number of binary one bits in the value of the source register, and writes the result to the destination register.",
    "file": "cnt.html"
  },
  {
    "name": "CNTB",
    "doc": "Set scalar to multiple of predicate constraint element count",
    "file": "cntb_r_s.html"
  },
  {
    "name": "CNTD",
    "doc": "Set scalar to multiple of predicate constraint element count",
    "file": "cntb_r_s.html"
  },
  {
    "name": "CNTH",
    "doc": "Set scalar to multiple of predicate constraint element count",
    "file": "cntb_r_s.html"
  },
  {
    "name": "CNTW",
    "doc": "Set scalar to multiple of predicate constraint element count",
    "file": "cntb_r_s.html"
  },
  {
    "name": "CNTP",
    "doc": "Set scalar to count from predicate-as-counter",
    "file": "cntp_r_pn.html"
  },
  {
    "name": "COMPACT",
    "doc": "Shuffle active elements of vector to the right and fill with zero",
    "file": "compact_z_p_z.html"
  },
  {
    "name": "COSP",
    "doc": "Clear Other Speculative Prediction Restriction by Context prevents predictions, other than Cache prefetch, Control flow, and Data Value predictions, that predict execution addresses based on information gathered from earlier execution within a particular execution context. Predictions, other than Cache prefetch, Control flow, and Data Value predictions, determined by the actions of code in the target execution context or contexts appearing in program order before the instruction cannot exploitatively control any speculative access occurring after the instruction is complete and synchronized.",
    "file": "cosp_sys.html"
  },
  {
    "name": "CPP",
    "doc": "Cache Prefetch Prediction Restriction by Context prevents cache allocation predictions that predict execution addresses based on information gathered from earlier execution within a particular execution context. The actions of code in the target execution context or contexts appearing in program order before the instruction cannot exploitatively control cache prefetch predictions occurring after the instruction is complete and synchronized.",
    "file": "cpp_sys.html"
  },
  {
    "name": "CPYFP",
    "doc": "Memory Copy Forward-only. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFP, then CPYFM, and then CPYFE.",
    "file": "cpyfp.html"
  },
  {
    "name": "CPYFM",
    "doc": "Memory Copy Forward-only. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFP, then CPYFM, and then CPYFE.",
    "file": "cpyfp.html"
  },
  {
    "name": "CPYFE",
    "doc": "Memory Copy Forward-only. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFP, then CPYFM, and then CPYFE.",
    "file": "cpyfp.html"
  },
  {
    "name": "CPYFPN",
    "doc": "Memory Copy Forward-only, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPN, then CPYFMN, and then CPYFEN.",
    "file": "cpyfpn.html"
  },
  {
    "name": "CPYFMN",
    "doc": "Memory Copy Forward-only, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPN, then CPYFMN, and then CPYFEN.",
    "file": "cpyfpn.html"
  },
  {
    "name": "CPYFEN",
    "doc": "Memory Copy Forward-only, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPN, then CPYFMN, and then CPYFEN.",
    "file": "cpyfpn.html"
  },
  {
    "name": "CPYFPRN",
    "doc": "Memory Copy Forward-only, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRN, then CPYFMRN, and then CPYFERN.",
    "file": "cpyfprn.html"
  },
  {
    "name": "CPYFMRN",
    "doc": "Memory Copy Forward-only, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRN, then CPYFMRN, and then CPYFERN.",
    "file": "cpyfprn.html"
  },
  {
    "name": "CPYFERN",
    "doc": "Memory Copy Forward-only, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRN, then CPYFMRN, and then CPYFERN.",
    "file": "cpyfprn.html"
  },
  {
    "name": "CPYFPRT",
    "doc": "Memory Copy Forward-only, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRT, then CPYFMRT, and then CPYFERT.",
    "file": "cpyfprt.html"
  },
  {
    "name": "CPYFMRT",
    "doc": "Memory Copy Forward-only, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRT, then CPYFMRT, and then CPYFERT.",
    "file": "cpyfprt.html"
  },
  {
    "name": "CPYFERT",
    "doc": "Memory Copy Forward-only, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRT, then CPYFMRT, and then CPYFERT.",
    "file": "cpyfprt.html"
  },
  {
    "name": "CPYFPRTN",
    "doc": "Memory Copy Forward-only, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTN, then CPYFMRTN, and then CPYFERTN.",
    "file": "cpyfprtn.html"
  },
  {
    "name": "CPYFMRTN",
    "doc": "Memory Copy Forward-only, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTN, then CPYFMRTN, and then CPYFERTN.",
    "file": "cpyfprtn.html"
  },
  {
    "name": "CPYFERTN",
    "doc": "Memory Copy Forward-only, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTN, then CPYFMRTN, and then CPYFERTN.",
    "file": "cpyfprtn.html"
  },
  {
    "name": "CPYFPRTRN",
    "doc": "Memory Copy Forward-only, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTRN, then CPYFMRTRN, and then CPYFERTRN.",
    "file": "cpyfprtrn.html"
  },
  {
    "name": "CPYFMRTRN",
    "doc": "Memory Copy Forward-only, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTRN, then CPYFMRTRN, and then CPYFERTRN.",
    "file": "cpyfprtrn.html"
  },
  {
    "name": "CPYFERTRN",
    "doc": "Memory Copy Forward-only, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTRN, then CPYFMRTRN, and then CPYFERTRN.",
    "file": "cpyfprtrn.html"
  },
  {
    "name": "CPYFPRTWN",
    "doc": "Memory Copy Forward-only, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTWN, then CPYFMRTWN, and then CPYFERTWN.",
    "file": "cpyfprtwn.html"
  },
  {
    "name": "CPYFMRTWN",
    "doc": "Memory Copy Forward-only, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTWN, then CPYFMRTWN, and then CPYFERTWN.",
    "file": "cpyfprtwn.html"
  },
  {
    "name": "CPYFERTWN",
    "doc": "Memory Copy Forward-only, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPRTWN, then CPYFMRTWN, and then CPYFERTWN.",
    "file": "cpyfprtwn.html"
  },
  {
    "name": "CPYFPT",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPT, then CPYFMT, and then CPYFET.",
    "file": "cpyfpt.html"
  },
  {
    "name": "CPYFMT",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPT, then CPYFMT, and then CPYFET.",
    "file": "cpyfpt.html"
  },
  {
    "name": "CPYFET",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPT, then CPYFMT, and then CPYFET.",
    "file": "cpyfpt.html"
  },
  {
    "name": "CPYFPTN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTN, then CPYFMTN, and then CPYFETN.",
    "file": "cpyfptn.html"
  },
  {
    "name": "CPYFMTN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTN, then CPYFMTN, and then CPYFETN.",
    "file": "cpyfptn.html"
  },
  {
    "name": "CPYFETN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTN, then CPYFMTN, and then CPYFETN.",
    "file": "cpyfptn.html"
  },
  {
    "name": "CPYFPTRN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTRN, then CPYFMTRN, and then CPYFETRN.",
    "file": "cpyfptrn.html"
  },
  {
    "name": "CPYFMTRN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTRN, then CPYFMTRN, and then CPYFETRN.",
    "file": "cpyfptrn.html"
  },
  {
    "name": "CPYFETRN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTRN, then CPYFMTRN, and then CPYFETRN.",
    "file": "cpyfptrn.html"
  },
  {
    "name": "CPYFPTWN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTWN, then CPYFMTWN, and then CPYFETWN.",
    "file": "cpyfptwn.html"
  },
  {
    "name": "CPYFMTWN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTWN, then CPYFMTWN, and then CPYFETWN.",
    "file": "cpyfptwn.html"
  },
  {
    "name": "CPYFETWN",
    "doc": "Memory Copy Forward-only, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPTWN, then CPYFMTWN, and then CPYFETWN.",
    "file": "cpyfptwn.html"
  },
  {
    "name": "CPYFPWN",
    "doc": "Memory Copy Forward-only, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWN, then CPYFMWN, and then CPYFEWN.",
    "file": "cpyfpwn.html"
  },
  {
    "name": "CPYFMWN",
    "doc": "Memory Copy Forward-only, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWN, then CPYFMWN, and then CPYFEWN.",
    "file": "cpyfpwn.html"
  },
  {
    "name": "CPYFEWN",
    "doc": "Memory Copy Forward-only, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWN, then CPYFMWN, and then CPYFEWN.",
    "file": "cpyfpwn.html"
  },
  {
    "name": "CPYFPWT",
    "doc": "Memory Copy Forward-only, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWT, then CPYFMWT, and then CPYFEWT.",
    "file": "cpyfpwt.html"
  },
  {
    "name": "CPYFMWT",
    "doc": "Memory Copy Forward-only, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWT, then CPYFMWT, and then CPYFEWT.",
    "file": "cpyfpwt.html"
  },
  {
    "name": "CPYFEWT",
    "doc": "Memory Copy Forward-only, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWT, then CPYFMWT, and then CPYFEWT.",
    "file": "cpyfpwt.html"
  },
  {
    "name": "CPYFPWTN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTN, then CPYFMWTN, and then CPYFEWTN.",
    "file": "cpyfpwtn.html"
  },
  {
    "name": "CPYFMWTN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTN, then CPYFMWTN, and then CPYFEWTN.",
    "file": "cpyfpwtn.html"
  },
  {
    "name": "CPYFEWTN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTN, then CPYFMWTN, and then CPYFEWTN.",
    "file": "cpyfpwtn.html"
  },
  {
    "name": "CPYFPWTRN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTRN, then CPYFMWTRN, and then CPYFEWTRN.",
    "file": "cpyfpwtrn.html"
  },
  {
    "name": "CPYFMWTRN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTRN, then CPYFMWTRN, and then CPYFEWTRN.",
    "file": "cpyfpwtrn.html"
  },
  {
    "name": "CPYFEWTRN",
    "doc": "Memory Copy Forward-only, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTRN, then CPYFMWTRN, and then CPYFEWTRN.",
    "file": "cpyfpwtrn.html"
  },
  {
    "name": "CPYFPWTWN",
    "doc": "Memory Copy Forward-only, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTWN, then CPYFMWTWN, and then CPYFEWTWN.",
    "file": "cpyfpwtwn.html"
  },
  {
    "name": "CPYFMWTWN",
    "doc": "Memory Copy Forward-only, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTWN, then CPYFMWTWN, and then CPYFEWTWN.",
    "file": "cpyfpwtwn.html"
  },
  {
    "name": "CPYFEWTWN",
    "doc": "Memory Copy Forward-only, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWTWN, then CPYFMWTWN, and then CPYFEWTWN.",
    "file": "cpyfpwtwn.html"
  },
  {
    "name": "CPYP",
    "doc": "Memory Copy. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYP, then CPYM, and then CPYE.",
    "file": "cpyp.html"
  },
  {
    "name": "CPYM",
    "doc": "Memory Copy. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYP, then CPYM, and then CPYE.",
    "file": "cpyp.html"
  },
  {
    "name": "CPYE",
    "doc": "Memory Copy. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYP, then CPYM, and then CPYE.",
    "file": "cpyp.html"
  },
  {
    "name": "CPYPN",
    "doc": "Memory Copy, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPN, then CPYMN, and then CPYEN.",
    "file": "cpypn.html"
  },
  {
    "name": "CPYMN",
    "doc": "Memory Copy, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPN, then CPYMN, and then CPYEN.",
    "file": "cpypn.html"
  },
  {
    "name": "CPYEN",
    "doc": "Memory Copy, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPN, then CPYMN, and then CPYEN.",
    "file": "cpypn.html"
  },
  {
    "name": "CPYPRN",
    "doc": "Memory Copy, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRN, then CPYMRN, and then CPYERN.",
    "file": "cpyprn.html"
  },
  {
    "name": "CPYMRN",
    "doc": "Memory Copy, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRN, then CPYMRN, and then CPYERN.",
    "file": "cpyprn.html"
  },
  {
    "name": "CPYERN",
    "doc": "Memory Copy, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRN, then CPYMRN, and then CPYERN.",
    "file": "cpyprn.html"
  },
  {
    "name": "CPYPRT",
    "doc": "Memory Copy, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRT, then CPYMRT, and then CPYERT.",
    "file": "cpyprt.html"
  },
  {
    "name": "CPYMRT",
    "doc": "Memory Copy, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRT, then CPYMRT, and then CPYERT.",
    "file": "cpyprt.html"
  },
  {
    "name": "CPYERT",
    "doc": "Memory Copy, reads unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRT, then CPYMRT, and then CPYERT.",
    "file": "cpyprt.html"
  },
  {
    "name": "CPYPRTN",
    "doc": "Memory Copy, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTN, then CPYMRTN, and then CPYERTN.",
    "file": "cpyprtn.html"
  },
  {
    "name": "CPYMRTN",
    "doc": "Memory Copy, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTN, then CPYMRTN, and then CPYERTN.",
    "file": "cpyprtn.html"
  },
  {
    "name": "CPYERTN",
    "doc": "Memory Copy, reads unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTN, then CPYMRTN, and then CPYERTN.",
    "file": "cpyprtn.html"
  },
  {
    "name": "CPYPRTRN",
    "doc": "Memory Copy, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTRN, then CPYMRTRN, and then CPYERTRN.",
    "file": "cpyprtrn.html"
  },
  {
    "name": "CPYMRTRN",
    "doc": "Memory Copy, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTRN, then CPYMRTRN, and then CPYERTRN.",
    "file": "cpyprtrn.html"
  },
  {
    "name": "CPYERTRN",
    "doc": "Memory Copy, reads unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTRN, then CPYMRTRN, and then CPYERTRN.",
    "file": "cpyprtrn.html"
  },
  {
    "name": "CPYPRTWN",
    "doc": "Memory Copy, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTWN, then CPYMRTWN, and then CPYERTWN.",
    "file": "cpyprtwn.html"
  },
  {
    "name": "CPYMRTWN",
    "doc": "Memory Copy, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTWN, then CPYMRTWN, and then CPYERTWN.",
    "file": "cpyprtwn.html"
  },
  {
    "name": "CPYERTWN",
    "doc": "Memory Copy, reads unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPRTWN, then CPYMRTWN, and then CPYERTWN.",
    "file": "cpyprtwn.html"
  },
  {
    "name": "CPYPT",
    "doc": "Memory Copy, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPT, then CPYMT, and then CPYET.",
    "file": "cpypt.html"
  },
  {
    "name": "CPYMT",
    "doc": "Memory Copy, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPT, then CPYMT, and then CPYET.",
    "file": "cpypt.html"
  },
  {
    "name": "CPYET",
    "doc": "Memory Copy, reads and writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPT, then CPYMT, and then CPYET.",
    "file": "cpypt.html"
  },
  {
    "name": "CPYPTN",
    "doc": "Memory Copy, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTN, then CPYMTN, and then CPYETN.",
    "file": "cpyptn.html"
  },
  {
    "name": "CPYMTN",
    "doc": "Memory Copy, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTN, then CPYMTN, and then CPYETN.",
    "file": "cpyptn.html"
  },
  {
    "name": "CPYETN",
    "doc": "Memory Copy, reads and writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTN, then CPYMTN, and then CPYETN.",
    "file": "cpyptn.html"
  },
  {
    "name": "CPYPTRN",
    "doc": "Memory Copy, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTRN, then CPYMTRN, and then CPYETRN.",
    "file": "cpyptrn.html"
  },
  {
    "name": "CPYMTRN",
    "doc": "Memory Copy, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTRN, then CPYMTRN, and then CPYETRN.",
    "file": "cpyptrn.html"
  },
  {
    "name": "CPYETRN",
    "doc": "Memory Copy, reads and writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTRN, then CPYMTRN, and then CPYETRN.",
    "file": "cpyptrn.html"
  },
  {
    "name": "CPYPTWN",
    "doc": "Memory Copy, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTWN, then CPYMTWN, and then CPYETWN.",
    "file": "cpyptwn.html"
  },
  {
    "name": "CPYMTWN",
    "doc": "Memory Copy, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTWN, then CPYMTWN, and then CPYETWN.",
    "file": "cpyptwn.html"
  },
  {
    "name": "CPYETWN",
    "doc": "Memory Copy, reads and writes unprivileged, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPTWN, then CPYMTWN, and then CPYETWN.",
    "file": "cpyptwn.html"
  },
  {
    "name": "CPYPWN",
    "doc": "Memory Copy, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWN, then CPYMWN, and then CPYEWN.",
    "file": "cpypwn.html"
  },
  {
    "name": "CPYMWN",
    "doc": "Memory Copy, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWN, then CPYMWN, and then CPYEWN.",
    "file": "cpypwn.html"
  },
  {
    "name": "CPYEWN",
    "doc": "Memory Copy, writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWN, then CPYMWN, and then CPYEWN.",
    "file": "cpypwn.html"
  },
  {
    "name": "CPYPWT",
    "doc": "Memory Copy, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWT, then CPYMWT, and then CPYEWT.",
    "file": "cpypwt.html"
  },
  {
    "name": "CPYMWT",
    "doc": "Memory Copy, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWT, then CPYMWT, and then CPYEWT.",
    "file": "cpypwt.html"
  },
  {
    "name": "CPYEWT",
    "doc": "Memory Copy, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWT, then CPYMWT, and then CPYEWT.",
    "file": "cpypwt.html"
  },
  {
    "name": "CPYPWTN",
    "doc": "Memory Copy, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTN, then CPYMWTN, and then CPYEWTN.",
    "file": "cpypwtn.html"
  },
  {
    "name": "CPYMWTN",
    "doc": "Memory Copy, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTN, then CPYMWTN, and then CPYEWTN.",
    "file": "cpypwtn.html"
  },
  {
    "name": "CPYEWTN",
    "doc": "Memory Copy, writes unprivileged, reads and writes non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTN, then CPYMWTN, and then CPYEWTN.",
    "file": "cpypwtn.html"
  },
  {
    "name": "CPYPWTRN",
    "doc": "Memory Copy, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTRN, then CPYMWTRN, and then CPYEWTRN.",
    "file": "cpypwtrn.html"
  },
  {
    "name": "CPYMWTRN",
    "doc": "Memory Copy, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTRN, then CPYMWTRN, and then CPYEWTRN.",
    "file": "cpypwtrn.html"
  },
  {
    "name": "CPYEWTRN",
    "doc": "Memory Copy, writes unprivileged, reads non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTRN, then CPYMWTRN, and then CPYEWTRN.",
    "file": "cpypwtrn.html"
  },
  {
    "name": "CPYPWTWN",
    "doc": "Memory Copy, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTWN, then CPYMWTWN, and then CPYEWTWN.",
    "file": "cpypwtwn.html"
  },
  {
    "name": "CPYMWTWN",
    "doc": "Memory Copy, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTWN, then CPYMWTWN, and then CPYEWTWN.",
    "file": "cpypwtwn.html"
  },
  {
    "name": "CPYEWTWN",
    "doc": "Memory Copy, writes unprivileged and non-temporal. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYPWTWN, then CPYMWTWN, and then CPYEWTWN.",
    "file": "cpypwtwn.html"
  },
  {
    "name": "CPY",
    "doc": "Copy signed integer immediate to vector elements (zeroing)",
    "file": "cpy_z_o_i.html"
  },
  {
    "name": "CRC32B",
    "doc": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
    "file": "crc32.html"
  },
  {
    "name": "CRC32H",
    "doc": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
    "file": "crc32.html"
  },
  {
    "name": "CRC32W",
    "doc": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
    "file": "crc32.html"
  },
  {
    "name": "CRC32X",
    "doc": "CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
    "file": "crc32.html"
  },
  {
    "name": "CRC32CB",
    "doc": "CRC32C checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
    "file": "crc32c.html"
  },
  {
    "name": "CRC32CH",
    "doc": "CRC32C checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
    "file": "crc32c.html"
  },
  {
    "name": "CRC32CW",
    "doc": "CRC32C checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
    "file": "crc32c.html"
  },
  {
    "name": "CRC32CX",
    "doc": "CRC32C checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
    "file": "crc32c.html"
  },
  {
    "name": "CSDB",
    "doc": "Consumption of Speculative Data Barrier is a memory barrier that controls speculative execution and data value prediction.",
    "file": "csdb.html"
  },
  {
    "name": "CSEL",
    "doc": "If the condition is true, Conditional Select writes the value of the first source register to the destination register. If the condition is false, it writes the value of the second source register to the destination register.",
    "file": "csel.html"
  },
  {
    "name": "CSETM",
    "doc": "Conditional Set Mask sets all bits of the destination register to 1 if the condition is TRUE, and otherwise sets all bits to 0.",
    "file": "csetm_csinv.html"
  },
  {
    "name": "CSET",
    "doc": "Conditional Set sets the destination register to 1 if the condition is TRUE, and otherwise sets it to 0.",
    "file": "cset_csinc.html"
  },
  {
    "name": "CSINC",
    "doc": "Conditional Select Increment returns, in the destination register, the value of the first source register if the condition is TRUE, and otherwise returns the value of the second source register incremented by 1.",
    "file": "csinc.html"
  },
  {
    "name": "CSINV",
    "doc": "Conditional Select Invert returns, in the destination register, the value of the first source register if the condition is TRUE, and otherwise returns the bitwise inversion value of the second source register.",
    "file": "csinv.html"
  },
  {
    "name": "CSNEG",
    "doc": "Conditional Select Negation returns, in the destination register, the value of the first source register if the condition is TRUE, and otherwise returns the negated value of the second source register.",
    "file": "csneg.html"
  },
  {
    "name": "CTERMEQ",
    "doc": "Compare and terminate loop",
    "file": "ctermeq_rr.html"
  },
  {
    "name": "CTERMNE",
    "doc": "Compare and terminate loop",
    "file": "ctermeq_rr.html"
  },
  {
    "name": "CTZ",
    "doc": "Count Trailing Zeros counts the number of consecutive binary zero bits, starting from the least significant bit in the source register, and places the count in the destination register.",
    "file": "ctz.html"
  },
  {
    "name": "DCPS1",
    "doc": "Debug Change PE State to EL1, when executed in Debug state:",
    "file": "dcps1.html"
  },
  {
    "name": "DCPS2",
    "doc": "Debug Change PE State to EL2, when executed in Debug state:",
    "file": "dcps2.html"
  },
  {
    "name": "DCPS3",
    "doc": "Debug Change PE State to EL3, when executed in Debug state:",
    "file": "dcps3.html"
  },
  {
    "name": "DC",
    "doc": "Data Cache operation. For more information, see op0==0b01, cache maintenance, TLB maintenance, and address translation instructions.",
    "file": "dc_sys.html"
  },
  {
    "name": "DECB",
    "doc": "Decrement scalar by multiple of predicate constraint element count",
    "file": "decb_r_rs.html"
  },
  {
    "name": "DECD",
    "doc": "Decrement scalar by multiple of predicate constraint element count",
    "file": "decb_r_rs.html"
  },
  {
    "name": "DECH",
    "doc": "Decrement scalar by multiple of predicate constraint element count",
    "file": "decb_r_rs.html"
  },
  {
    "name": "DECW",
    "doc": "Decrement scalar by multiple of predicate constraint element count",
    "file": "decb_r_rs.html"
  },
  {
    "name": "DECP",
    "doc": "Decrement scalar by count of true predicate elements",
    "file": "decp_r_p_r.html"
  },
  {
    "name": "DGH",
    "doc": "Data Gathering Hint is a hint instruction that indicates that it is not expected to be performance optimal to merge memory accesses with Normal Non-cacheable or Device-GRE attributes appearing in program order before the hint instruction with any memory accesses appearing after the hint instruction into a single memory transaction on an interconnect.",
    "file": "dgh.html"
  },
  {
    "name": "DMB",
    "doc": "Data Memory Barrier is a memory barrier that ensures the ordering of observations of memory accesses, see Data Memory Barrier.",
    "file": "dmb.html"
  },
  {
    "name": "DRPS",
    "doc": "Debug restore process state",
    "file": "drps.html"
  },
  {
    "name": "DSB",
    "doc": "Data Synchronization Barrier is a memory barrier that ensures the completion of memory accesses, see Data Synchronization Barrier.",
    "file": "dsb.html"
  },
  {
    "name": "DUPM",
    "doc": "Broadcast logical bitmask immediate to vector (unpredicated)",
    "file": "dupm_z_i.html"
  },
  {
    "name": "DUPQ",
    "doc": "Broadcast indexed element within each quadword vector segment (unpredicated)",
    "file": "dupq_z_zi.html"
  },
  {
    "name": "DUP",
    "doc": "Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.",
    "file": "dup_advsimd_elt.html"
  },
  {
    "name": "DVP",
    "doc": "Data Value Prediction Restriction by Context prevents data value predictions that predict execution addresses based on information gathered from earlier execution within a particular execution context. Data value predictions determined by the actions of code in the target execution context or contexts appearing in program order before the instruction cannot be used to exploitatively control speculative execution occurring after the instruction is complete and synchronized.",
    "file": "dvp_sys.html"
  },
  {
    "name": "EON",
    "doc": "Bitwise Exclusive-OR NOT (shifted register) performs a bitwise exclusive-OR NOT of a register value and an optionally-shifted register value, and writes the result to the destination register.",
    "file": "eon.html"
  },
  {
    "name": "EOR3",
    "doc": "Three-way Exclusive-OR performs a three-way exclusive-OR of the values in the three source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.",
    "file": "eor3_advsimd.html"
  },
  {
    "name": "EORBT",
    "doc": "Interleaving exclusive OR (bottom, top)",
    "file": "eorbt_z_zz.html"
  },
  {
    "name": "EORQV",
    "doc": "Bitwise exclusive OR reduction of quadword vector segments",
    "file": "eorqv_z_p_z.html"
  },
  {
    "name": "EORS",
    "doc": "Bitwise exclusive OR predicates, setting the condition flags",
    "file": "eors_p_p_pp.html"
  },
  {
    "name": "EORTB",
    "doc": "Interleaving exclusive OR (top, bottom)",
    "file": "eortb_z_zz.html"
  },
  {
    "name": "EORV",
    "doc": "Bitwise exclusive OR reduction to scalar",
    "file": "eorv_r_p_z.html"
  },
  {
    "name": "EOR",
    "doc": "Bitwise Exclusive-OR (vector). This instruction performs a bitwise exclusive-OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.",
    "file": "eor_advsimd.html"
  },
  {
    "name": "ERET",
    "doc": "Exception Return using the ELR and SPSR for the current Exception level. When executed, the PE restores PSTATE from the SPSR, and branches to the address held in the ELR.",
    "file": "eret.html"
  },
  {
    "name": "ERETAA",
    "doc": "Exception Return, with pointer authentication. This instruction authenticates the address in ELR, using SP as the modifier and the specified key, the PE restores PSTATE from the SPSR for the current Exception level, and branches to the authenticated address.",
    "file": "ereta.html"
  },
  {
    "name": "ERETAB",
    "doc": "Exception Return, with pointer authentication. This instruction authenticates the address in ELR, using SP as the modifier and the specified key, the PE restores PSTATE from the SPSR for the current Exception level, and branches to the authenticated address.",
    "file": "ereta.html"
  },
  {
    "name": "ESB",
    "doc": "Error Synchronization Barrier is an error synchronization event that might also update DISR_EL1 and VDISR_EL2.",
    "file": "esb.html"
  },
  {
    "name": "EXTQ",
    "doc": "Extract vector segment from each pair of quadword vector segments",
    "file": "extq_z_zi.html"
  },
  {
    "name": "EXTR",
    "doc": "Extract register extracts a register from a pair of registers.",
    "file": "extr.html"
  },
  {
    "name": "EXT",
    "doc": "Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.",
    "file": "ext_advsimd.html"
  },
  {
    "name": "FABD",
    "doc": "Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fabd_advsimd.html"
  },
  {
    "name": "FABS",
    "doc": "Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fabs_advsimd.html"
  },
  {
    "name": "FACGE",
    "doc": "Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "facge_advsimd.html"
  },
  {
    "name": "FAC",
    "doc": "Floating-point absolute compare vectors",
    "file": "facge_p_p_zz.html"
  },
  {
    "name": "FACGT",
    "doc": "Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "facgt_advsimd.html"
  },
  {
    "name": "FACLE",
    "doc": "Floating-point absolute compare less than or equal",
    "file": "facle_facge_p_p_zz.html"
  },
  {
    "name": "FACLT",
    "doc": "Floating-point absolute compare less than",
    "file": "faclt_facge_p_p_zz.html"
  },
  {
    "name": "FADDA",
    "doc": "Floating-point add strictly-ordered reduction, accumulating in scalar",
    "file": "fadda_v_p_z.html"
  },
  {
    "name": "FADDP",
    "doc": "Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.",
    "file": "faddp_advsimd_pair.html"
  },
  {
    "name": "FADDQV",
    "doc": "Floating-point add recursive reduction of quadword vector segments",
    "file": "faddqv_z_p_z.html"
  },
  {
    "name": "FADDV",
    "doc": "Floating-point add recursive reduction to scalar",
    "file": "faddv_v_p_z.html"
  },
  {
    "name": "FADD",
    "doc": "Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&amp;FP registers, writes the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fadd_advsimd.html"
  },
  {
    "name": "FCADD",
    "doc": "Floating-point Complex Add.",
    "file": "fcadd_advsimd_vec.html"
  },
  {
    "name": "FCCMPE",
    "doc": "Floating-point Conditional signaling Compare (scalar). This instruction compares the two SIMD&amp;FP source register values and writes the result to the PSTATE.{N, Z, C, V} flags. If the condition does not pass then the PSTATE.{N, Z, C, V} flags are set to the flag bit specifier.",
    "file": "fccmpe_float.html"
  },
  {
    "name": "FCCMP",
    "doc": "Floating-point Conditional quiet Compare (scalar). This instruction compares the two SIMD&amp;FP source register values and writes the result to the PSTATE.{N, Z, C, V} flags. If the condition does not pass then the PSTATE.{N, Z, C, V} flags are set to the flag bit specifier.",
    "file": "fccmp_float.html"
  },
  {
    "name": "FCLAMP",
    "doc": "Multi-vector floating-point clamp to minimum/maximum number",
    "file": "fclamp_mz_zz.html"
  },
  {
    "name": "FCMEQ",
    "doc": "Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "fcmeq_advsimd_reg.html"
  },
  {
    "name": "FCM",
    "doc": "Floating-point compare vector with zero",
    "file": "fcmeq_p_p_z0.html"
  },
  {
    "name": "FCMGE",
    "doc": "Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "fcmge_advsimd_reg.html"
  },
  {
    "name": "FCMGT",
    "doc": "Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "fcmgt_advsimd_reg.html"
  },
  {
    "name": "FCMLA",
    "doc": "Floating-point Complex Multiply Accumulate (by element).",
    "file": "fcmla_advsimd_elt.html"
  },
  {
    "name": "FCMLE",
    "doc": "Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "fcmle_advsimd.html"
  },
  {
    "name": "FCMLT",
    "doc": "Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.",
    "file": "fcmlt_advsimd.html"
  },
  {
    "name": "FCMPE",
    "doc": "Floating-point signaling Compare (scalar). This instruction compares the two SIMD&amp;FP source register values, or the first SIMD&amp;FP source register value and zero. It writes the result to the PSTATE.{N, Z, C, V} flags.",
    "file": "fcmpe_float.html"
  },
  {
    "name": "FCMP",
    "doc": "Floating-point quiet Compare (scalar). This instruction compares the two SIMD&amp;FP source register values, or the first SIMD&amp;FP source register value and zero. It writes the result to the PSTATE.{N, Z, C, V} flags.",
    "file": "fcmp_float.html"
  },
  {
    "name": "FCPY",
    "doc": "Copy 8-bit floating-point immediate to vector elements (predicated)",
    "file": "fcpy_z_p_i.html"
  },
  {
    "name": "FCSEL",
    "doc": "Floating-point Conditional Select (scalar). This instruction allows the SIMD&amp;FP destination register to take the value from either one or the other of two SIMD&amp;FP source registers. If the condition passes, the first SIMD&amp;FP source register value is taken, otherwise the second SIMD&amp;FP source register value is taken.",
    "file": "fcsel_float.html"
  },
  {
    "name": "FCVTAS",
    "doc": "Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtas_advsimd.html"
  },
  {
    "name": "FCVTAU",
    "doc": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtau_advsimd.html"
  },
  {
    "name": "FCVTLT",
    "doc": "Floating-point up convert long (top, predicated)",
    "file": "fcvtlt_z_p_z.html"
  },
  {
    "name": "FCVTL",
    "doc": "Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&amp;FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&amp;FP destination register.",
    "file": "fcvtl_advsimd.html"
  },
  {
    "name": "FCVTL2",
    "doc": "Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&amp;FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&amp;FP destination register.",
    "file": "fcvtl_advsimd.html"
  },
  {
    "name": "FCVTMS",
    "doc": "Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtms_advsimd.html"
  },
  {
    "name": "FCVTMU",
    "doc": "Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtmu_advsimd.html"
  },
  {
    "name": "FCVTNS",
    "doc": "Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtns_advsimd.html"
  },
  {
    "name": "FCVTNT",
    "doc": "Floating-point down convert and narrow (top, predicated)",
    "file": "fcvtnt_z_p_z.html"
  },
  {
    "name": "FCVTNU",
    "doc": "Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtnu_advsimd.html"
  },
  {
    "name": "FCVTN",
    "doc": "Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&amp;FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.",
    "file": "fcvtn_advsimd.html"
  },
  {
    "name": "FCVTN2",
    "doc": "Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&amp;FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.",
    "file": "fcvtn_advsimd.html"
  },
  {
    "name": "FCVTPS",
    "doc": "Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtps_advsimd.html"
  },
  {
    "name": "FCVTPU",
    "doc": "Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtpu_advsimd.html"
  },
  {
    "name": "FCVTXNT",
    "doc": "Floating-point down convert, rounding to odd (top, predicated)",
    "file": "fcvtxnt_z_p_z.html"
  },
  {
    "name": "FCVTXN",
    "doc": "Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&amp;FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fcvtxn_advsimd.html"
  },
  {
    "name": "FCVTXN2",
    "doc": "Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&amp;FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fcvtxn_advsimd.html"
  },
  {
    "name": "FCVTX",
    "doc": "Floating-point down convert, rounding to odd (predicated)",
    "file": "fcvtx_z_p_z.html"
  },
  {
    "name": "FCVTZS",
    "doc": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvtzs_advsimd_fix.html"
  },
  {
    "name": "FCVTZU",
    "doc": "Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.",
    "file": "fcvtzu_advsimd_fix.html"
  },
  {
    "name": "FCVT",
    "doc": "Floating-point Convert precision (scalar). This instruction converts the floating-point value in the SIMD&amp;FP source register to the precision for the destination register data type using the rounding mode that is determined by the FPCR and writes the result to the SIMD&amp;FP destination register.",
    "file": "fcvt_float.html"
  },
  {
    "name": "FDIVR",
    "doc": "Floating-point reversed divide by vector (predicated)",
    "file": "fdivr_z_p_zz.html"
  },
  {
    "name": "FDIV",
    "doc": "Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&amp;FP register, by the floating-point values in the corresponding elements in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fdiv_advsimd.html"
  },
  {
    "name": "FDOT",
    "doc": "Multi-vector half-precision floating-point dot-product by indexed element",
    "file": "fdot_za_zzi.html"
  },
  {
    "name": "FDUP",
    "doc": "Broadcast 8-bit floating-point immediate to vector elements (unpredicated)",
    "file": "fdup_z_i.html"
  },
  {
    "name": "FEXPA",
    "doc": "Floating-point exponential accelerator",
    "file": "fexpa_z_z.html"
  },
  {
    "name": "FJCVTZS",
    "doc": "Floating-point Javascript Convert to Signed fixed-point, rounding toward Zero. This instruction converts the double-precision floating-point value in the SIMD&amp;FP source register to a 32-bit signed integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register. If the result is too large to be represented as a signed 32-bit integer, then the result is the integer modulo 232, as held in a 32-bit signed integer.",
    "file": "fjcvtzs.html"
  },
  {
    "name": "FLOGB",
    "doc": "Floating-point base 2 logarithm as integer",
    "file": "flogb_z_p_z.html"
  },
  {
    "name": "FMADD",
    "doc": "Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, adds the product to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fmadd_float.html"
  },
  {
    "name": "FMAD",
    "doc": "Floating-point fused multiply-add vectors (predicated), writing multiplicand [Zdn = Za + Zdn * Zm]",
    "file": "fmad_z_p_zzz.html"
  },
  {
    "name": "FMAXNMP",
    "doc": "Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.",
    "file": "fmaxnmp_advsimd_pair.html"
  },
  {
    "name": "FMAXNMQV",
    "doc": "Floating-point maximum number recursive reduction of quadword vector segments",
    "file": "fmaxnmqv_z_p_z.html"
  },
  {
    "name": "FMAXNMV",
    "doc": "Floating-point Maximum Number across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fmaxnmv_advsimd.html"
  },
  {
    "name": "FMAXNM",
    "doc": "Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fmaxnm_advsimd.html"
  },
  {
    "name": "FMAXP",
    "doc": "Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.",
    "file": "fmaxp_advsimd_pair.html"
  },
  {
    "name": "FMAXQV",
    "doc": "Floating-point maximum reduction of quadword vector segments",
    "file": "fmaxqv_z_p_z.html"
  },
  {
    "name": "FMAXV",
    "doc": "Floating-point Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fmaxv_advsimd.html"
  },
  {
    "name": "FMAX",
    "doc": "Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fmax_advsimd.html"
  },
  {
    "name": "FMINNMP",
    "doc": "Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.",
    "file": "fminnmp_advsimd_pair.html"
  },
  {
    "name": "FMINNMQV",
    "doc": "Floating-point minimum number recursive reduction of quadword vector segments",
    "file": "fminnmqv_z_p_z.html"
  },
  {
    "name": "FMINNMV",
    "doc": "Floating-point Minimum Number across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fminnmv_advsimd.html"
  },
  {
    "name": "FMINNM",
    "doc": "Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fminnm_advsimd.html"
  },
  {
    "name": "FMINP",
    "doc": "Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.",
    "file": "fminp_advsimd_pair.html"
  },
  {
    "name": "FMINQV",
    "doc": "Floating-point minimum recursive reduction of quadword vector segments",
    "file": "fminqv_z_p_z.html"
  },
  {
    "name": "FMINV",
    "doc": "Floating-point Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fminv_advsimd.html"
  },
  {
    "name": "FMIN",
    "doc": "Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fmin_advsimd.html"
  },
  {
    "name": "FMLALB",
    "doc": "Half-precision floating-point multiply-add long to single-precision (bottom)",
    "file": "fmlalb_z_zzz.html"
  },
  {
    "name": "FMLALT",
    "doc": "Half-precision floating-point multiply-add long to single-precision (top)",
    "file": "fmlalt_z_zzz.html"
  },
  {
    "name": "FMLAL",
    "doc": "Floating-point fused Multiply-Add Long to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "fmlal_advsimd_elt.html"
  },
  {
    "name": "FMLAL2",
    "doc": "Floating-point fused Multiply-Add Long to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "fmlal_advsimd_elt.html"
  },
  {
    "name": "FMLA",
    "doc": "Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fmla_advsimd_elt.html"
  },
  {
    "name": "FMLSLB",
    "doc": "Half-precision floating-point multiply-subtract long from single-precision (bottom)",
    "file": "fmlslb_z_zzz.html"
  },
  {
    "name": "FMLSLT",
    "doc": "Half-precision floating-point multiply-subtract long from single-precision (top)",
    "file": "fmlslt_z_zzz.html"
  },
  {
    "name": "FMLSL",
    "doc": "Floating-point fused Multiply-Subtract Long from accumulator (by element). This instruction multiplies the negated vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "fmlsl_advsimd_elt.html"
  },
  {
    "name": "FMLSL2",
    "doc": "Floating-point fused Multiply-Subtract Long from accumulator (by element). This instruction multiplies the negated vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "fmlsl_advsimd_elt.html"
  },
  {
    "name": "FMLS",
    "doc": "Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fmls_advsimd_elt.html"
  },
  {
    "name": "FMMLA",
    "doc": "Floating-point matrix multiply-accumulate",
    "file": "fmmla_z_zzz.html"
  },
  {
    "name": "FMOPA",
    "doc": "Half-precision floating-point sum of outer products and accumulate",
    "file": "fmopa_za32_pp_zz.html"
  },
  {
    "name": "FMOPS",
    "doc": "Half-precision floating-point sum of outer products and subtract",
    "file": "fmops_za32_pp_zz.html"
  },
  {
    "name": "FMOV",
    "doc": "Floating-point move immediate (vector). This instruction copies an immediate floating-point constant into every element of the SIMD&amp;FP destination register.",
    "file": "fmov_advsimd.html"
  },
  {
    "name": "FMSB",
    "doc": "Floating-point fused multiply-subtract vectors (predicated), writing multiplicand [Zdn = Za + -Zdn * Zm]",
    "file": "fmsb_z_p_zzz.html"
  },
  {
    "name": "FMSUB",
    "doc": "Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, negates the product, adds that to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.",
    "file": "fmsub_float.html"
  },
  {
    "name": "FMULX",
    "doc": "Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fmulx_advsimd_elt.html"
  },
  {
    "name": "FMUL",
    "doc": "Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.",
    "file": "fmul_advsimd_elt.html"
  },
  {
    "name": "FNEG",
    "doc": "Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fneg_advsimd.html"
  },
  {
    "name": "FNMADD",
    "doc": "Floating-point Negated fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, negates the product, subtracts the value of the third SIMD&amp;FP source register, and writes the result to the destination SIMD&amp;FP register.",
    "file": "fnmadd_float.html"
  },
  {
    "name": "FNMAD",
    "doc": "Floating-point negated fused multiply-add vectors (predicated), writing multiplicand [Zdn = -Za + -Zdn * Zm]",
    "file": "fnmad_z_p_zzz.html"
  },
  {
    "name": "FNMLA",
    "doc": "Floating-point negated fused multiply-add vectors (predicated), writing addend [Zda = -Zda + -Zn * Zm]",
    "file": "fnmla_z_p_zzz.html"
  },
  {
    "name": "FNMLS",
    "doc": "Floating-point negated fused multiply-subtract vectors (predicated), writing addend [Zda = -Zda + Zn * Zm]",
    "file": "fnmls_z_p_zzz.html"
  },
  {
    "name": "FNMSB",
    "doc": "Floating-point negated fused multiply-subtract vectors (predicated), writing multiplicand [Zdn = -Za + Zdn * Zm]",
    "file": "fnmsb_z_p_zzz.html"
  },
  {
    "name": "FNMSUB",
    "doc": "Floating-point Negated fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, subtracts the value of the third SIMD&amp;FP source register, and writes the result to the destination SIMD&amp;FP register.",
    "file": "fnmsub_float.html"
  },
  {
    "name": "FNMUL",
    "doc": "Floating-point Multiply-Negate (scalar). This instruction multiplies the floating-point values of the two source SIMD&amp;FP registers, and writes the negation of the result to the destination SIMD&amp;FP register.",
    "file": "fnmul_float.html"
  },
  {
    "name": "FRECPE",
    "doc": "Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "frecpe_advsimd.html"
  },
  {
    "name": "FRECPS",
    "doc": "Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "frecps_advsimd.html"
  },
  {
    "name": "FRECPX",
    "doc": "Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for the source SIMD&amp;FP register and writes the result to the destination SIMD&amp;FP register.",
    "file": "frecpx_advsimd.html"
  },
  {
    "name": "FRINT32X",
    "doc": "Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frint32x_advsimd.html"
  },
  {
    "name": "FRINT32Z",
    "doc": "Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frint32z_advsimd.html"
  },
  {
    "name": "FRINT64X",
    "doc": "Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frint64x_advsimd.html"
  },
  {
    "name": "FRINT64Z",
    "doc": "Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frint64z_advsimd.html"
  },
  {
    "name": "FRINTA",
    "doc": "Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frinta_advsimd.html"
  },
  {
    "name": "FRINT",
    "doc": "Floating-point round to integral value (predicated)",
    "file": "frinta_z_p_z.html"
  },
  {
    "name": "FRINTI",
    "doc": "Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frinti_advsimd.html"
  },
  {
    "name": "FRINTM",
    "doc": "Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frintm_advsimd.html"
  },
  {
    "name": "FRINTN",
    "doc": "Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frintn_advsimd.html"
  },
  {
    "name": "FRINTP",
    "doc": "Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frintp_advsimd.html"
  },
  {
    "name": "FRINTX",
    "doc": "Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frintx_advsimd.html"
  },
  {
    "name": "FRINTZ",
    "doc": "Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.",
    "file": "frintz_advsimd.html"
  },
  {
    "name": "FRSQRTE",
    "doc": "Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "frsqrte_advsimd.html"
  },
  {
    "name": "FRSQRTS",
    "doc": "Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "frsqrts_advsimd.html"
  },
  {
    "name": "FSCALE",
    "doc": "Floating-point adjust exponent by vector (predicated)",
    "file": "fscale_z_p_zz.html"
  },
  {
    "name": "FSQRT",
    "doc": "Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fsqrt_advsimd.html"
  },
  {
    "name": "FSUBR",
    "doc": "Floating-point reversed subtract from immediate (predicated)",
    "file": "fsubr_z_p_zs.html"
  },
  {
    "name": "FSUB",
    "doc": "Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register, from the corresponding elements in the vector in the first source SIMD&amp;FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "fsub_advsimd.html"
  },
  {
    "name": "FTMAD",
    "doc": "Floating-point trigonometric multiply-add coefficient",
    "file": "ftmad_z_zzi.html"
  },
  {
    "name": "FTSMUL",
    "doc": "Floating-point trigonometric starting value",
    "file": "ftsmul_z_zz.html"
  },
  {
    "name": "FTSSEL",
    "doc": "Floating-point trigonometric select coefficient",
    "file": "ftssel_z_zz.html"
  },
  {
    "name": "FVDOT",
    "doc": "Multi-vector half-precision floating-point vertical dot-product by indexed element",
    "file": "fvdot_za_zzi.html"
  },
  {
    "name": "GCSB",
    "doc": "Guarded Control Stack Barrier. This instruction generates a Guarded control stack data synchronization event.",
    "file": "gcsb.html"
  },
  {
    "name": "DSYNC",
    "doc": "Guarded Control Stack Barrier. This instruction generates a Guarded control stack data synchronization event.",
    "file": "gcsb.html"
  },
  {
    "name": "GCSPOPCX",
    "doc": "Guarded Control Stack Pop and Compare exception return record loads an exception return record from the location indicated by the current Guarded control stack pointer register, compares the loaded values with the current ELR_ELx, SPSR_ELx, and LR, and increments the pointer by the size of a Guarded control stack exception return record.",
    "file": "gcspopcx_sys.html"
  },
  {
    "name": "GCSPOPM",
    "doc": "Guarded Control Stack Pop loads the 64-bit doubleword that is pointed to by the current Guarded control stack pointer, writes it to the destination register, and increments the current Guarded control stack pointer register by the size of a Guarded control stack procedure return record.",
    "file": "gcspopm_sysl.html"
  },
  {
    "name": "GCSPOPX",
    "doc": "Guarded Control Stack Pop exception return record loads an exception return record from the location indicated by the current Guarded control stack pointer register, checks that the record is an exception return record, and increments the pointer by the size of a Guarded control stack exception return record.",
    "file": "gcspopx_sys.html"
  },
  {
    "name": "GCSPUSHM",
    "doc": "Guarded Control Stack Push decrements the current Guarded control stack pointer register by the size of a Guarded control procedure return record and stores an entry to the Guarded control stack.",
    "file": "gcspushm_sys.html"
  },
  {
    "name": "GCSPUSHX",
    "doc": "Guarded Control Stack Push exception return record decrements the current Guarded control stack pointer register by the size of a Guarded control stack exception return record and stores an exception return record to the Guarded control stack.",
    "file": "gcspushx_sys.html"
  },
  {
    "name": "GCSSS1",
    "doc": "Guarded Control Stack Switch Stack 1 validates that the stack being switched to contains a Valid cap entry, stores an In-progress cap entry to the stack that is being switched to, and sets the current Guarded control stack pointer to the stack that is being switched to.",
    "file": "gcsss1_sys.html"
  },
  {
    "name": "GCSSS2",
    "doc": "Guarded Control Stack Switch Stack 2 validates that the most recent entry of the Guarded control stack being switched to contains an In-progress cap entry, stores a Valid cap entry to the Guarded control stack that is being switched from, and sets Xt to the Guarded control stack pointer that is being switched from.",
    "file": "gcsss2_sysl.html"
  },
  {
    "name": "GCSSTR",
    "doc": "Guarded Control Stack Store stores a doubleword from a register to memory. The address that is used for the store is calculated from a base register.",
    "file": "gcsstr.html"
  },
  {
    "name": "GCSSTTR",
    "doc": "Guarded Control Stack unprivileged Store stores a doubleword from a register to memory. The address that is used for the store is calculated from a base register.",
    "file": "gcssttr.html"
  },
  {
    "name": "GMI",
    "doc": "Tag Mask Insert inserts the tag in the first source register into the excluded set specified in the second source register, writing the new excluded set to the destination register.",
    "file": "gmi.html"
  },
  {
    "name": "HINT",
    "doc": "Hint instruction is for the instruction set space that is reserved for architectural hint instructions.",
    "file": "hint.html"
  },
  {
    "name": "HISTCNT",
    "doc": "Count matching elements in vector",
    "file": "histcnt_z_p_zz.html"
  },
  {
    "name": "HISTSEG",
    "doc": "Count matching elements in vector segments",
    "file": "histseg_z_zz.html"
  },
  {
    "name": "HLT",
    "doc": "Halt instruction. An HLT instruction can generate a Halt Instruction debug event, which causes entry into Debug state.",
    "file": "hlt.html"
  },
  {
    "name": "HVC",
    "doc": "Hypervisor Call causes an exception to EL2. Software executing at EL1 can use this instruction to call the hypervisor to request a service.",
    "file": "hvc.html"
  },
  {
    "name": "IC",
    "doc": "Instruction Cache operation. For more information, see op0==0b01, cache maintenance, TLB maintenance, and address translation instructions.",
    "file": "ic_sys.html"
  },
  {
    "name": "INCB",
    "doc": "Increment scalar by multiple of predicate constraint element count",
    "file": "incb_r_rs.html"
  },
  {
    "name": "INCD",
    "doc": "Increment scalar by multiple of predicate constraint element count",
    "file": "incb_r_rs.html"
  },
  {
    "name": "INCH",
    "doc": "Increment scalar by multiple of predicate constraint element count",
    "file": "incb_r_rs.html"
  },
  {
    "name": "INCW",
    "doc": "Increment scalar by multiple of predicate constraint element count",
    "file": "incb_r_rs.html"
  },
  {
    "name": "INCP",
    "doc": "Increment scalar by count of true predicate elements",
    "file": "incp_r_p_r.html"
  },
  {
    "name": "INDEX",
    "doc": "Create index starting from and incremented by immediate",
    "file": "index_z_ii.html"
  },
  {
    "name": "INSR",
    "doc": "Insert general-purpose register in shifted vector",
    "file": "insr_z_r.html"
  },
  {
    "name": "INS",
    "doc": "Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.",
    "file": "ins_advsimd_elt.html"
  },
  {
    "name": "IRG",
    "doc": "Insert Random Tag inserts a random Logical Address Tag into the address in the first source register, and writes the result to the destination register. Any tags specified in the optional second source register or in GCR_EL1.Exclude are excluded from the selection of the random Logical Address Tag.",
    "file": "irg.html"
  },
  {
    "name": "ISB",
    "doc": "Instruction Synchronization Barrier flushes the pipeline in the PE and is a context synchronization event. For more information, see Instruction Synchronization Barrier (ISB).",
    "file": "isb.html"
  },
  {
    "name": "LASTA",
    "doc": "Extract element after last to general-purpose register",
    "file": "lasta_r_p_z.html"
  },
  {
    "name": "LASTB",
    "doc": "Extract last element to general-purpose register",
    "file": "lastb_r_p_z.html"
  },
  {
    "name": "LD1B",
    "doc": "Contiguous load of bytes to multiple strided vectors (immediate index)",
    "file": "ld1b_mzx_p_bi.html"
  },
  {
    "name": "LD1D",
    "doc": "Contiguous load of doublewords to multiple strided vectors (immediate index)",
    "file": "ld1d_mzx_p_bi.html"
  },
  {
    "name": "LD1H",
    "doc": "Contiguous load of halfwords to multiple strided vectors (immediate index)",
    "file": "ld1h_mzx_p_bi.html"
  },
  {
    "name": "LD1Q",
    "doc": "Contiguous load of quadwords to 128-bit element ZA tile slice",
    "file": "ld1q_za_p_rrr.html"
  },
  {
    "name": "LD1RB",
    "doc": "Load and broadcast unsigned byte to vector",
    "file": "ld1rb_z_p_bi.html"
  },
  {
    "name": "LD1RD",
    "doc": "Load and broadcast doubleword to vector",
    "file": "ld1rd_z_p_bi.html"
  },
  {
    "name": "LD1RH",
    "doc": "Load and broadcast unsigned halfword to vector",
    "file": "ld1rh_z_p_bi.html"
  },
  {
    "name": "LD1ROB",
    "doc": "Contiguous load and replicate thirty-two bytes (immediate index)",
    "file": "ld1rob_z_p_bi.html"
  },
  {
    "name": "LD1ROD",
    "doc": "Contiguous load and replicate four doublewords (immediate index)",
    "file": "ld1rod_z_p_bi.html"
  },
  {
    "name": "LD1ROH",
    "doc": "Contiguous load and replicate sixteen halfwords (immediate index)",
    "file": "ld1roh_z_p_bi.html"
  },
  {
    "name": "LD1ROW",
    "doc": "Contiguous load and replicate eight words (immediate index)",
    "file": "ld1row_z_p_bi.html"
  },
  {
    "name": "LD1RQB",
    "doc": "Contiguous load and replicate sixteen bytes (immediate index)",
    "file": "ld1rqb_z_p_bi.html"
  },
  {
    "name": "LD1RQD",
    "doc": "Contiguous load and replicate two doublewords (immediate index)",
    "file": "ld1rqd_z_p_bi.html"
  },
  {
    "name": "LD1RQH",
    "doc": "Contiguous load and replicate eight halfwords (immediate index)",
    "file": "ld1rqh_z_p_bi.html"
  },
  {
    "name": "LD1RQW",
    "doc": "Contiguous load and replicate four words (immediate index)",
    "file": "ld1rqw_z_p_bi.html"
  },
  {
    "name": "LD1RSB",
    "doc": "Load and broadcast signed byte to vector",
    "file": "ld1rsb_z_p_bi.html"
  },
  {
    "name": "LD1RSH",
    "doc": "Load and broadcast signed halfword to vector",
    "file": "ld1rsh_z_p_bi.html"
  },
  {
    "name": "LD1RSW",
    "doc": "Load and broadcast signed word to vector",
    "file": "ld1rsw_z_p_bi.html"
  },
  {
    "name": "LD1RW",
    "doc": "Load and broadcast unsigned word to vector",
    "file": "ld1rw_z_p_bi.html"
  },
  {
    "name": "LD1R",
    "doc": "Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&amp;FP register.",
    "file": "ld1r_advsimd.html"
  },
  {
    "name": "LD1SB",
    "doc": "Gather load signed bytes to vector (immediate index)",
    "file": "ld1sb_z_p_ai.html"
  },
  {
    "name": "LD1SH",
    "doc": "Gather load signed halfwords to vector (immediate index)",
    "file": "ld1sh_z_p_ai.html"
  },
  {
    "name": "LD1SW",
    "doc": "Gather load signed words to vector (immediate index)",
    "file": "ld1sw_z_p_ai.html"
  },
  {
    "name": "LD1W",
    "doc": "Contiguous load of words to multiple strided vectors (immediate index)",
    "file": "ld1w_mzx_p_bi.html"
  },
  {
    "name": "LD1",
    "doc": "Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&amp;FP registers.",
    "file": "ld1_advsimd_mult.html"
  },
  {
    "name": "LD2B",
    "doc": "Contiguous load two-byte structures to two vectors (immediate index)",
    "file": "ld2b_z_p_bi.html"
  },
  {
    "name": "LD2D",
    "doc": "Contiguous load two-doubleword structures to two vectors (immediate index)",
    "file": "ld2d_z_p_bi.html"
  },
  {
    "name": "LD2H",
    "doc": "Contiguous load two-halfword structures to two vectors (immediate index)",
    "file": "ld2h_z_p_bi.html"
  },
  {
    "name": "LD2Q",
    "doc": "Contiguous load two-quadword structures to two vectors (immediate index)",
    "file": "ld2q_z_p_bi.html"
  },
  {
    "name": "LD2R",
    "doc": "Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&amp;FP registers.",
    "file": "ld2r_advsimd.html"
  },
  {
    "name": "LD2W",
    "doc": "Contiguous load two-word structures to two vectors (immediate index)",
    "file": "ld2w_z_p_bi.html"
  },
  {
    "name": "LD2",
    "doc": "Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&amp;FP registers, with de-interleaving.",
    "file": "ld2_advsimd_mult.html"
  },
  {
    "name": "LD3B",
    "doc": "Contiguous load three-byte structures to three vectors (immediate index)",
    "file": "ld3b_z_p_bi.html"
  },
  {
    "name": "LD3D",
    "doc": "Contiguous load three-doubleword structures to three vectors (immediate index)",
    "file": "ld3d_z_p_bi.html"
  },
  {
    "name": "LD3H",
    "doc": "Contiguous load three-halfword structures to three vectors (immediate index)",
    "file": "ld3h_z_p_bi.html"
  },
  {
    "name": "LD3Q",
    "doc": "Contiguous load three-quadword structures to three vectors (immediate index)",
    "file": "ld3q_z_p_bi.html"
  },
  {
    "name": "LD3R",
    "doc": "Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&amp;FP registers.",
    "file": "ld3r_advsimd.html"
  },
  {
    "name": "LD3W",
    "doc": "Contiguous load three-word structures to three vectors (immediate index)",
    "file": "ld3w_z_p_bi.html"
  },
  {
    "name": "LD3",
    "doc": "Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&amp;FP registers, with de-interleaving.",
    "file": "ld3_advsimd_mult.html"
  },
  {
    "name": "LD4B",
    "doc": "Contiguous load four-byte structures to four vectors (immediate index)",
    "file": "ld4b_z_p_bi.html"
  },
  {
    "name": "LD4D",
    "doc": "Contiguous load four-doubleword structures to four vectors (immediate index)",
    "file": "ld4d_z_p_bi.html"
  },
  {
    "name": "LD4H",
    "doc": "Contiguous load four-halfword structures to four vectors (immediate index)",
    "file": "ld4h_z_p_bi.html"
  },
  {
    "name": "LD4Q",
    "doc": "Contiguous load four-quadword structures to four vectors (immediate index)",
    "file": "ld4q_z_p_bi.html"
  },
  {
    "name": "LD4R",
    "doc": "Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&amp;FP registers.",
    "file": "ld4r_advsimd.html"
  },
  {
    "name": "LD4W",
    "doc": "Contiguous load four-word structures to four vectors (immediate index)",
    "file": "ld4w_z_p_bi.html"
  },
  {
    "name": "LD4",
    "doc": "Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&amp;FP registers, with de-interleaving.",
    "file": "ld4_advsimd_mult.html"
  },
  {
    "name": "LD64B",
    "doc": "Single-copy Atomic 64-byte Load derives an address from a base register value, loads eight 64-bit doublewords from a memory location, and writes them to consecutive registers, Xt to X(t+7). The data that is loaded is atomic and is required to be 64-byte aligned.",
    "file": "ld64b.html"
  },
  {
    "name": "LDADD",
    "doc": "Atomic add on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldadd.html"
  },
  {
    "name": "LDADDA",
    "doc": "Atomic add on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldadd.html"
  },
  {
    "name": "LDADDAL",
    "doc": "Atomic add on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldadd.html"
  },
  {
    "name": "LDADDL",
    "doc": "Atomic add on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldadd.html"
  },
  {
    "name": "LDADDB",
    "doc": "Atomic add on byte in memory atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddb.html"
  },
  {
    "name": "LDADDAB",
    "doc": "Atomic add on byte in memory atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddb.html"
  },
  {
    "name": "LDADDALB",
    "doc": "Atomic add on byte in memory atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddb.html"
  },
  {
    "name": "LDADDLB",
    "doc": "Atomic add on byte in memory atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddb.html"
  },
  {
    "name": "LDADDH",
    "doc": "Atomic add on halfword in memory atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddh.html"
  },
  {
    "name": "LDADDAH",
    "doc": "Atomic add on halfword in memory atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddh.html"
  },
  {
    "name": "LDADDALH",
    "doc": "Atomic add on halfword in memory atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddh.html"
  },
  {
    "name": "LDADDLH",
    "doc": "Atomic add on halfword in memory atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldaddh.html"
  },
  {
    "name": "LDAP1",
    "doc": "Load-Acquire RCpc one single-element structure to one lane of one register. This instruction loads a single-element structure from memory and writes the result to the specified lane of the SIMD&amp;FP register without affecting the other bits of the register.",
    "file": "ldap1_advsimd_sngl.html"
  },
  {
    "name": "LDAPR",
    "doc": "Load-Acquire RCpc Register derives an address from a base register value, loads a 32-bit word or 64-bit doubleword from the derived address in memory, and writes it to a register.",
    "file": "ldapr.html"
  },
  {
    "name": "LDAPRB",
    "doc": "Load-Acquire RCpc Register Byte derives an address from a base register value, loads a byte from the derived address in memory, zero-extends it and writes it to a register.",
    "file": "ldaprb.html"
  },
  {
    "name": "LDAPRH",
    "doc": "Load-Acquire RCpc Register Halfword derives an address from a base register value, loads a halfword from the derived address in memory, zero-extends it and writes it to a register.",
    "file": "ldaprh.html"
  },
  {
    "name": "LDAPURB",
    "doc": "Load-Acquire RCpc Register Byte (unscaled) calculates an address from a base register and an immediate offset, loads a byte from memory, zero-extends it, and writes it to a register.",
    "file": "ldapurb.html"
  },
  {
    "name": "LDAPURH",
    "doc": "Load-Acquire RCpc Register Halfword (unscaled) calculates an address from a base register and an immediate offset, loads a halfword from memory, zero-extends it, and writes it to a register.",
    "file": "ldapurh.html"
  },
  {
    "name": "LDAPURSB",
    "doc": "Load-Acquire RCpc Register Signed Byte (unscaled) calculates an address from a base register and an immediate offset, loads a signed byte from memory, sign-extends it, and writes it to a register.",
    "file": "ldapursb.html"
  },
  {
    "name": "LDAPURSH",
    "doc": "Load-Acquire RCpc Register Signed Halfword (unscaled) calculates an address from a base register and an immediate offset, loads a signed halfword from memory, sign-extends it, and writes it to a register.",
    "file": "ldapursh.html"
  },
  {
    "name": "LDAPURSW",
    "doc": "Load-Acquire RCpc Register Signed Word (unscaled) calculates an address from a base register and an immediate offset, loads a signed word from memory, sign-extends it, and writes it to a register.",
    "file": "ldapursw.html"
  },
  {
    "name": "LDAPUR",
    "doc": "Load-Acquire RCpc SIMD&amp;FP Register (unscaled offset). This instruction loads a SIMD&amp;FP register from memory. The address that is used for the load is calculated from a base register value and an optional immediate offset.",
    "file": "ldapur_fpsimd.html"
  },
  {
    "name": "LDAR",
    "doc": "Load-Acquire Register derives an address from a base register value, loads a 32-bit word or 64-bit doubleword from memory, and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldar.html"
  },
  {
    "name": "LDARB",
    "doc": "Load-Acquire Register Byte derives an address from a base register value, loads a byte from memory, zero-extends it and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldarb.html"
  },
  {
    "name": "LDARH",
    "doc": "Load-Acquire Register Halfword derives an address from a base register value, loads a halfword from memory, zero-extends it, and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldarh.html"
  },
  {
    "name": "LDAXP",
    "doc": "Load-Acquire Exclusive Pair of Registers derives an address from a base register value, loads two 32-bit words or two 64-bit doublewords from memory, and writes them to two registers. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. The instruction also has memory ordering semantics, as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldaxp.html"
  },
  {
    "name": "LDAXR",
    "doc": "Load-Acquire Exclusive Register derives an address from a base register value, loads a 32-bit word or 64-bit doubleword from memory, and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldaxr.html"
  },
  {
    "name": "LDAXRB",
    "doc": "Load-Acquire Exclusive Register Byte derives an address from a base register value, loads a byte from memory, zero-extends it and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldaxrb.html"
  },
  {
    "name": "LDAXRH",
    "doc": "Load-Acquire Exclusive Register Halfword derives an address from a base register value, loads a halfword from memory, zero-extends it and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldaxrh.html"
  },
  {
    "name": "LDCLR",
    "doc": "Atomic bit clear on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclr.html"
  },
  {
    "name": "LDCLRA",
    "doc": "Atomic bit clear on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclr.html"
  },
  {
    "name": "LDCLRAL",
    "doc": "Atomic bit clear on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclr.html"
  },
  {
    "name": "LDCLRL",
    "doc": "Atomic bit clear on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclr.html"
  },
  {
    "name": "LDCLRB",
    "doc": "Atomic bit clear on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrb.html"
  },
  {
    "name": "LDCLRAB",
    "doc": "Atomic bit clear on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrb.html"
  },
  {
    "name": "LDCLRALB",
    "doc": "Atomic bit clear on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrb.html"
  },
  {
    "name": "LDCLRLB",
    "doc": "Atomic bit clear on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrb.html"
  },
  {
    "name": "LDCLRH",
    "doc": "Atomic bit clear on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrh.html"
  },
  {
    "name": "LDCLRAH",
    "doc": "Atomic bit clear on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrh.html"
  },
  {
    "name": "LDCLRALH",
    "doc": "Atomic bit clear on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrh.html"
  },
  {
    "name": "LDCLRLH",
    "doc": "Atomic bit clear on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldclrh.html"
  },
  {
    "name": "LDCLRP",
    "doc": "Atomic bit clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldclrp.html"
  },
  {
    "name": "LDCLRPA",
    "doc": "Atomic bit clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldclrp.html"
  },
  {
    "name": "LDCLRPAL",
    "doc": "Atomic bit clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldclrp.html"
  },
  {
    "name": "LDCLRPL",
    "doc": "Atomic bit clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldclrp.html"
  },
  {
    "name": "LDEOR",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeor.html"
  },
  {
    "name": "LDEORA",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeor.html"
  },
  {
    "name": "LDEORAL",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeor.html"
  },
  {
    "name": "LDEORL",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeor.html"
  },
  {
    "name": "LDEORB",
    "doc": "Atomic Exclusive-OR on byte in memory atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorb.html"
  },
  {
    "name": "LDEORAB",
    "doc": "Atomic Exclusive-OR on byte in memory atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorb.html"
  },
  {
    "name": "LDEORALB",
    "doc": "Atomic Exclusive-OR on byte in memory atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorb.html"
  },
  {
    "name": "LDEORLB",
    "doc": "Atomic Exclusive-OR on byte in memory atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorb.html"
  },
  {
    "name": "LDEORH",
    "doc": "Atomic Exclusive-OR on halfword in memory atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorh.html"
  },
  {
    "name": "LDEORAH",
    "doc": "Atomic Exclusive-OR on halfword in memory atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorh.html"
  },
  {
    "name": "LDEORALH",
    "doc": "Atomic Exclusive-OR on halfword in memory atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorh.html"
  },
  {
    "name": "LDEORLH",
    "doc": "Atomic Exclusive-OR on halfword in memory atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldeorh.html"
  },
  {
    "name": "LDFF1B",
    "doc": "Gather load first-fault unsigned bytes to vector (immediate index)",
    "file": "ldff1b_z_p_ai.html"
  },
  {
    "name": "LDFF1D",
    "doc": "Gather load first-fault doublewords to vector (immediate index)",
    "file": "ldff1d_z_p_ai.html"
  },
  {
    "name": "LDFF1H",
    "doc": "Gather load first-fault unsigned halfwords to vector (immediate index)",
    "file": "ldff1h_z_p_ai.html"
  },
  {
    "name": "LDFF1SB",
    "doc": "Gather load first-fault signed bytes to vector (immediate index)",
    "file": "ldff1sb_z_p_ai.html"
  },
  {
    "name": "LDFF1SH",
    "doc": "Gather load first-fault signed halfwords to vector (immediate index)",
    "file": "ldff1sh_z_p_ai.html"
  },
  {
    "name": "LDFF1SW",
    "doc": "Gather load first-fault signed words to vector (immediate index)",
    "file": "ldff1sw_z_p_ai.html"
  },
  {
    "name": "LDFF1W",
    "doc": "Gather load first-fault unsigned words to vector (immediate index)",
    "file": "ldff1w_z_p_ai.html"
  },
  {
    "name": "LDG",
    "doc": "Load Allocation Tag loads an Allocation Tag from a memory address, generates a Logical Address Tag from the Allocation Tag and merges it into the destination register. The address used for the load is calculated from the base register and an immediate signed offset scaled by the Tag granule.",
    "file": "ldg.html"
  },
  {
    "name": "LDGM",
    "doc": "Load Tag Multiple reads a naturally aligned block of N Allocation Tags, where the size of N is identified in GMID_EL1.BS, and writes the Allocation Tag read from address A to the destination register at 4*A&lt;7:4&gt;+3:4*A&lt;7:4&gt;. Bits of the destination register not written with an Allocation Tag are set to 0.",
    "file": "ldgm.html"
  },
  {
    "name": "LDIAPP",
    "doc": "Load-Acquire RCpc ordered Pair of registers calculates an address from a base register value and an optional offset, loads two 32-bit words or two 64-bit doublewords from memory, and writes them to two registers. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. The instruction also has memory ordering semantics, as described in Load-Acquire, Load-AcquirePC, and Store-Release, except that:",
    "file": "ldiapp.html"
  },
  {
    "name": "LDLAR",
    "doc": "Load LOAcquire Register loads a 32-bit word or 64-bit doubleword from memory, and writes it to a register. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldlar.html"
  },
  {
    "name": "LDLARB",
    "doc": "Load LOAcquire Register Byte loads a byte from memory, zero-extends it and writes it to a register. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldlarb.html"
  },
  {
    "name": "LDLARH",
    "doc": "Load LOAcquire Register Halfword loads a halfword from memory, zero-extends it, and writes it to a register. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldlarh.html"
  },
  {
    "name": "LDNF1B",
    "doc": "Contiguous load non-fault unsigned bytes to vector (immediate index)",
    "file": "ldnf1b_z_p_bi.html"
  },
  {
    "name": "LDNF1D",
    "doc": "Contiguous load non-fault doublewords to vector (immediate index)",
    "file": "ldnf1d_z_p_bi.html"
  },
  {
    "name": "LDNF1H",
    "doc": "Contiguous load non-fault unsigned halfwords to vector (immediate index)",
    "file": "ldnf1h_z_p_bi.html"
  },
  {
    "name": "LDNF1SB",
    "doc": "Contiguous load non-fault signed bytes to vector (immediate index)",
    "file": "ldnf1sb_z_p_bi.html"
  },
  {
    "name": "LDNF1SH",
    "doc": "Contiguous load non-fault signed halfwords to vector (immediate index)",
    "file": "ldnf1sh_z_p_bi.html"
  },
  {
    "name": "LDNF1SW",
    "doc": "Contiguous load non-fault signed words to vector (immediate index)",
    "file": "ldnf1sw_z_p_bi.html"
  },
  {
    "name": "LDNF1W",
    "doc": "Contiguous load non-fault unsigned words to vector (immediate index)",
    "file": "ldnf1w_z_p_bi.html"
  },
  {
    "name": "LDNP",
    "doc": "Load Pair of SIMD&amp;FP registers, with Non-temporal hint. This instruction loads a pair of SIMD&amp;FP registers from memory, issuing a hint to the memory system that the access is non-temporal. The address that is used for the load is calculated from a base register value and an optional immediate offset.",
    "file": "ldnp_fpsimd.html"
  },
  {
    "name": "LDNT1B",
    "doc": "Contiguous load non-temporal of bytes to multiple strided vectors (immediate index)",
    "file": "ldnt1b_mzx_p_bi.html"
  },
  {
    "name": "LDNT1D",
    "doc": "Contiguous load non-temporal of doublewords to multiple strided vectors (immediate index)",
    "file": "ldnt1d_mzx_p_bi.html"
  },
  {
    "name": "LDNT1H",
    "doc": "Contiguous load non-temporal of halfwords to multiple strided vectors (immediate index)",
    "file": "ldnt1h_mzx_p_bi.html"
  },
  {
    "name": "LDNT1SB",
    "doc": "Gather load non-temporal signed bytes",
    "file": "ldnt1sb_z_p_ar.html"
  },
  {
    "name": "LDNT1SH",
    "doc": "Gather load non-temporal signed halfwords",
    "file": "ldnt1sh_z_p_ar.html"
  },
  {
    "name": "LDNT1SW",
    "doc": "Gather load non-temporal signed words",
    "file": "ldnt1sw_z_p_ar.html"
  },
  {
    "name": "LDNT1W",
    "doc": "Contiguous load non-temporal of words to multiple strided vectors (immediate index)",
    "file": "ldnt1w_mzx_p_bi.html"
  },
  {
    "name": "LDPSW",
    "doc": "Load Pair of Registers Signed Word calculates an address from a base register value and an immediate offset, loads two 32-bit words from memory, sign-extends them, and writes them to two registers. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldpsw.html"
  },
  {
    "name": "LDP",
    "doc": "Load Pair of SIMD&amp;FP registers. This instruction loads a pair of SIMD&amp;FP registers from memory. The address that is used for the load is calculated from a base register value and an optional immediate offset.",
    "file": "ldp_fpsimd.html"
  },
  {
    "name": "LDRAA",
    "doc": "Load Register, with pointer authentication. This instruction authenticates an address from a base register using a modifier of zero and the specified key, adds an immediate offset to the authenticated address, and loads a 64-bit doubleword from memory at this resulting address into a register.",
    "file": "ldra.html"
  },
  {
    "name": "LDRAB",
    "doc": "Load Register, with pointer authentication. This instruction authenticates an address from a base register using a modifier of zero and the specified key, adds an immediate offset to the authenticated address, and loads a 64-bit doubleword from memory at this resulting address into a register.",
    "file": "ldra.html"
  },
  {
    "name": "LDRB",
    "doc": "Load Register Byte (immediate) loads a byte from memory, zero-extends it, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldrb_imm.html"
  },
  {
    "name": "LDRH",
    "doc": "Load Register Halfword (immediate) loads a halfword from memory, zero-extends it, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldrh_imm.html"
  },
  {
    "name": "LDRSB",
    "doc": "Load Register Signed Byte (immediate) loads a byte from memory, sign-extends it to either 32 bits or 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldrsb_imm.html"
  },
  {
    "name": "LDRSH",
    "doc": "Load Register Signed Halfword (immediate) loads a halfword from memory, sign-extends it to 32 bits or 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldrsh_imm.html"
  },
  {
    "name": "LDRSW",
    "doc": "Load Register Signed Word (immediate) loads a word from memory, sign-extends it to 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldrsw_imm.html"
  },
  {
    "name": "LDR",
    "doc": "Load SIMD&amp;FP Register (immediate offset). This instruction loads an element from memory, and writes the result as a scalar to the SIMD&amp;FP register. The address that is used for the load is calculated from a base register value, a signed immediate offset, and an optional offset that is a multiple of the element size.",
    "file": "ldr_imm_fpsimd.html"
  },
  {
    "name": "ZT0",
    "doc": "Load ZT0 register",
    "file": "ldr_zt_br.html"
  },
  {
    "name": "LDSET",
    "doc": "Atomic bit set on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldset.html"
  },
  {
    "name": "LDSETA",
    "doc": "Atomic bit set on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldset.html"
  },
  {
    "name": "LDSETAL",
    "doc": "Atomic bit set on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldset.html"
  },
  {
    "name": "LDSETL",
    "doc": "Atomic bit set on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldset.html"
  },
  {
    "name": "LDSETB",
    "doc": "Atomic bit set on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsetb.html"
  },
  {
    "name": "LDSETAB",
    "doc": "Atomic bit set on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsetb.html"
  },
  {
    "name": "LDSETALB",
    "doc": "Atomic bit set on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsetb.html"
  },
  {
    "name": "LDSETLB",
    "doc": "Atomic bit set on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsetb.html"
  },
  {
    "name": "LDSETH",
    "doc": "Atomic bit set on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldseth.html"
  },
  {
    "name": "LDSETAH",
    "doc": "Atomic bit set on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldseth.html"
  },
  {
    "name": "LDSETALH",
    "doc": "Atomic bit set on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldseth.html"
  },
  {
    "name": "LDSETLH",
    "doc": "Atomic bit set on halfword in memory atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
    "file": "ldseth.html"
  },
  {
    "name": "LDSETP",
    "doc": "Atomic bit set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldsetp.html"
  },
  {
    "name": "LDSETPA",
    "doc": "Atomic bit set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldsetp.html"
  },
  {
    "name": "LDSETPAL",
    "doc": "Atomic bit set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldsetp.html"
  },
  {
    "name": "LDSETPL",
    "doc": "Atomic bit set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and stores the result back to memory. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "ldsetp.html"
  },
  {
    "name": "LDSMAX",
    "doc": "Atomic signed maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmax.html"
  },
  {
    "name": "LDSMAXA",
    "doc": "Atomic signed maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmax.html"
  },
  {
    "name": "LDSMAXAL",
    "doc": "Atomic signed maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmax.html"
  },
  {
    "name": "LDSMAXL",
    "doc": "Atomic signed maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmax.html"
  },
  {
    "name": "LDSMAXB",
    "doc": "Atomic signed maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxb.html"
  },
  {
    "name": "LDSMAXAB",
    "doc": "Atomic signed maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxb.html"
  },
  {
    "name": "LDSMAXALB",
    "doc": "Atomic signed maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxb.html"
  },
  {
    "name": "LDSMAXLB",
    "doc": "Atomic signed maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxb.html"
  },
  {
    "name": "LDSMAXH",
    "doc": "Atomic signed maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxh.html"
  },
  {
    "name": "LDSMAXAH",
    "doc": "Atomic signed maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxh.html"
  },
  {
    "name": "LDSMAXALH",
    "doc": "Atomic signed maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxh.html"
  },
  {
    "name": "LDSMAXLH",
    "doc": "Atomic signed maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmaxh.html"
  },
  {
    "name": "LDSMIN",
    "doc": "Atomic signed minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmin.html"
  },
  {
    "name": "LDSMINA",
    "doc": "Atomic signed minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmin.html"
  },
  {
    "name": "LDSMINAL",
    "doc": "Atomic signed minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmin.html"
  },
  {
    "name": "LDSMINL",
    "doc": "Atomic signed minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsmin.html"
  },
  {
    "name": "LDSMINB",
    "doc": "Atomic signed minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminb.html"
  },
  {
    "name": "LDSMINAB",
    "doc": "Atomic signed minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminb.html"
  },
  {
    "name": "LDSMINALB",
    "doc": "Atomic signed minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminb.html"
  },
  {
    "name": "LDSMINLB",
    "doc": "Atomic signed minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminb.html"
  },
  {
    "name": "LDSMINH",
    "doc": "Atomic signed minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminh.html"
  },
  {
    "name": "LDSMINAH",
    "doc": "Atomic signed minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminh.html"
  },
  {
    "name": "LDSMINALH",
    "doc": "Atomic signed minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminh.html"
  },
  {
    "name": "LDSMINLH",
    "doc": "Atomic signed minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldsminh.html"
  },
  {
    "name": "LDTR",
    "doc": "Load Register (unprivileged) loads a word or doubleword from memory, and writes it to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtr.html"
  },
  {
    "name": "LDTRB",
    "doc": "Load Register Byte (unprivileged) loads a byte from memory, zero-extends it, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtrb.html"
  },
  {
    "name": "LDTRH",
    "doc": "Load Register Halfword (unprivileged) loads a halfword from memory, zero-extends it, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtrh.html"
  },
  {
    "name": "LDTRSB",
    "doc": "Load Register Signed Byte (unprivileged) loads a byte from memory, sign-extends it to 32 bits or 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtrsb.html"
  },
  {
    "name": "LDTRSH",
    "doc": "Load Register Signed Halfword (unprivileged) loads a halfword from memory, sign-extends it to 32 bits or 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtrsh.html"
  },
  {
    "name": "LDTRSW",
    "doc": "Load Register Signed Word (unprivileged) loads a word from memory, sign-extends it to 64 bits, and writes the result to a register. The address that is used for the load is calculated from a base register and an immediate offset.",
    "file": "ldtrsw.html"
  },
  {
    "name": "LDUMAX",
    "doc": "Atomic unsigned maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumax.html"
  },
  {
    "name": "LDUMAXA",
    "doc": "Atomic unsigned maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumax.html"
  },
  {
    "name": "LDUMAXAL",
    "doc": "Atomic unsigned maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumax.html"
  },
  {
    "name": "LDUMAXL",
    "doc": "Atomic unsigned maximum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumax.html"
  },
  {
    "name": "LDUMAXB",
    "doc": "Atomic unsigned maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxb.html"
  },
  {
    "name": "LDUMAXAB",
    "doc": "Atomic unsigned maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxb.html"
  },
  {
    "name": "LDUMAXALB",
    "doc": "Atomic unsigned maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxb.html"
  },
  {
    "name": "LDUMAXLB",
    "doc": "Atomic unsigned maximum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxb.html"
  },
  {
    "name": "LDUMAXH",
    "doc": "Atomic unsigned maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxh.html"
  },
  {
    "name": "LDUMAXAH",
    "doc": "Atomic unsigned maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxh.html"
  },
  {
    "name": "LDUMAXALH",
    "doc": "Atomic unsigned maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxh.html"
  },
  {
    "name": "LDUMAXLH",
    "doc": "Atomic unsigned maximum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumaxh.html"
  },
  {
    "name": "LDUMIN",
    "doc": "Atomic unsigned minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumin.html"
  },
  {
    "name": "LDUMINA",
    "doc": "Atomic unsigned minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumin.html"
  },
  {
    "name": "LDUMINAL",
    "doc": "Atomic unsigned minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumin.html"
  },
  {
    "name": "LDUMINL",
    "doc": "Atomic unsigned minimum on word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "ldumin.html"
  },
  {
    "name": "LDUMINB",
    "doc": "Atomic unsigned minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminb.html"
  },
  {
    "name": "LDUMINAB",
    "doc": "Atomic unsigned minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminb.html"
  },
  {
    "name": "LDUMINALB",
    "doc": "Atomic unsigned minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminb.html"
  },
  {
    "name": "LDUMINLB",
    "doc": "Atomic unsigned minimum on byte in memory atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminb.html"
  },
  {
    "name": "LDUMINH",
    "doc": "Atomic unsigned minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminh.html"
  },
  {
    "name": "LDUMINAH",
    "doc": "Atomic unsigned minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminh.html"
  },
  {
    "name": "LDUMINALH",
    "doc": "Atomic unsigned minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminh.html"
  },
  {
    "name": "LDUMINLH",
    "doc": "Atomic unsigned minimum on halfword in memory atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers. The value initially loaded from memory is returned in the destination register.",
    "file": "lduminh.html"
  },
  {
    "name": "LDURB",
    "doc": "Load Register Byte (unscaled) calculates an address from a base register and an immediate offset, loads a byte from memory, zero-extends it, and writes it to a register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldurb.html"
  },
  {
    "name": "LDURH",
    "doc": "Load Register Halfword (unscaled) calculates an address from a base register and an immediate offset, loads a halfword from memory, zero-extends it, and writes it to a register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldurh.html"
  },
  {
    "name": "LDURSB",
    "doc": "Load Register Signed Byte (unscaled) calculates an address from a base register and an immediate offset, loads a signed byte from memory, sign-extends it, and writes it to a register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldursb.html"
  },
  {
    "name": "LDURSH",
    "doc": "Load Register Signed Halfword (unscaled) calculates an address from a base register and an immediate offset, loads a signed halfword from memory, sign-extends it, and writes it to a register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldursh.html"
  },
  {
    "name": "LDURSW",
    "doc": "Load Register Signed Word (unscaled) calculates an address from a base register and an immediate offset, loads a signed word from memory, sign-extends it, and writes it to a register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldursw.html"
  },
  {
    "name": "LDUR",
    "doc": "Load SIMD&amp;FP Register (unscaled offset). This instruction loads a SIMD&amp;FP register from memory. The address that is used for the load is calculated from a base register value and an optional immediate offset.",
    "file": "ldur_fpsimd.html"
  },
  {
    "name": "LDXP",
    "doc": "Load Exclusive Pair of Registers derives an address from a base register value, loads two 32-bit words or two 64-bit doublewords from memory, and writes them to two registers. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldxp.html"
  },
  {
    "name": "LDXR",
    "doc": "Load Exclusive Register derives an address from a base register value, loads a 32-bit word or a 64-bit doubleword from memory, and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldxr.html"
  },
  {
    "name": "LDXRB",
    "doc": "Load Exclusive Register Byte derives an address from a base register value, loads a byte from memory, zero-extends it and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldxrb.html"
  },
  {
    "name": "LDXRH",
    "doc": "Load Exclusive Register Halfword derives an address from a base register value, loads a halfword from memory, zero-extends it and writes it to a register. The memory access is atomic. The PE marks the physical address being accessed as an exclusive access. This exclusive access mark is checked by Store Exclusive instructions. See Synchronization and semaphores. For information about memory accesses, see Load/Store addressing modes.",
    "file": "ldxrh.html"
  },
  {
    "name": "LSLR",
    "doc": "Reversed logical shift left by vector (predicated)",
    "file": "lslr_z_p_zz.html"
  },
  {
    "name": "LSLV",
    "doc": "Logical Shift Left Variable shifts a register value left by a variable number of bits, shifting in zeros, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is left-shifted.",
    "file": "lslv.html"
  },
  {
    "name": "LSL",
    "doc": "Logical Shift Left (register) shifts a register value left by a variable number of bits, shifting in zeros, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is left-shifted.",
    "file": "lsl_lslv.html"
  },
  {
    "name": "LSRR",
    "doc": "Reversed logical shift right by vector (predicated)",
    "file": "lsrr_z_p_zz.html"
  },
  {
    "name": "LSRV",
    "doc": "Logical Shift Right Variable shifts a register value right by a variable number of bits, shifting in zeros, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is right-shifted.",
    "file": "lsrv.html"
  },
  {
    "name": "LSR",
    "doc": "Logical Shift Right (register) shifts a register value right by a variable number of bits, shifting in zeros, and writes the result to the destination register. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is right-shifted.",
    "file": "lsr_lsrv.html"
  },
  {
    "name": "LUTI2",
    "doc": "Lookup table read with 2-bit indexes",
    "file": "luti2_mz2_ztz.html"
  },
  {
    "name": "LUTI4",
    "doc": "Lookup table read with 4-bit indexes",
    "file": "luti4_mz2_ztz.html"
  },
  {
    "name": "MADD",
    "doc": "Multiply-Add multiplies two register values, adds a third register value, and writes the result to the destination register.",
    "file": "madd.html"
  },
  {
    "name": "MAD",
    "doc": "Multiply-add vectors (predicated), writing multiplicand [Zdn = Za + Zdn * Zm]",
    "file": "mad_z_p_zzz.html"
  },
  {
    "name": "MATCH",
    "doc": "Detect any matching elements, setting the condition flags",
    "file": "match_p_p_zz.html"
  },
  {
    "name": "MLA",
    "doc": "Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "mla_advsimd_elt.html"
  },
  {
    "name": "MLS",
    "doc": "Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "mls_advsimd_elt.html"
  },
  {
    "name": "MNEG",
    "doc": "Multiply-Negate multiplies two register values, negates the product, and writes the result to the destination register.",
    "file": "mneg_msub.html"
  },
  {
    "name": "MOVAZ",
    "doc": "Move and zero two ZA tile slices to vector registers",
    "file": "movaz_mz2_za.html"
  },
  {
    "name": "MOVA",
    "doc": "Move two ZA tile slices to two vector registers",
    "file": "mova_mz2_za.html"
  },
  {
    "name": "MOVI",
    "doc": "Move Immediate (vector). This instruction places an immediate constant into every vector element of the destination SIMD&amp;FP register.",
    "file": "movi_advsimd.html"
  },
  {
    "name": "MOVK",
    "doc": "Move wide with keep moves an optionally-shifted 16-bit immediate value into a register, keeping other bits unchanged.",
    "file": "movk.html"
  },
  {
    "name": "MOVN",
    "doc": "Move wide with NOT moves the inverse of an optionally-shifted 16-bit immediate value to a register.",
    "file": "movn.html"
  },
  {
    "name": "MOVPRFX",
    "doc": "Move prefix (predicated)",
    "file": "movprfx_z_p_z.html"
  },
  {
    "name": "MOVS",
    "doc": "Move predicates (zeroing), setting the condition flags",
    "file": "movs_ands_p_p_pp.html"
  },
  {
    "name": "MOVT",
    "doc": "Move 8 bytes from ZT0 to general-purpose register",
    "file": "movt_r_zt.html"
  },
  {
    "name": "MOVZ",
    "doc": "Move wide with zero moves an optionally-shifted 16-bit immediate value to a register.",
    "file": "movz.html"
  },
  {
    "name": "MOV",
    "doc": "Move between register and stack pointer",
    "file": "mov_add_addsub_imm.html"
  },
  {
    "name": "MRRS",
    "doc": "Move System Register to two adjacent general-purpose registers allows the PE to read an AArch64 128-bit System register into two adjacent 64-bit general-purpose registers.",
    "file": "mrrs.html"
  },
  {
    "name": "MRS",
    "doc": "Move System Register to general-purpose register allows the PE to read an AArch64 System register into a general-purpose register.",
    "file": "mrs.html"
  },
  {
    "name": "MSB",
    "doc": "Multiply-subtract vectors (predicated), writing multiplicand [Zdn = Za - Zdn * Zm]",
    "file": "msb_z_p_zzz.html"
  },
  {
    "name": "MSRR",
    "doc": "Move two adjacent general-purpose registers to System Register allows the PE to write an AArch64 128-bit System register from two adjacent 64-bit general-purpose registers.",
    "file": "msrr.html"
  },
  {
    "name": "MSR",
    "doc": "Move immediate value to Special Register moves an immediate value to selected bits of the PSTATE. For more information, see Process state, PSTATE.",
    "file": "msr_imm.html"
  },
  {
    "name": "MSUB",
    "doc": "Multiply-Subtract multiplies two register values, subtracts the product from a third register value, and writes the result to the destination register.",
    "file": "msub.html"
  },
  {
    "name": "MUL",
    "doc": "Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "mul_advsimd_elt.html"
  },
  {
    "name": "MVNI",
    "doc": "Move inverted Immediate (vector). This instruction places the inverse of an immediate constant into every vector element of the destination SIMD&amp;FP register.",
    "file": "mvni_advsimd.html"
  },
  {
    "name": "MVN",
    "doc": "Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "mvn_not_advsimd.html"
  },
  {
    "name": "NANDS",
    "doc": "Bitwise NAND predicates, setting the condition flags",
    "file": "nands_p_p_pp.html"
  },
  {
    "name": "NAND",
    "doc": "Bitwise NAND predicates",
    "file": "nand_p_p_pp.html"
  },
  {
    "name": "NBSL",
    "doc": "Bitwise inverted select",
    "file": "nbsl_z_zzz.html"
  },
  {
    "name": "NEGS",
    "doc": "Negate, setting flags, negates an optionally-shifted register value, and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "negs_subs_addsub_shift.html"
  },
  {
    "name": "NEG",
    "doc": "Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "neg_advsimd.html"
  },
  {
    "name": "NGCS",
    "doc": "Negate with Carry, setting flags, negates the sum of a register value and the value of NOT (Carry flag), and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "ngcs_sbcs.html"
  },
  {
    "name": "NGC",
    "doc": "Negate with Carry negates the sum of a register value and the value of NOT (Carry flag), and writes the result to the destination register.",
    "file": "ngc_sbc.html"
  },
  {
    "name": "NMATCH",
    "doc": "Detect no matching elements, setting the condition flags",
    "file": "nmatch_p_p_zz.html"
  },
  {
    "name": "NOP",
    "doc": "No Operation does nothing, other than advance the value of the program counter by 4. This instruction can be used for instruction alignment purposes.",
    "file": "nop.html"
  },
  {
    "name": "NORS",
    "doc": "Bitwise NOR predicates, setting the condition flags",
    "file": "nors_p_p_pp.html"
  },
  {
    "name": "NOR",
    "doc": "Bitwise NOR predicates",
    "file": "nor_p_p_pp.html"
  },
  {
    "name": "NOTS",
    "doc": "Bitwise invert predicate, setting the condition flags",
    "file": "nots_eors_p_p_pp.html"
  },
  {
    "name": "NOT",
    "doc": "Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "not_advsimd.html"
  },
  {
    "name": "ORNS",
    "doc": "Bitwise inclusive OR inverted predicate, setting the condition flags",
    "file": "orns_p_p_pp.html"
  },
  {
    "name": "ORN",
    "doc": "Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.",
    "file": "orn_advsimd.html"
  },
  {
    "name": "ORQV",
    "doc": "Bitwise inclusive OR reduction of quadword vector segments",
    "file": "orqv_z_p_z.html"
  },
  {
    "name": "ORRS",
    "doc": "Bitwise inclusive OR predicates, setting the condition flags",
    "file": "orrs_p_p_pp.html"
  },
  {
    "name": "ORR",
    "doc": "Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "orr_advsimd_imm.html"
  },
  {
    "name": "ORV",
    "doc": "Bitwise inclusive OR reduction to scalar",
    "file": "orv_r_p_z.html"
  },
  {
    "name": "PACDA",
    "doc": "Pointer Authentication Code for Data address, using key A. This instruction computes and inserts a pointer authentication code for a data address, using a modifier and key A.",
    "file": "pacda.html"
  },
  {
    "name": "PACDZA",
    "doc": "Pointer Authentication Code for Data address, using key A. This instruction computes and inserts a pointer authentication code for a data address, using a modifier and key A.",
    "file": "pacda.html"
  },
  {
    "name": "PACDB",
    "doc": "Pointer Authentication Code for Data address, using key B. This instruction computes and inserts a pointer authentication code for a data address, using a modifier and key B.",
    "file": "pacdb.html"
  },
  {
    "name": "PACDZB",
    "doc": "Pointer Authentication Code for Data address, using key B. This instruction computes and inserts a pointer authentication code for a data address, using a modifier and key B.",
    "file": "pacdb.html"
  },
  {
    "name": "PACGA",
    "doc": "Pointer Authentication Code, using Generic key. This instruction computes the pointer authentication code for a 64-bit value in the first source register, using a modifier in the second source register, and the Generic key. The computed pointer authentication code is written to the most significant 32 bits of the destination register, and the least significant 32 bits of the destination register are set to zero.",
    "file": "pacga.html"
  },
  {
    "name": "PACIA",
    "doc": "Pointer Authentication Code for Instruction address, using key A. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key A.",
    "file": "pacia.html"
  },
  {
    "name": "PACIA1716",
    "doc": "Pointer Authentication Code for Instruction address, using key A. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key A.",
    "file": "pacia.html"
  },
  {
    "name": "PACIASP",
    "doc": "Pointer Authentication Code for Instruction address, using key A. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key A.",
    "file": "pacia.html"
  },
  {
    "name": "PACIAZ",
    "doc": "Pointer Authentication Code for Instruction address, using key A. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key A.",
    "file": "pacia.html"
  },
  {
    "name": "PACIZA",
    "doc": "Pointer Authentication Code for Instruction address, using key A. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key A.",
    "file": "pacia.html"
  },
  {
    "name": "PACIB",
    "doc": "Pointer Authentication Code for Instruction address, using key B. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key B.",
    "file": "pacib.html"
  },
  {
    "name": "PACIB1716",
    "doc": "Pointer Authentication Code for Instruction address, using key B. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key B.",
    "file": "pacib.html"
  },
  {
    "name": "PACIBSP",
    "doc": "Pointer Authentication Code for Instruction address, using key B. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key B.",
    "file": "pacib.html"
  },
  {
    "name": "PACIBZ",
    "doc": "Pointer Authentication Code for Instruction address, using key B. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key B.",
    "file": "pacib.html"
  },
  {
    "name": "PACIZB",
    "doc": "Pointer Authentication Code for Instruction address, using key B. This instruction computes and inserts a pointer authentication code for an instruction address, using a modifier and key B.",
    "file": "pacib.html"
  },
  {
    "name": "PEXT",
    "doc": "Set predicate from predicate-as-counter",
    "file": "pext_pn_rr.html"
  },
  {
    "name": "PFALSE",
    "doc": "Set all predicate elements to false",
    "file": "pfalse_p.html"
  },
  {
    "name": "PFIRST",
    "doc": "Set the first active predicate element to true",
    "file": "pfirst_p_p_p.html"
  },
  {
    "name": "PMOV",
    "doc": "Move predicate from vector",
    "file": "pmov_p_zi.html"
  },
  {
    "name": "PMULLB",
    "doc": "Polynomial multiply long (bottom)",
    "file": "pmullb_z_zz.html"
  },
  {
    "name": "PMULLT",
    "doc": "Polynomial multiply long (top)",
    "file": "pmullt_z_zz.html"
  },
  {
    "name": "PMULL",
    "doc": "Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&amp;FP registers, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "pmull_advsimd.html"
  },
  {
    "name": "PMULL2",
    "doc": "Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&amp;FP registers, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "pmull_advsimd.html"
  },
  {
    "name": "PMUL",
    "doc": "Polynomial Multiply. This instruction multiplies corresponding elements in the vectors of the two source SIMD&amp;FP registers, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "pmul_advsimd.html"
  },
  {
    "name": "PNEXT",
    "doc": "Find next active predicate",
    "file": "pnext_p_p_p.html"
  },
  {
    "name": "PRFB",
    "doc": "Gather prefetch bytes (vector plus immediate)",
    "file": "prfb_i_p_ai.html"
  },
  {
    "name": "PRFD",
    "doc": "Gather prefetch doublewords (vector plus immediate)",
    "file": "prfd_i_p_ai.html"
  },
  {
    "name": "PRFH",
    "doc": "Gather prefetch halfwords (vector plus immediate)",
    "file": "prfh_i_p_ai.html"
  },
  {
    "name": "PRFM",
    "doc": "Prefetch Memory (immediate) signals the memory system that data memory accesses from a specified address are likely to occur in the near future. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as preloading the cache line containing the specified address into one or more caches.",
    "file": "prfm_imm.html"
  },
  {
    "name": "PRFUM",
    "doc": "Prefetch Memory (unscaled offset) signals the memory system that data memory accesses from a specified address are likely to occur in the near future. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as preloading the cache line containing the specified address into one or more caches.",
    "file": "prfum.html"
  },
  {
    "name": "PRFW",
    "doc": "Gather prefetch words (vector plus immediate)",
    "file": "prfw_i_p_ai.html"
  },
  {
    "name": "PSB",
    "doc": "Profiling Synchronization Barrier. This instruction is a barrier that ensures that all existing profiling data for the current PE has been formatted, and profiling buffer addresses have been translated such that all writes to the profiling buffer have been initiated.  A following DSB instruction completes when the writes to the profiling buffer have completed.",
    "file": "psb.html"
  },
  {
    "name": "CSYNC",
    "doc": "Profiling Synchronization Barrier. This instruction is a barrier that ensures that all existing profiling data for the current PE has been formatted, and profiling buffer addresses have been translated such that all writes to the profiling buffer have been initiated.  A following DSB instruction completes when the writes to the profiling buffer have completed.",
    "file": "psb.html"
  },
  {
    "name": "PSEL",
    "doc": "Predicate select between predicate register or all-false",
    "file": "psel_p_ppi.html"
  },
  {
    "name": "PSSBB",
    "doc": "Physical Speculative Store Bypass Barrier is a memory barrier that prevents speculative loads from bypassing earlier stores to the same physical address under certain conditions. For more information and details of the semantics, see Physical Speculative Store Bypass Barrier (PSSBB).",
    "file": "pssbb_dsb.html"
  },
  {
    "name": "PTEST",
    "doc": "Set condition flags for predicate",
    "file": "ptest_p_p.html"
  },
  {
    "name": "PTRUES",
    "doc": "Initialise predicate from named constraint and set the condition flags",
    "file": "ptrues_p_s.html"
  },
  {
    "name": "PTRUE",
    "doc": "Initialise predicate-as-counter to all active",
    "file": "ptrue_pn_i.html"
  },
  {
    "name": "PUNPKHI",
    "doc": "Unpack and widen half of predicate",
    "file": "punpkhi_p_p.html"
  },
  {
    "name": "PUNPKLO",
    "doc": "Unpack and widen half of predicate",
    "file": "punpkhi_p_p.html"
  },
  {
    "name": "RADDHNB",
    "doc": "Rounding add narrow high part (bottom)",
    "file": "raddhnb_z_zz.html"
  },
  {
    "name": "RADDHNT",
    "doc": "Rounding add narrow high part (top)",
    "file": "raddhnt_z_zz.html"
  },
  {
    "name": "RADDHN",
    "doc": "Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "raddhn_advsimd.html"
  },
  {
    "name": "RADDHN2",
    "doc": "Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "raddhn_advsimd.html"
  },
  {
    "name": "RAX1",
    "doc": "Rotate and Exclusive-OR rotates each 64-bit element of the 128-bit vector in a source SIMD&amp;FP register left by 1, performs a bitwise exclusive-OR of the resulting 128-bit vector and the vector in another source SIMD&amp;FP register, and writes the result to the destination SIMD&amp;FP register.",
    "file": "rax1_advsimd.html"
  },
  {
    "name": "RBIT",
    "doc": "Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&amp;FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "rbit_advsimd.html"
  },
  {
    "name": "RCWCAS",
    "doc": "Read Check Write Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcas.html"
  },
  {
    "name": "RCWCASA",
    "doc": "Read Check Write Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcas.html"
  },
  {
    "name": "RCWCASL",
    "doc": "Read Check Write Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcas.html"
  },
  {
    "name": "RCWCASAL",
    "doc": "Read Check Write Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcas.html"
  },
  {
    "name": "RCWCASP",
    "doc": "Read Check Write Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcasp.html"
  },
  {
    "name": "RCWCASPA",
    "doc": "Read Check Write Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcasp.html"
  },
  {
    "name": "RCWCASPL",
    "doc": "Read Check Write Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcasp.html"
  },
  {
    "name": "RCWCASPAL",
    "doc": "Read Check Write Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwcasp.html"
  },
  {
    "name": "RCWCLR",
    "doc": "Read Check Write atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclr.html"
  },
  {
    "name": "RCWCLRA",
    "doc": "Read Check Write atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclr.html"
  },
  {
    "name": "RCWCLRL",
    "doc": "Read Check Write atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclr.html"
  },
  {
    "name": "RCWCLRAL",
    "doc": "Read Check Write atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclr.html"
  },
  {
    "name": "RCWCLRP",
    "doc": "Read Check Write atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclrp.html"
  },
  {
    "name": "RCWCLRPA",
    "doc": "Read Check Write atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclrp.html"
  },
  {
    "name": "RCWCLRPL",
    "doc": "Read Check Write atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclrp.html"
  },
  {
    "name": "RCWCLRPAL",
    "doc": "Read Check Write atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwclrp.html"
  },
  {
    "name": "RCWSCAS",
    "doc": "Read Check Write Software Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscas.html"
  },
  {
    "name": "RCWSCASA",
    "doc": "Read Check Write Software Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscas.html"
  },
  {
    "name": "RCWSCASL",
    "doc": "Read Check Write Software Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscas.html"
  },
  {
    "name": "RCWSCASAL",
    "doc": "Read Check Write Software Compare and Swap doubleword in memory reads a 64-bit doubleword from memory, and compares it against the value held in a register. If the comparison is equal, the value in a second register is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscas.html"
  },
  {
    "name": "RCWSCASP",
    "doc": "Read Check Write Software Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscasp.html"
  },
  {
    "name": "RCWSCASPA",
    "doc": "Read Check Write Software Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscasp.html"
  },
  {
    "name": "RCWSCASPL",
    "doc": "Read Check Write Software Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscasp.html"
  },
  {
    "name": "RCWSCASPAL",
    "doc": "Read Check Write Software Compare and Swap quadword in memory reads a 128-bit quadword from memory, and compares it against the value held in a pair of registers. If the comparison is equal, the value in a second pair of registers is conditionally written to memory. Storing back to memory is conditional on RCW Checks and RCWS Checks. If the write is performed, the read and the write occur atomically such that no other modification of the memory location can take place between the read and the write. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwscasp.html"
  },
  {
    "name": "RCWSCLR",
    "doc": "Read Check Write Software atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclr.html"
  },
  {
    "name": "RCWSCLRA",
    "doc": "Read Check Write Software atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclr.html"
  },
  {
    "name": "RCWSCLRL",
    "doc": "Read Check Write Software atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclr.html"
  },
  {
    "name": "RCWSCLRAL",
    "doc": "Read Check Write Software atomic bit Clear on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclr.html"
  },
  {
    "name": "RCWSCLRP",
    "doc": "Read Check Write Software atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclrp.html"
  },
  {
    "name": "RCWSCLRPA",
    "doc": "Read Check Write Software atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclrp.html"
  },
  {
    "name": "RCWSCLRPL",
    "doc": "Read Check Write Software atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclrp.html"
  },
  {
    "name": "RCWSCLRPAL",
    "doc": "Read Check Write Software atomic bit Clear on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise AND with the complement of the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsclrp.html"
  },
  {
    "name": "RCWSET",
    "doc": "Read Check Write atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwset.html"
  },
  {
    "name": "RCWSETA",
    "doc": "Read Check Write atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwset.html"
  },
  {
    "name": "RCWSETL",
    "doc": "Read Check Write atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwset.html"
  },
  {
    "name": "RCWSETAL",
    "doc": "Read Check Write atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwset.html"
  },
  {
    "name": "RCWSETP",
    "doc": "Read Check Write atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsetp.html"
  },
  {
    "name": "RCWSETPA",
    "doc": "Read Check Write atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsetp.html"
  },
  {
    "name": "RCWSETPL",
    "doc": "Read Check Write atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsetp.html"
  },
  {
    "name": "RCWSETPAL",
    "doc": "Read Check Write atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsetp.html"
  },
  {
    "name": "RCWSSET",
    "doc": "Read Check Write Software atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsset.html"
  },
  {
    "name": "RCWSSETA",
    "doc": "Read Check Write Software atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsset.html"
  },
  {
    "name": "RCWSSETL",
    "doc": "Read Check Write Software atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsset.html"
  },
  {
    "name": "RCWSSETAL",
    "doc": "Read Check Write Software atomic bit Set on doubleword in memory atomically loads a 64-bit doubleword from memory, performs a bitwise OR with the complement of the value held in a register on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsset.html"
  },
  {
    "name": "RCWSSETP",
    "doc": "Read Check Write Software atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwssetp.html"
  },
  {
    "name": "RCWSSETPA",
    "doc": "Read Check Write Software atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwssetp.html"
  },
  {
    "name": "RCWSSETPL",
    "doc": "Read Check Write Software atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwssetp.html"
  },
  {
    "name": "RCWSSETPAL",
    "doc": "Read Check Write Software atomic bit Set on quadword in memory atomically loads a 128-bit quadword from memory, performs a bitwise OR with the value held in a pair of registers on it, and conditionally stores the result back to memory. Storing of the result back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwssetp.html"
  },
  {
    "name": "RCWSSWP",
    "doc": "Read Check Write Software Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswp.html"
  },
  {
    "name": "RCWSSWPA",
    "doc": "Read Check Write Software Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswp.html"
  },
  {
    "name": "RCWSSWPL",
    "doc": "Read Check Write Software Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswp.html"
  },
  {
    "name": "RCWSSWPAL",
    "doc": "Read Check Write Software Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswp.html"
  },
  {
    "name": "RCWSSWPP",
    "doc": "Read Check Write Software Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswpp.html"
  },
  {
    "name": "RCWSSWPPA",
    "doc": "Read Check Write Software Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswpp.html"
  },
  {
    "name": "RCWSSWPPL",
    "doc": "Read Check Write Software Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswpp.html"
  },
  {
    "name": "RCWSSWPPAL",
    "doc": "Read Check Write Software Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks and RCWS Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwsswpp.html"
  },
  {
    "name": "RCWSWP",
    "doc": "Read Check Write Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswp.html"
  },
  {
    "name": "RCWSWPA",
    "doc": "Read Check Write Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswp.html"
  },
  {
    "name": "RCWSWPL",
    "doc": "Read Check Write Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswp.html"
  },
  {
    "name": "RCWSWPAL",
    "doc": "Read Check Write Swap doubleword in memory atomically loads a 64-bit doubleword from a memory location, and conditionally stores the value held in a register back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the destination register. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswp.html"
  },
  {
    "name": "RCWSWPP",
    "doc": "Read Check Write Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswpp.html"
  },
  {
    "name": "RCWSWPPA",
    "doc": "Read Check Write Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswpp.html"
  },
  {
    "name": "RCWSWPPL",
    "doc": "Read Check Write Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswpp.html"
  },
  {
    "name": "RCWSWPPAL",
    "doc": "Read Check Write Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and conditionally stores the value held in a pair of registers back to the same memory location. Storing back to memory is conditional on RCW Checks. The value initially loaded from memory is returned in the same pair of registers. This instruction updates the condition flags based on the result of the update of memory.",
    "file": "rcwswpp.html"
  },
  {
    "name": "RDFFRS",
    "doc": "Return predicate of succesfully loaded elements, setting the condition flags",
    "file": "rdffrs_p_p_f.html"
  },
  {
    "name": "RDFFR",
    "doc": "Read the first-fault register",
    "file": "rdffr_p_f.html"
  },
  {
    "name": "RDSVL",
    "doc": "Read multiple of Streaming SVE vector register size to scalar register",
    "file": "rdsvl_r_i.html"
  },
  {
    "name": "RDVL",
    "doc": "Read multiple of vector register size to scalar register",
    "file": "rdvl_r_i.html"
  },
  {
    "name": "RET",
    "doc": "Return from subroutine branches unconditionally to an address in a register, with a hint that this is a subroutine return.",
    "file": "ret.html"
  },
  {
    "name": "RETAA",
    "doc": "Return from subroutine, with pointer authentication. This instruction authenticates the address that is held in LR, using SP as the modifier and the specified key, branches to the authenticated address, with a hint that this instruction is a subroutine return.",
    "file": "reta.html"
  },
  {
    "name": "RETAB",
    "doc": "Return from subroutine, with pointer authentication. This instruction authenticates the address that is held in LR, using SP as the modifier and the specified key, branches to the authenticated address, with a hint that this instruction is a subroutine return.",
    "file": "reta.html"
  },
  {
    "name": "REV",
    "doc": "Reverse Bytes reverses the byte order in a register.",
    "file": "rev.html"
  },
  {
    "name": "REV16",
    "doc": "Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "rev16_advsimd.html"
  },
  {
    "name": "REV32",
    "doc": "Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "rev32_advsimd.html"
  },
  {
    "name": "REV64",
    "doc": "Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "rev64_advsimd.html"
  },
  {
    "name": "REVB",
    "doc": "Reverse bytes / halfwords / words within elements (predicated)",
    "file": "revb_z_z.html"
  },
  {
    "name": "REVH",
    "doc": "Reverse bytes / halfwords / words within elements (predicated)",
    "file": "revb_z_z.html"
  },
  {
    "name": "REVW",
    "doc": "Reverse bytes / halfwords / words within elements (predicated)",
    "file": "revb_z_z.html"
  },
  {
    "name": "REVD",
    "doc": "Reverse 64-bit doublewords in elements (predicated)",
    "file": "revd_z_p_z.html"
  },
  {
    "name": "RMIF",
    "doc": "Performs a rotation right of a value held in a general purpose register by an immediate value, and then inserts a selection of the bottom four bits of the result of the rotation into the PSTATE flags, under the control of a second immediate mask.",
    "file": "rmif.html"
  },
  {
    "name": "RORV",
    "doc": "Rotate Right Variable provides the value of the contents of a register rotated by a variable number of bits. The bits that are rotated off the right end are inserted into the vacated bit positions on the left. The remainder obtained by dividing the second source register by the data size defines the number of bits by which the first source register is right-shifted.",
    "file": "rorv.html"
  },
  {
    "name": "ROR",
    "doc": "Rotate right (immediate) provides the value of the contents of a register rotated by a variable number of bits. The bits that are rotated off the right end are inserted into the vacated bit positions on the left.",
    "file": "ror_extr.html"
  },
  {
    "name": "RPRFM",
    "doc": "Range Prefetch Memory signals the memory system that data memory accesses from a specified range of addresses are likely to occur in the near future. The instruction may also signal the memory system about the likelihood of data reuse of the specified range of addresses. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as prefetching locations within the specified address ranges into one or more caches. The memory system may also exploit the data reuse hints to decide whether to retain the data in other caches upon eviction from the innermost caches or to discard it.",
    "file": "rprfm_reg.html"
  },
  {
    "name": "RSHRNB",
    "doc": "Rounding shift right narrow by immediate (bottom)",
    "file": "rshrnb_z_zi.html"
  },
  {
    "name": "RSHRNT",
    "doc": "Rounding shift right narrow by immediate (top)",
    "file": "rshrnt_z_zi.html"
  },
  {
    "name": "RSHRN",
    "doc": "Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.",
    "file": "rshrn_advsimd.html"
  },
  {
    "name": "RSHRN2",
    "doc": "Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.",
    "file": "rshrn_advsimd.html"
  },
  {
    "name": "RSUBHNB",
    "doc": "Rounding subtract narrow high part (bottom)",
    "file": "rsubhnb_z_zz.html"
  },
  {
    "name": "RSUBHNT",
    "doc": "Rounding subtract narrow high part (top)",
    "file": "rsubhnt_z_zz.html"
  },
  {
    "name": "RSUBHN",
    "doc": "Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "rsubhn_advsimd.html"
  },
  {
    "name": "RSUBHN2",
    "doc": "Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.",
    "file": "rsubhn_advsimd.html"
  },
  {
    "name": "SABALB",
    "doc": "Signed absolute difference and accumulate long (bottom)",
    "file": "sabalb_z_zzz.html"
  },
  {
    "name": "SABALT",
    "doc": "Signed absolute difference and accumulate long (top)",
    "file": "sabalt_z_zzz.html"
  },
  {
    "name": "SABAL",
    "doc": "Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "sabal_advsimd.html"
  },
  {
    "name": "SABAL2",
    "doc": "Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "sabal_advsimd.html"
  },
  {
    "name": "SABA",
    "doc": "Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.",
    "file": "saba_advsimd.html"
  },
  {
    "name": "SABDLB",
    "doc": "Signed absolute difference long (bottom)",
    "file": "sabdlb_z_zz.html"
  },
  {
    "name": "SABDLT",
    "doc": "Signed absolute difference long (top)",
    "file": "sabdlt_z_zz.html"
  },
  {
    "name": "SABDL",
    "doc": "Signed Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "sabdl_advsimd.html"
  },
  {
    "name": "SABDL2",
    "doc": "Signed Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "sabdl_advsimd.html"
  },
  {
    "name": "SABD",
    "doc": "Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sabd_advsimd.html"
  },
  {
    "name": "SADALP",
    "doc": "Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "sadalp_advsimd.html"
  },
  {
    "name": "SADDLBT",
    "doc": "Signed add long (bottom + top)",
    "file": "saddlbt_z_zz.html"
  },
  {
    "name": "SADDLB",
    "doc": "Signed add long (bottom)",
    "file": "saddlb_z_zz.html"
  },
  {
    "name": "SADDLP",
    "doc": "Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "saddlp_advsimd.html"
  },
  {
    "name": "SADDLT",
    "doc": "Signed add long (top)",
    "file": "saddlt_z_zz.html"
  },
  {
    "name": "SADDLV",
    "doc": "Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "saddlv_advsimd.html"
  },
  {
    "name": "SADDL",
    "doc": "Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "saddl_advsimd.html"
  },
  {
    "name": "SADDL2",
    "doc": "Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "saddl_advsimd.html"
  },
  {
    "name": "SADDV",
    "doc": "Signed add reduction to scalar",
    "file": "saddv_r_p_z.html"
  },
  {
    "name": "SADDWB",
    "doc": "Signed add wide (bottom)",
    "file": "saddwb_z_zz.html"
  },
  {
    "name": "SADDWT",
    "doc": "Signed add wide (top)",
    "file": "saddwt_z_zz.html"
  },
  {
    "name": "SADDW",
    "doc": "Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.",
    "file": "saddw_advsimd.html"
  },
  {
    "name": "SADDW2",
    "doc": "Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.",
    "file": "saddw_advsimd.html"
  },
  {
    "name": "SB",
    "doc": "Speculation Barrier is a barrier that controls speculation.",
    "file": "sb.html"
  },
  {
    "name": "SBC",
    "doc": "Subtract with Carry subtracts a register value and the value of NOT (Carry flag) from a register value, and writes the result to the destination register.",
    "file": "sbc.html"
  },
  {
    "name": "SBCLB",
    "doc": "Subtract with carry long (bottom)",
    "file": "sbclb_z_zzz.html"
  },
  {
    "name": "SBCLT",
    "doc": "Subtract with carry long (top)",
    "file": "sbclt_z_zzz.html"
  },
  {
    "name": "SBCS",
    "doc": "Subtract with Carry, setting flags, subtracts a register value and the value of NOT (Carry flag) from a register value, and writes the result to the destination register. It updates the condition flags based on the result.",
    "file": "sbcs.html"
  },
  {
    "name": "SBFIZ",
    "doc": "Signed Bitfield Insert in Zeros copies a bitfield of &lt;width&gt; bits from the least significant bits of the source register to bit position &lt;lsb&gt; of the destination register, setting the destination bits below the bitfield to zero, and the bits above the bitfield to a copy of the most significant bit of the bitfield.",
    "file": "sbfiz_sbfm.html"
  },
  {
    "name": "SBFM",
    "doc": "Signed Bitfield Move is usually accessed via one of its aliases, which are always preferred for disassembly.",
    "file": "sbfm.html"
  },
  {
    "name": "SBFX",
    "doc": "Signed Bitfield Extract copies a bitfield of &lt;width&gt; bits starting from bit position &lt;lsb&gt; in the source register to the least significant bits of the destination register, and sets destination bits above the bitfield to a copy of the most significant bit of the bitfield.",
    "file": "sbfx_sbfm.html"
  },
  {
    "name": "SCLAMP",
    "doc": "Multi-vector signed clamp to minimum/maximum vector",
    "file": "sclamp_mz_zz.html"
  },
  {
    "name": "SCVTF",
    "doc": "Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "scvtf_advsimd_fix.html"
  },
  {
    "name": "SDIV",
    "doc": "Signed Divide divides a signed integer register value by another signed integer register value, and writes the result to the destination register. The condition flags are not affected.",
    "file": "sdiv.html"
  },
  {
    "name": "SDIVR",
    "doc": "Signed reversed divide (predicated)",
    "file": "sdivr_z_p_zz.html"
  },
  {
    "name": "SDOT",
    "doc": "Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "sdot_advsimd_elt.html"
  },
  {
    "name": "2",
    "doc": "Signed integer dot product",
    "file": "sdot_z32_zzz.html"
  },
  {
    "name": "4",
    "doc": "Multi-vector signed integer dot-product by indexed element",
    "file": "sdot_za_zzi.html"
  },
  {
    "name": "SEL",
    "doc": "Multi-vector conditionally select elements from two vectors",
    "file": "sel_mz_p_zz.html"
  },
  {
    "name": "SETF8",
    "doc": "Set the PSTATE.NZV flags based on the value in the specified general-purpose register. SETF8 treats the value as an 8 bit value, and SETF16 treats the value as an 16 bit value.",
    "file": "setf.html"
  },
  {
    "name": "SETF16",
    "doc": "Set the PSTATE.NZV flags based on the value in the specified general-purpose register. SETF8 treats the value as an 8 bit value, and SETF16 treats the value as an 16 bit value.",
    "file": "setf.html"
  },
  {
    "name": "SETFFR",
    "doc": "Initialise the first-fault register to all true",
    "file": "setffr_f.html"
  },
  {
    "name": "SETGP",
    "doc": "Memory Set with tag setting. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGP, then SETGM, and then SETGE.",
    "file": "setgp.html"
  },
  {
    "name": "SETGM",
    "doc": "Memory Set with tag setting. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGP, then SETGM, and then SETGE.",
    "file": "setgp.html"
  },
  {
    "name": "SETGE",
    "doc": "Memory Set with tag setting. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGP, then SETGM, and then SETGE.",
    "file": "setgp.html"
  },
  {
    "name": "SETGPN",
    "doc": "Memory Set with tag setting, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPN, then SETGMN, and then SETGEN.",
    "file": "setgpn.html"
  },
  {
    "name": "SETGMN",
    "doc": "Memory Set with tag setting, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPN, then SETGMN, and then SETGEN.",
    "file": "setgpn.html"
  },
  {
    "name": "SETGEN",
    "doc": "Memory Set with tag setting, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPN, then SETGMN, and then SETGEN.",
    "file": "setgpn.html"
  },
  {
    "name": "SETGPT",
    "doc": "Memory Set with tag setting, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPT, then SETGMT, and then SETGET.",
    "file": "setgpt.html"
  },
  {
    "name": "SETGMT",
    "doc": "Memory Set with tag setting, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPT, then SETGMT, and then SETGET.",
    "file": "setgpt.html"
  },
  {
    "name": "SETGET",
    "doc": "Memory Set with tag setting, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPT, then SETGMT, and then SETGET.",
    "file": "setgpt.html"
  },
  {
    "name": "SETGPTN",
    "doc": "Memory Set with tag setting, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPTN, then SETGMTN, and then SETGETN.",
    "file": "setgptn.html"
  },
  {
    "name": "SETGMTN",
    "doc": "Memory Set with tag setting, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPTN, then SETGMTN, and then SETGETN.",
    "file": "setgptn.html"
  },
  {
    "name": "SETGETN",
    "doc": "Memory Set with tag setting, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register and store an Allocation Tag to memory for each Tag Granule written. The Allocation Tag is calculated from the Logical Address Tag in the register which holds the first address that the set is made to. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETGPTN, then SETGMTN, and then SETGETN.",
    "file": "setgptn.html"
  },
  {
    "name": "SETP",
    "doc": "Memory Set. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETP, then SETM, and then SETE.",
    "file": "setp.html"
  },
  {
    "name": "SETM",
    "doc": "Memory Set. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETP, then SETM, and then SETE.",
    "file": "setp.html"
  },
  {
    "name": "SETE",
    "doc": "Memory Set. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETP, then SETM, and then SETE.",
    "file": "setp.html"
  },
  {
    "name": "SETPN",
    "doc": "Memory Set, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPN, then SETMN, and then SETEN.",
    "file": "setpn.html"
  },
  {
    "name": "SETMN",
    "doc": "Memory Set, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPN, then SETMN, and then SETEN.",
    "file": "setpn.html"
  },
  {
    "name": "SETEN",
    "doc": "Memory Set, non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPN, then SETMN, and then SETEN.",
    "file": "setpn.html"
  },
  {
    "name": "SETPT",
    "doc": "Memory Set, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPT, then SETMT, and then SETET.",
    "file": "setpt.html"
  },
  {
    "name": "SETMT",
    "doc": "Memory Set, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPT, then SETMT, and then SETET.",
    "file": "setpt.html"
  },
  {
    "name": "SETET",
    "doc": "Memory Set, unprivileged. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPT, then SETMT, and then SETET.",
    "file": "setpt.html"
  },
  {
    "name": "SETPTN",
    "doc": "Memory Set, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPTN, then SETMTN, and then SETETN.",
    "file": "setptn.html"
  },
  {
    "name": "SETMTN",
    "doc": "Memory Set, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPTN, then SETMTN, and then SETETN.",
    "file": "setptn.html"
  },
  {
    "name": "SETETN",
    "doc": "Memory Set, unprivileged and non-temporal. These instructions perform a memory set using the value in the bottom byte of the source register. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: SETPTN, then SETMTN, and then SETETN.",
    "file": "setptn.html"
  },
  {
    "name": "SEV",
    "doc": "Send Event is a hint instruction. It causes an event to be signaled to all PEs in the multiprocessor system. For more information, see Wait for Event mechanism and Send event.",
    "file": "sev.html"
  },
  {
    "name": "SEVL",
    "doc": "Send Event Local is a hint instruction that causes an event to be signaled locally without requiring the event to be signaled to other PEs in the multiprocessor system. It can prime a wait-loop which starts with a WFE instruction.",
    "file": "sevl.html"
  },
  {
    "name": "SHA1C",
    "doc": "SHA1 hash update (choose).",
    "file": "sha1c_advsimd.html"
  },
  {
    "name": "SHA1H",
    "doc": "SHA1 fixed rotate.",
    "file": "sha1h_advsimd.html"
  },
  {
    "name": "SHA1M",
    "doc": "SHA1 hash update (majority).",
    "file": "sha1m_advsimd.html"
  },
  {
    "name": "SHA1P",
    "doc": "SHA1 hash update (parity).",
    "file": "sha1p_advsimd.html"
  },
  {
    "name": "SHA1SU0",
    "doc": "SHA1 schedule update 0.",
    "file": "sha1su0_advsimd.html"
  },
  {
    "name": "SHA1SU1",
    "doc": "SHA1 schedule update 1.",
    "file": "sha1su1_advsimd.html"
  },
  {
    "name": "SHA256H2",
    "doc": "SHA256 hash update (part 2).",
    "file": "sha256h2_advsimd.html"
  },
  {
    "name": "SHA256H",
    "doc": "SHA256 hash update (part 1).",
    "file": "sha256h_advsimd.html"
  },
  {
    "name": "SHA256SU0",
    "doc": "SHA256 schedule update 0.",
    "file": "sha256su0_advsimd.html"
  },
  {
    "name": "SHA256SU1",
    "doc": "SHA256 schedule update 1.",
    "file": "sha256su1_advsimd.html"
  },
  {
    "name": "SHA512H2",
    "doc": "SHA512 Hash update part 2 takes the values from the three 128-bit source SIMD&amp;FP registers and produces a 128-bit output value that combines the sigma0 and majority functions of two iterations of the SHA512 computation. It returns this value to the destination SIMD&amp;FP register.",
    "file": "sha512h2_advsimd.html"
  },
  {
    "name": "SHA512H",
    "doc": "SHA512 Hash update part 1 takes the values from the three 128-bit source SIMD&amp;FP registers and produces a 128-bit output value that combines the sigma1 and chi functions of two iterations of the SHA512 computation. It returns this value to the destination SIMD&amp;FP register.",
    "file": "sha512h_advsimd.html"
  },
  {
    "name": "SHA512SU0",
    "doc": "SHA512 Schedule Update 0 takes the values from the two 128-bit source SIMD&amp;FP registers and produces a 128-bit output value that combines the gamma0 functions of two iterations of the SHA512 schedule update that are performed after the first 16 iterations within a block. It returns this value to the destination SIMD&amp;FP register.",
    "file": "sha512su0_advsimd.html"
  },
  {
    "name": "SHA512SU1",
    "doc": "SHA512 Schedule Update 1 takes the values from the three source SIMD&amp;FP registers and produces a 128-bit output value that combines the gamma1 functions of two iterations of the SHA512 schedule update that are performed after the first 16 iterations within a block. It returns this value to the destination SIMD&amp;FP register.",
    "file": "sha512su1_advsimd.html"
  },
  {
    "name": "SHADD",
    "doc": "Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "shadd_advsimd.html"
  },
  {
    "name": "S",
    "doc": "This page displays common pseudocode functions shared by many pages",
    "file": "shared_pseudocode.html"
  },
  {
    "name": "SHLL",
    "doc": "Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "shll_advsimd.html"
  },
  {
    "name": "SHLL2",
    "doc": "Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "shll_advsimd.html"
  },
  {
    "name": "SHL",
    "doc": "Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "shl_advsimd.html"
  },
  {
    "name": "SHRNB",
    "doc": "Shift right narrow by immediate (bottom)",
    "file": "shrnb_z_zi.html"
  },
  {
    "name": "SHRNT",
    "doc": "Shift right narrow by immediate (top)",
    "file": "shrnt_z_zi.html"
  },
  {
    "name": "SHRN",
    "doc": "Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.",
    "file": "shrn_advsimd.html"
  },
  {
    "name": "SHRN2",
    "doc": "Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.",
    "file": "shrn_advsimd.html"
  },
  {
    "name": "SHSUBR",
    "doc": "Signed halving subtract reversed vectors",
    "file": "shsubr_z_p_zz.html"
  },
  {
    "name": "SHSUB",
    "doc": "Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "shsub_advsimd.html"
  },
  {
    "name": "SLI",
    "doc": "Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.",
    "file": "sli_advsimd.html"
  },
  {
    "name": "SM3PARTW1",
    "doc": "SM3PARTW1 takes three 128-bit vectors from the three source SIMD&amp;FP registers and returns a 128-bit result in the destination SIMD&amp;FP register. The result is obtained by a three-way exclusive-OR of the elements within the input vectors with some fixed rotations, see the Operation pseudocode for more information.",
    "file": "sm3partw1_advsimd.html"
  },
  {
    "name": "SM3PARTW2",
    "doc": "SM3PARTW2 takes three 128-bit vectors from three source SIMD&amp;FP registers and returns a 128-bit result in the destination SIMD&amp;FP register. The result is obtained by a three-way exclusive-OR of the elements within the input vectors with some fixed rotations, see the Operation pseudocode for more information.",
    "file": "sm3partw2_advsimd.html"
  },
  {
    "name": "SM3SS1",
    "doc": "SM3SS1 rotates the top 32 bits of the 128-bit vector in the first source SIMD&amp;FP register by 12, and adds that 32-bit value to the two other 32-bit values held in the top 32 bits of each of the 128-bit vectors in the second and third source SIMD&amp;FP registers, rotating this result left by 7 and writing the final result into the top 32 bits of the vector in the destination SIMD&amp;FP register, with the bottom 96 bits of the vector being written to 0.",
    "file": "sm3ss1_advsimd.html"
  },
  {
    "name": "SM3TT1A",
    "doc": "SM3TT1A takes three 128-bit vectors from three source SIMD&amp;FP registers and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&amp;FP register.  It performs a three-way exclusive-OR of the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
    "file": "sm3tt1a_advsimd.html"
  },
  {
    "name": "SM3TT1B",
    "doc": "SM3TT1B takes three 128-bit vectors from three source SIMD&amp;FP registers and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&amp;FP register. It performs a 32-bit majority function between the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
    "file": "sm3tt1b_advsimd.html"
  },
  {
    "name": "SM3TT2A",
    "doc": "SM3TT2A takes three 128-bit vectors from three source SIMD&amp;FP register and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&amp;FP register. It performs a three-way exclusive-OR of the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
    "file": "sm3tt2a_advsimd.html"
  },
  {
    "name": "SM3TT2B",
    "doc": "SM3TT2B takes three 128-bit vectors from three source SIMD&amp;FP registers, and a 2-bit immediate index value, and returns a 128-bit result in the destination SIMD&amp;FP register. It performs a 32-bit majority function between the three 32-bit fields held in the upper three elements of the first source vector, and adds the resulting 32-bit value and the following three other 32-bit values:",
    "file": "sm3tt2b_advsimd.html"
  },
  {
    "name": "SM4EKEY",
    "doc": "SM4 Key takes an input as a 128-bit vector from the first source SIMD&amp;FP register and a 128-bit constant from the second SIMD&amp;FP register. It derives four iterations of the output key, in accordance with the SM4 standard, returning the 128-bit result to the destination SIMD&amp;FP register.",
    "file": "sm4ekey_advsimd.html"
  },
  {
    "name": "SM4E",
    "doc": "SM4 Encode takes input data as a 128-bit vector from the first source SIMD&amp;FP register, and four iterations of the round key held as the elements of the 128-bit vector in the second source SIMD&amp;FP register. It encrypts the data by four rounds, in accordance with the SM4 standard, returning the 128-bit result to the destination SIMD&amp;FP register.",
    "file": "sm4e_advsimd.html"
  },
  {
    "name": "SMADDL",
    "doc": "Signed Multiply-Add Long multiplies two 32-bit register values, adds a 64-bit register value, and writes the result to the 64-bit destination register.",
    "file": "smaddl.html"
  },
  {
    "name": "SMAXP",
    "doc": "Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "smaxp_advsimd.html"
  },
  {
    "name": "SMAXQV",
    "doc": "Signed maximum reduction of quadword vector segments",
    "file": "smaxqv_z_p_z.html"
  },
  {
    "name": "SMAXV",
    "doc": "Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "smaxv_advsimd.html"
  },
  {
    "name": "SMAX",
    "doc": "Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "smax_advsimd.html"
  },
  {
    "name": "SMC",
    "doc": "Secure Monitor Call causes an exception to EL3.",
    "file": "smc.html"
  },
  {
    "name": "SMINP",
    "doc": "Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sminp_advsimd.html"
  },
  {
    "name": "SMINQV",
    "doc": "Signed minimum reduction of quadword vector segments",
    "file": "sminqv_z_p_z.html"
  },
  {
    "name": "SMINV",
    "doc": "Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "sminv_advsimd.html"
  },
  {
    "name": "SMIN",
    "doc": "Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "smin_advsimd.html"
  },
  {
    "name": "SMLALB",
    "doc": "Signed multiply-add long to accumulator (bottom)",
    "file": "smlalb_z_zzz.html"
  },
  {
    "name": "SMLALL",
    "doc": "Multi-vector signed integer multiply-add long-long by indexed element",
    "file": "smlall_za_zzi.html"
  },
  {
    "name": "SMLALT",
    "doc": "Signed multiply-add long to accumulator (top)",
    "file": "smlalt_z_zzz.html"
  },
  {
    "name": "SMLAL",
    "doc": "Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.",
    "file": "smlal_advsimd_elt.html"
  },
  {
    "name": "SMLAL2",
    "doc": "Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.",
    "file": "smlal_advsimd_elt.html"
  },
  {
    "name": "SMLSLB",
    "doc": "Signed multiply-subtract long from accumulator (bottom)",
    "file": "smlslb_z_zzz.html"
  },
  {
    "name": "SMLSLL",
    "doc": "Multi-vector signed integer multiply-subtract long-long by indexed element",
    "file": "smlsll_za_zzi.html"
  },
  {
    "name": "SMLSLT",
    "doc": "Signed multiply-subtract long from accumulator (top)",
    "file": "smlslt_z_zzz.html"
  },
  {
    "name": "SMLSL",
    "doc": "Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "smlsl_advsimd_elt.html"
  },
  {
    "name": "SMLSL2",
    "doc": "Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "smlsl_advsimd_elt.html"
  },
  {
    "name": "SMMLA",
    "doc": "Signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of signed 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "smmla_advsimd_vec.html"
  },
  {
    "name": "SMNEGL",
    "doc": "Signed Multiply-Negate Long multiplies two 32-bit register values, negates the product, and writes the result to the 64-bit destination register.",
    "file": "smnegl_smsubl.html"
  },
  {
    "name": "SMOPA",
    "doc": "Signed integer sum of outer products and accumulate",
    "file": "smopa_za32_pp_zz.html"
  },
  {
    "name": "SMOPS",
    "doc": "Signed integer sum of outer products and subtract",
    "file": "smops_za32_pp_zz.html"
  },
  {
    "name": "SMOV",
    "doc": "Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.",
    "file": "smov_advsimd.html"
  },
  {
    "name": "SMSTART",
    "doc": "Enables access to Streaming SVE mode and SME architectural state.",
    "file": "smstart_msr_imm.html"
  },
  {
    "name": "SMSTOP",
    "doc": "Disables access to Streaming SVE mode and SME architectural state.",
    "file": "smstop_msr_imm.html"
  },
  {
    "name": "SMSUBL",
    "doc": "Signed Multiply-Subtract Long multiplies two 32-bit register values, subtracts the product from a 64-bit register value, and writes the result to the 64-bit destination register.",
    "file": "smsubl.html"
  },
  {
    "name": "SMULH",
    "doc": "Signed Multiply High multiplies two 64-bit register values, and writes bits[127:64] of the 128-bit result to the 64-bit destination register.",
    "file": "smulh.html"
  },
  {
    "name": "SMULLB",
    "doc": "Signed multiply long (bottom)",
    "file": "smullb_z_zz.html"
  },
  {
    "name": "SMULLT",
    "doc": "Signed multiply long (top)",
    "file": "smullt_z_zz.html"
  },
  {
    "name": "SMULL",
    "doc": "Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "smull_advsimd_elt.html"
  },
  {
    "name": "SMULL2",
    "doc": "Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "smull_advsimd_elt.html"
  },
  {
    "name": "SPLICE",
    "doc": "Splice two vectors under predicate control",
    "file": "splice_z_p_zz.html"
  },
  {
    "name": "SQABS",
    "doc": "Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "sqabs_advsimd.html"
  },
  {
    "name": "SQADD",
    "doc": "Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sqadd_advsimd.html"
  },
  {
    "name": "SQCADD",
    "doc": "Saturating complex integer add with rotate",
    "file": "sqcadd_z_zz.html"
  },
  {
    "name": "SQCVTN",
    "doc": "Signed saturating extract narrow and interleave",
    "file": "sqcvtn_z_mz2.html"
  },
  {
    "name": "SQCVTUN",
    "doc": "Signed saturating unsigned extract narrow and interleave",
    "file": "sqcvtun_z_mz2.html"
  },
  {
    "name": "SQCVTU",
    "doc": "Multi-vector signed saturating unsigned extract narrow",
    "file": "sqcvtu_z_mz2.html"
  },
  {
    "name": "SQCVT",
    "doc": "Multi-vector signed saturating extract narrow",
    "file": "sqcvt_z_mz2.html"
  },
  {
    "name": "SQDECB",
    "doc": "Signed saturating decrement scalar by multiple of 8-bit predicate constraint element count",
    "file": "sqdecb_r_rs.html"
  },
  {
    "name": "SQDECD",
    "doc": "Signed saturating decrement scalar by multiple of 64-bit predicate constraint element count",
    "file": "sqdecd_r_rs.html"
  },
  {
    "name": "SQDECH",
    "doc": "Signed saturating decrement scalar by multiple of 16-bit predicate constraint element count",
    "file": "sqdech_r_rs.html"
  },
  {
    "name": "SQDECP",
    "doc": "Signed saturating decrement scalar by count of true predicate elements",
    "file": "sqdecp_r_p_r.html"
  },
  {
    "name": "SQDECW",
    "doc": "Signed saturating decrement scalar by multiple of 32-bit predicate constraint element count",
    "file": "sqdecw_r_rs.html"
  },
  {
    "name": "SQDMLALBT",
    "doc": "Signed saturating doubling multiply-add long to accumulator (bottom × top)",
    "file": "sqdmlalbt_z_zzz.html"
  },
  {
    "name": "SQDMLALB",
    "doc": "Signed saturating doubling multiply-add long to accumulator (bottom)",
    "file": "sqdmlalb_z_zzz.html"
  },
  {
    "name": "SQDMLALT",
    "doc": "Signed saturating doubling multiply-add long to accumulator (top)",
    "file": "sqdmlalt_z_zzz.html"
  },
  {
    "name": "SQDMLAL",
    "doc": "Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "sqdmlal_advsimd_elt.html"
  },
  {
    "name": "SQDMLAL2",
    "doc": "Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "sqdmlal_advsimd_elt.html"
  },
  {
    "name": "SQDMLSLBT",
    "doc": "Signed saturating doubling multiply-subtract long from accumulator (bottom × top)",
    "file": "sqdmlslbt_z_zzz.html"
  },
  {
    "name": "SQDMLSLB",
    "doc": "Signed saturating doubling multiply-subtract long from accumulator (bottom)",
    "file": "sqdmlslb_z_zzz.html"
  },
  {
    "name": "SQDMLSLT",
    "doc": "Signed saturating doubling multiply-subtract long from accumulator (top)",
    "file": "sqdmlslt_z_zzz.html"
  },
  {
    "name": "SQDMLSL",
    "doc": "Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.",
    "file": "sqdmlsl_advsimd_elt.html"
  },
  {
    "name": "SQDMLSL2",
    "doc": "Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.",
    "file": "sqdmlsl_advsimd_elt.html"
  },
  {
    "name": "SQDMULH",
    "doc": "Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sqdmulh_advsimd_elt.html"
  },
  {
    "name": "SQDMULLB",
    "doc": "Signed saturating doubling multiply long (bottom)",
    "file": "sqdmullb_z_zz.html"
  },
  {
    "name": "SQDMULLT",
    "doc": "Signed saturating doubling multiply long (top)",
    "file": "sqdmullt_z_zz.html"
  },
  {
    "name": "SQDMULL",
    "doc": "Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "sqdmull_advsimd_elt.html"
  },
  {
    "name": "SQDMULL2",
    "doc": "Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "sqdmull_advsimd_elt.html"
  },
  {
    "name": "SQINCB",
    "doc": "Signed saturating increment scalar by multiple of 8-bit predicate constraint element count",
    "file": "sqincb_r_rs.html"
  },
  {
    "name": "SQINCD",
    "doc": "Signed saturating increment scalar by multiple of 64-bit predicate constraint element count",
    "file": "sqincd_r_rs.html"
  },
  {
    "name": "SQINCH",
    "doc": "Signed saturating increment scalar by multiple of 16-bit predicate constraint element count",
    "file": "sqinch_r_rs.html"
  },
  {
    "name": "SQINCP",
    "doc": "Signed saturating increment scalar by count of true predicate elements",
    "file": "sqincp_r_p_r.html"
  },
  {
    "name": "SQINCW",
    "doc": "Signed saturating increment scalar by multiple of 32-bit predicate constraint element count",
    "file": "sqincw_r_rs.html"
  },
  {
    "name": "SQNEG",
    "doc": "Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "sqneg_advsimd.html"
  },
  {
    "name": "SQRDCMLAH",
    "doc": "Saturating rounding doubling complex integer multiply-add high with rotate",
    "file": "sqrdcmlah_z_zzz.html"
  },
  {
    "name": "SQRDMLAH",
    "doc": "Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.",
    "file": "sqrdmlah_advsimd_elt.html"
  },
  {
    "name": "SQRDMLSH",
    "doc": "Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.",
    "file": "sqrdmlsh_advsimd_elt.html"
  },
  {
    "name": "SQRDMULH",
    "doc": "Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sqrdmulh_advsimd_elt.html"
  },
  {
    "name": "SQRSHLR",
    "doc": "Signed saturating rounding shift left reversed vectors (predicated)",
    "file": "sqrshlr_z_p_zz.html"
  },
  {
    "name": "SQRSHL",
    "doc": "Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sqrshl_advsimd.html"
  },
  {
    "name": "SQRSHRNB",
    "doc": "Signed saturating rounding shift right narrow by immediate (bottom)",
    "file": "sqrshrnb_z_zi.html"
  },
  {
    "name": "SQRSHRNT",
    "doc": "Signed saturating rounding shift right narrow by immediate (top)",
    "file": "sqrshrnt_z_zi.html"
  },
  {
    "name": "SQRSHRN",
    "doc": "Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.",
    "file": "sqrshrn_advsimd.html"
  },
  {
    "name": "SQRSHRN2",
    "doc": "Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.",
    "file": "sqrshrn_advsimd.html"
  },
  {
    "name": "SQRSHRUNB",
    "doc": "Signed saturating rounding shift right unsigned narrow by immediate (bottom)",
    "file": "sqrshrunb_z_zi.html"
  },
  {
    "name": "SQRSHRUNT",
    "doc": "Signed saturating rounding shift right unsigned narrow by immediate (top)",
    "file": "sqrshrunt_z_zi.html"
  },
  {
    "name": "SQRSHRUN",
    "doc": "Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.",
    "file": "sqrshrun_advsimd.html"
  },
  {
    "name": "SQRSHRUN2",
    "doc": "Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.",
    "file": "sqrshrun_advsimd.html"
  },
  {
    "name": "SQRSHRU",
    "doc": "Multi-vector signed saturating rounding shift right unsigned narrow by immediate",
    "file": "sqrshru_z_mz2.html"
  },
  {
    "name": "SQRSHR",
    "doc": "Multi-vector signed saturating rounding shift right narrow by immediate",
    "file": "sqrshr_z_mz2.html"
  },
  {
    "name": "SQSHLR",
    "doc": "Signed saturating shift left reversed vectors (predicated)",
    "file": "sqshlr_z_p_zz.html"
  },
  {
    "name": "SQSHLU",
    "doc": "Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.",
    "file": "sqshlu_advsimd.html"
  },
  {
    "name": "SQSHL",
    "doc": "Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.",
    "file": "sqshl_advsimd_imm.html"
  },
  {
    "name": "SQSHRNB",
    "doc": "Signed saturating shift right narrow by immediate (bottom)",
    "file": "sqshrnb_z_zi.html"
  },
  {
    "name": "SQSHRNT",
    "doc": "Signed saturating shift right narrow by immediate (top)",
    "file": "sqshrnt_z_zi.html"
  },
  {
    "name": "SQSHRN",
    "doc": "Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.",
    "file": "sqshrn_advsimd.html"
  },
  {
    "name": "SQSHRN2",
    "doc": "Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.",
    "file": "sqshrn_advsimd.html"
  },
  {
    "name": "SQSHRUNB",
    "doc": "Signed saturating shift right unsigned narrow by immediate (bottom)",
    "file": "sqshrunb_z_zi.html"
  },
  {
    "name": "SQSHRUNT",
    "doc": "Signed saturating shift right unsigned narrow by immediate (top)",
    "file": "sqshrunt_z_zi.html"
  },
  {
    "name": "SQSHRUN",
    "doc": "Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.",
    "file": "sqshrun_advsimd.html"
  },
  {
    "name": "SQSHRUN2",
    "doc": "Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.",
    "file": "sqshrun_advsimd.html"
  },
  {
    "name": "SQSUBR",
    "doc": "Signed saturating subtraction reversed vectors (predicated)",
    "file": "sqsubr_z_p_zz.html"
  },
  {
    "name": "SQSUB",
    "doc": "Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sqsub_advsimd.html"
  },
  {
    "name": "SQXTNB",
    "doc": "Signed saturating extract narrow (bottom)",
    "file": "sqxtnb_z_zz.html"
  },
  {
    "name": "SQXTNT",
    "doc": "Signed saturating extract narrow (top)",
    "file": "sqxtnt_z_zz.html"
  },
  {
    "name": "SQXTN",
    "doc": "Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sqxtn_advsimd.html"
  },
  {
    "name": "SQXTN2",
    "doc": "Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sqxtn_advsimd.html"
  },
  {
    "name": "SQXTUNB",
    "doc": "Signed saturating unsigned extract narrow (bottom)",
    "file": "sqxtunb_z_zz.html"
  },
  {
    "name": "SQXTUNT",
    "doc": "Signed saturating unsigned extract narrow (top)",
    "file": "sqxtunt_z_zz.html"
  },
  {
    "name": "SQXTUN",
    "doc": "Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.",
    "file": "sqxtun_advsimd.html"
  },
  {
    "name": "SQXTUN2",
    "doc": "Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.",
    "file": "sqxtun_advsimd.html"
  },
  {
    "name": "SRHADD",
    "doc": "Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "srhadd_advsimd.html"
  },
  {
    "name": "SRI",
    "doc": "Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.",
    "file": "sri_advsimd.html"
  },
  {
    "name": "SRSHLR",
    "doc": "Signed rounding shift left reversed vectors (predicated)",
    "file": "srshlr_z_p_zz.html"
  },
  {
    "name": "SRSHL",
    "doc": "Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "srshl_advsimd.html"
  },
  {
    "name": "SRSHR",
    "doc": "Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.",
    "file": "srshr_advsimd.html"
  },
  {
    "name": "SRSRA",
    "doc": "Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.",
    "file": "srsra_advsimd.html"
  },
  {
    "name": "SSBB",
    "doc": "Speculative Store Bypass Barrier is a memory barrier that prevents speculative loads from bypassing earlier stores to the same virtual address under certain conditions. For more information and details of the semantics, see Speculative Store Bypass Barrier (SSBB).",
    "file": "ssbb_dsb.html"
  },
  {
    "name": "SSHLLB",
    "doc": "Signed shift left long by immediate (bottom)",
    "file": "sshllb_z_zi.html"
  },
  {
    "name": "SSHLLT",
    "doc": "Signed shift left long by immediate (top)",
    "file": "sshllt_z_zi.html"
  },
  {
    "name": "SSHLL",
    "doc": "Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sshll_advsimd.html"
  },
  {
    "name": "SSHLL2",
    "doc": "Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sshll_advsimd.html"
  },
  {
    "name": "SSHL",
    "doc": "Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "sshl_advsimd.html"
  },
  {
    "name": "SSHR",
    "doc": "Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.",
    "file": "sshr_advsimd.html"
  },
  {
    "name": "SSRA",
    "doc": "Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.",
    "file": "ssra_advsimd.html"
  },
  {
    "name": "SSUBLBT",
    "doc": "Signed subtract long (bottom - top)",
    "file": "ssublbt_z_zz.html"
  },
  {
    "name": "SSUBLB",
    "doc": "Signed subtract long (bottom)",
    "file": "ssublb_z_zz.html"
  },
  {
    "name": "SSUBLTB",
    "doc": "Signed subtract long (top - bottom)",
    "file": "ssubltb_z_zz.html"
  },
  {
    "name": "SSUBLT",
    "doc": "Signed subtract long (top)",
    "file": "ssublt_z_zz.html"
  },
  {
    "name": "SSUBL",
    "doc": "Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.",
    "file": "ssubl_advsimd.html"
  },
  {
    "name": "SSUBL2",
    "doc": "Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.",
    "file": "ssubl_advsimd.html"
  },
  {
    "name": "SSUBWB",
    "doc": "Signed subtract wide (bottom)",
    "file": "ssubwb_z_zz.html"
  },
  {
    "name": "SSUBWT",
    "doc": "Signed subtract wide (top)",
    "file": "ssubwt_z_zz.html"
  },
  {
    "name": "SSUBW",
    "doc": "Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.",
    "file": "ssubw_advsimd.html"
  },
  {
    "name": "SSUBW2",
    "doc": "Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.",
    "file": "ssubw_advsimd.html"
  },
  {
    "name": "ST1B",
    "doc": "Contiguous store of bytes from multiple strided vectors (immediate index)",
    "file": "st1b_mzx_p_bi.html"
  },
  {
    "name": "ST1D",
    "doc": "Contiguous store of doublewords from multiple strided vectors (immediate index)",
    "file": "st1d_mzx_p_bi.html"
  },
  {
    "name": "ST1H",
    "doc": "Contiguous store of halfwords from multiple strided vectors (immediate index)",
    "file": "st1h_mzx_p_bi.html"
  },
  {
    "name": "ST1Q",
    "doc": "Contiguous store of quadwords from 128-bit element ZA tile slice",
    "file": "st1q_za_p_rrr.html"
  },
  {
    "name": "ST1W",
    "doc": "Contiguous store of words from multiple strided vectors (immediate index)",
    "file": "st1w_mzx_p_bi.html"
  },
  {
    "name": "ST1",
    "doc": "Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.",
    "file": "st1_advsimd_mult.html"
  },
  {
    "name": "ST2B",
    "doc": "Contiguous store two-byte structures from two vectors (immediate index)",
    "file": "st2b_z_p_bi.html"
  },
  {
    "name": "ST2D",
    "doc": "Contiguous store two-doubleword structures from two vectors (immediate index)",
    "file": "st2d_z_p_bi.html"
  },
  {
    "name": "ST2G",
    "doc": "Store Allocation Tags stores an Allocation Tag to two Tag granules of memory. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the source register.",
    "file": "st2g.html"
  },
  {
    "name": "ST2H",
    "doc": "Contiguous store two-halfword structures from two vectors (immediate index)",
    "file": "st2h_z_p_bi.html"
  },
  {
    "name": "ST2Q",
    "doc": "Contiguous store two-quadword structures from two vectors (immediate index)",
    "file": "st2q_z_p_bi.html"
  },
  {
    "name": "ST2W",
    "doc": "Contiguous store two-word structures from two vectors (immediate index)",
    "file": "st2w_z_p_bi.html"
  },
  {
    "name": "ST2",
    "doc": "Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&amp;FP registers to memory, with interleaving. Every element of each register is stored.",
    "file": "st2_advsimd_mult.html"
  },
  {
    "name": "ST3B",
    "doc": "Contiguous store three-byte structures from three vectors (immediate index)",
    "file": "st3b_z_p_bi.html"
  },
  {
    "name": "ST3D",
    "doc": "Contiguous store three-doubleword structures from three vectors (immediate index)",
    "file": "st3d_z_p_bi.html"
  },
  {
    "name": "ST3H",
    "doc": "Contiguous store three-halfword structures from three vectors (immediate index)",
    "file": "st3h_z_p_bi.html"
  },
  {
    "name": "ST3Q",
    "doc": "Contiguous store three-quadword structures from three vectors (immediate index)",
    "file": "st3q_z_p_bi.html"
  },
  {
    "name": "ST3W",
    "doc": "Contiguous store three-word structures from three vectors (immediate index)",
    "file": "st3w_z_p_bi.html"
  },
  {
    "name": "ST3",
    "doc": "Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&amp;FP registers, with interleaving. Every element of each register is stored.",
    "file": "st3_advsimd_mult.html"
  },
  {
    "name": "ST4B",
    "doc": "Contiguous store four-byte structures from four vectors (immediate index)",
    "file": "st4b_z_p_bi.html"
  },
  {
    "name": "ST4D",
    "doc": "Contiguous store four-doubleword structures from four vectors (immediate index)",
    "file": "st4d_z_p_bi.html"
  },
  {
    "name": "ST4H",
    "doc": "Contiguous store four-halfword structures from four vectors (immediate index)",
    "file": "st4h_z_p_bi.html"
  },
  {
    "name": "ST4Q",
    "doc": "Contiguous store four-quadword structures from four vectors (immediate index)",
    "file": "st4q_z_p_bi.html"
  },
  {
    "name": "ST4W",
    "doc": "Contiguous store four-word structures from four vectors (immediate index)",
    "file": "st4w_z_p_bi.html"
  },
  {
    "name": "ST4",
    "doc": "Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&amp;FP registers, with interleaving. Every element of each register is stored.",
    "file": "st4_advsimd_mult.html"
  },
  {
    "name": "ST64B",
    "doc": "Single-copy Atomic 64-byte Store without Return stores eight 64-bit doublewords from consecutive registers, Xt to X(t+7), to a memory location. The data that is stored is atomic and is required to be 64-byte-aligned.",
    "file": "st64b.html"
  },
  {
    "name": "ST64BV",
    "doc": "Single-copy Atomic 64-byte Store with Return stores eight 64-bit doublewords from consecutive registers, Xt to X(t+7), to a memory location, and writes the status result of the store to a register. The data that is stored is atomic and is required to be 64-byte aligned.",
    "file": "st64bv.html"
  },
  {
    "name": "ST64BV0",
    "doc": "Single-copy Atomic 64-byte EL0 Store with Return stores eight 64-bit doublewords from consecutive registers, Xt to X(t+7), to a memory location, with the bottom 32 bits taken from ACCDATA_EL1, and writes the status result of the store to a register. The data that is stored is atomic and is required to be 64-byte aligned.",
    "file": "st64bv0.html"
  },
  {
    "name": "STADDB",
    "doc": "Atomic add on byte in memory, without return, atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "staddb_ldaddb.html"
  },
  {
    "name": "STADDLB",
    "doc": "Atomic add on byte in memory, without return, atomically loads an 8-bit byte from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "staddb_ldaddb.html"
  },
  {
    "name": "STADDH",
    "doc": "Atomic add on halfword in memory, without return, atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "staddh_ldaddh.html"
  },
  {
    "name": "STADDLH",
    "doc": "Atomic add on halfword in memory, without return, atomically loads a 16-bit halfword from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "staddh_ldaddh.html"
  },
  {
    "name": "STADD",
    "doc": "Atomic add on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "stadd_ldadd.html"
  },
  {
    "name": "STADDL",
    "doc": "Atomic add on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, adds the value held in a register to it, and stores the result back to memory.",
    "file": "stadd_ldadd.html"
  },
  {
    "name": "STCLRB",
    "doc": "Atomic bit clear on byte in memory, without return, atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclrb_ldclrb.html"
  },
  {
    "name": "STCLRLB",
    "doc": "Atomic bit clear on byte in memory, without return, atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclrb_ldclrb.html"
  },
  {
    "name": "STCLRH",
    "doc": "Atomic bit clear on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclrh_ldclrh.html"
  },
  {
    "name": "STCLRLH",
    "doc": "Atomic bit clear on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclrh_ldclrh.html"
  },
  {
    "name": "STCLR",
    "doc": "Atomic bit clear on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclr_ldclr.html"
  },
  {
    "name": "STCLRL",
    "doc": "Atomic bit clear on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory.",
    "file": "stclr_ldclr.html"
  },
  {
    "name": "STEORB",
    "doc": "Atomic Exclusive-OR on byte in memory, without return, atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steorb_ldeorb.html"
  },
  {
    "name": "STEORLB",
    "doc": "Atomic Exclusive-OR on byte in memory, without return, atomically loads an 8-bit byte from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steorb_ldeorb.html"
  },
  {
    "name": "STEORH",
    "doc": "Atomic Exclusive-OR on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steorh_ldeorh.html"
  },
  {
    "name": "STEORLH",
    "doc": "Atomic Exclusive-OR on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steorh_ldeorh.html"
  },
  {
    "name": "STEOR",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steor_ldeor.html"
  },
  {
    "name": "STEORL",
    "doc": "Atomic Exclusive-OR on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive-OR with the value held in a register on it, and stores the result back to memory.",
    "file": "steor_ldeor.html"
  },
  {
    "name": "STG",
    "doc": "Store Allocation Tag stores an Allocation Tag to memory. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the source register.",
    "file": "stg.html"
  },
  {
    "name": "STGM",
    "doc": "Store Tag Multiple writes a naturally aligned block of N Allocation Tags, where the size of N is identified in GMID_EL1.BS, and the Allocation Tag written to address A is taken from the source register at 4*A&lt;7:4&gt;+3:4*A&lt;7:4&gt;.",
    "file": "stgm.html"
  },
  {
    "name": "STGP",
    "doc": "Store Allocation Tag and Pair of registers stores an Allocation Tag and two 64-bit doublewords to memory, from two registers. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the base register.",
    "file": "stgp.html"
  },
  {
    "name": "STILP",
    "doc": "Store-Release ordered Pair of registers calculates an address from a base register value and an optional offset, and stores two 32-bit words or two 64-bit doublewords to the calculated address, from two registers. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. The instruction also has memory ordering semantics, as described in Load-Acquire, Load-AcquirePC, and Store-Release, with the additional requirement that:",
    "file": "stilp.html"
  },
  {
    "name": "STL1",
    "doc": "Store-Release a single-element structure from one lane of one register. This instruction stores the specified element of a SIMD&amp;FP register to memory.",
    "file": "stl1_advsimd_sngl.html"
  },
  {
    "name": "STLLR",
    "doc": "Store LORelease Register stores a 32-bit word or a 64-bit doubleword to a memory location, from a register. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stllr.html"
  },
  {
    "name": "STLLRB",
    "doc": "Store LORelease Register Byte stores a byte from a 32-bit register to a memory location. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stllrb.html"
  },
  {
    "name": "STLLRH",
    "doc": "Store LORelease Register Halfword stores a halfword from a 32-bit register to a memory location. The instruction also has memory ordering semantics as described in Load LOAcquire, Store LORelease. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stllrh.html"
  },
  {
    "name": "STLR",
    "doc": "Store-Release Register stores a 32-bit word or a 64-bit doubleword to a memory location, from a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlr.html"
  },
  {
    "name": "STLRB",
    "doc": "Store-Release Register Byte stores a byte from a 32-bit register to a memory location. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlrb.html"
  },
  {
    "name": "STLRH",
    "doc": "Store-Release Register Halfword stores a halfword from a 32-bit register to a memory location. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlrh.html"
  },
  {
    "name": "STLURB",
    "doc": "Store-Release Register Byte (unscaled) calculates an address from a base register value and an immediate offset, and stores a byte to the calculated address, from a 32-bit register.",
    "file": "stlurb.html"
  },
  {
    "name": "STLURH",
    "doc": "Store-Release Register Halfword (unscaled) calculates an address from a base register value and an immediate offset, and stores a halfword to the calculated address, from a 32-bit register.",
    "file": "stlurh.html"
  },
  {
    "name": "STLUR",
    "doc": "Store-Release SIMD&amp;FP Register (unscaled offset). This instruction stores a single SIMD&amp;FP register to memory. The address that is used for the store is calculated from a base register value and an optional immediate offset.",
    "file": "stlur_fpsimd.html"
  },
  {
    "name": "STLXP",
    "doc": "Store-Release Exclusive Pair of registers stores two 32-bit words or two 64-bit doublewords to a memory location if the PE has exclusive access to the memory address, from two registers, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. If a 64-bit pair Store-Exclusive succeeds, it causes a single-copy atomic update of the 128-bit memory location being updated. The instruction also has memory ordering semantics, as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlxp.html"
  },
  {
    "name": "STLXR",
    "doc": "Store-Release Exclusive Register stores a 32-bit word or a 64-bit doubleword to memory if the PE has exclusive access to the memory address, from two registers, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. The memory access is atomic. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlxr.html"
  },
  {
    "name": "STLXRB",
    "doc": "Store-Release Exclusive Register Byte stores a byte from a 32-bit register to memory if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. The memory access is atomic. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlxrb.html"
  },
  {
    "name": "STLXRH",
    "doc": "Store-Release Exclusive Register Halfword stores a halfword from a 32-bit register to memory if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. The memory access is atomic. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stlxrh.html"
  },
  {
    "name": "STNP",
    "doc": "Store Pair of SIMD&amp;FP registers, with Non-temporal hint. This instruction stores a pair of SIMD&amp;FP registers to memory, issuing a hint to the memory system that the access is non-temporal. The address used for the store is calculated from an address from a base register value and an immediate offset. For information about non-temporal pair instructions, see Load/Store SIMD and Floating-point Non-temporal pair.",
    "file": "stnp_fpsimd.html"
  },
  {
    "name": "STNT1B",
    "doc": "Contiguous store non-temporal of bytes from multiple strided vectors (immediate index)",
    "file": "stnt1b_mzx_p_bi.html"
  },
  {
    "name": "STNT1D",
    "doc": "Contiguous store non-temporal of doublewords from multiple strided vectors (immediate index)",
    "file": "stnt1d_mzx_p_bi.html"
  },
  {
    "name": "STNT1H",
    "doc": "Contiguous store non-temporal of halfwords from multiple strided vectors (immediate index)",
    "file": "stnt1h_mzx_p_bi.html"
  },
  {
    "name": "STNT1W",
    "doc": "Contiguous store non-temporal of words from multiple strided vectors (immediate index)",
    "file": "stnt1w_mzx_p_bi.html"
  },
  {
    "name": "STP",
    "doc": "Store Pair of SIMD&amp;FP registers. This instruction stores a pair of SIMD&amp;FP registers to memory. The address used for the store is calculated from a base register value and an immediate offset.",
    "file": "stp_fpsimd.html"
  },
  {
    "name": "STRB",
    "doc": "Store Register Byte (immediate) stores the least significant byte of a 32-bit register to memory. The address that is used for the store is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "strb_imm.html"
  },
  {
    "name": "STRH",
    "doc": "Store Register Halfword (immediate) stores the least significant halfword of a 32-bit register to memory. The address that is used for the store is calculated from a base register and an immediate offset. For information about memory accesses, see Load/Store addressing modes.",
    "file": "strh_imm.html"
  },
  {
    "name": "STR",
    "doc": "Store SIMD&amp;FP register (immediate offset). This instruction stores a single SIMD&amp;FP register to memory. The address that is used for the store is calculated from a base register value and an immediate offset.",
    "file": "str_imm_fpsimd.html"
  },
  {
    "name": "STSETB",
    "doc": "Atomic bit set on byte in memory, without return, atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stsetb_ldsetb.html"
  },
  {
    "name": "STSETLB",
    "doc": "Atomic bit set on byte in memory, without return, atomically loads an 8-bit byte from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stsetb_ldsetb.html"
  },
  {
    "name": "STSETH",
    "doc": "Atomic bit set on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stseth_ldseth.html"
  },
  {
    "name": "STSETLH",
    "doc": "Atomic bit set on halfword in memory, without return, atomically loads a 16-bit halfword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stseth_ldseth.html"
  },
  {
    "name": "STSET",
    "doc": "Atomic bit set on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stset_ldset.html"
  },
  {
    "name": "STSETL",
    "doc": "Atomic bit set on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs a bitwise OR with the value held in a register on it, and stores the result back to memory.",
    "file": "stset_ldset.html"
  },
  {
    "name": "STSMAXB",
    "doc": "Atomic signed maximum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmaxb_ldsmaxb.html"
  },
  {
    "name": "STSMAXLB",
    "doc": "Atomic signed maximum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmaxb_ldsmaxb.html"
  },
  {
    "name": "STSMAXH",
    "doc": "Atomic signed maximum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmaxh_ldsmaxh.html"
  },
  {
    "name": "STSMAXLH",
    "doc": "Atomic signed maximum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmaxh_ldsmaxh.html"
  },
  {
    "name": "STSMAX",
    "doc": "Atomic signed maximum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmax_ldsmax.html"
  },
  {
    "name": "STSMAXL",
    "doc": "Atomic signed maximum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as signed numbers.",
    "file": "stsmax_ldsmax.html"
  },
  {
    "name": "STSMINB",
    "doc": "Atomic signed minimum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsminb_ldsminb.html"
  },
  {
    "name": "STSMINLB",
    "doc": "Atomic signed minimum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsminb_ldsminb.html"
  },
  {
    "name": "STSMINH",
    "doc": "Atomic signed minimum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsminh_ldsminh.html"
  },
  {
    "name": "STSMINLH",
    "doc": "Atomic signed minimum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsminh_ldsminh.html"
  },
  {
    "name": "STSMIN",
    "doc": "Atomic signed minimum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsmin_ldsmin.html"
  },
  {
    "name": "STSMINL",
    "doc": "Atomic signed minimum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as signed numbers.",
    "file": "stsmin_ldsmin.html"
  },
  {
    "name": "STTR",
    "doc": "Store Register (unprivileged) stores a word or doubleword from a register to memory. The address that is used for the store is calculated from a base register and an immediate offset.",
    "file": "sttr.html"
  },
  {
    "name": "STTRB",
    "doc": "Store Register Byte (unprivileged) stores a byte from a 32-bit register to memory. The address that is used for the store is calculated from a base register and an immediate offset.",
    "file": "sttrb.html"
  },
  {
    "name": "STTRH",
    "doc": "Store Register Halfword (unprivileged) stores a halfword from a 32-bit register to memory. The address that is used for the store is calculated from a base register and an immediate offset.",
    "file": "sttrh.html"
  },
  {
    "name": "STUMAXB",
    "doc": "Atomic unsigned maximum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumaxb_ldumaxb.html"
  },
  {
    "name": "STUMAXLB",
    "doc": "Atomic unsigned maximum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumaxb_ldumaxb.html"
  },
  {
    "name": "STUMAXH",
    "doc": "Atomic unsigned maximum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumaxh_ldumaxh.html"
  },
  {
    "name": "STUMAXLH",
    "doc": "Atomic unsigned maximum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumaxh_ldumaxh.html"
  },
  {
    "name": "STUMAX",
    "doc": "Atomic unsigned maximum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumax_ldumax.html"
  },
  {
    "name": "STUMAXL",
    "doc": "Atomic unsigned maximum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the larger value back to memory, treating the values as unsigned numbers.",
    "file": "stumax_ldumax.html"
  },
  {
    "name": "STUMINB",
    "doc": "Atomic unsigned minimum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stuminb_lduminb.html"
  },
  {
    "name": "STUMINLB",
    "doc": "Atomic unsigned minimum on byte in memory, without return, atomically loads an 8-bit byte from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stuminb_lduminb.html"
  },
  {
    "name": "STUMINH",
    "doc": "Atomic unsigned minimum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stuminh_lduminh.html"
  },
  {
    "name": "STUMINLH",
    "doc": "Atomic unsigned minimum on halfword in memory, without return, atomically loads a 16-bit halfword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stuminh_lduminh.html"
  },
  {
    "name": "STUMIN",
    "doc": "Atomic unsigned minimum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stumin_ldumin.html"
  },
  {
    "name": "STUMINL",
    "doc": "Atomic unsigned minimum on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, compares it against the value held in a register, and stores the smaller value back to memory, treating the values as unsigned numbers.",
    "file": "stumin_ldumin.html"
  },
  {
    "name": "STURB",
    "doc": "Store Register Byte (unscaled) calculates an address from a base register value and an immediate offset, and stores a byte to the calculated address, from a 32-bit register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "sturb.html"
  },
  {
    "name": "STURH",
    "doc": "Store Register Halfword (unscaled) calculates an address from a base register value and an immediate offset, and stores a halfword to the calculated address, from a 32-bit register. For information about memory accesses, see Load/Store addressing modes.",
    "file": "sturh.html"
  },
  {
    "name": "STUR",
    "doc": "Store SIMD&amp;FP register (unscaled offset). This instruction stores a single SIMD&amp;FP register to memory. The address that is used for the store is calculated from a base register value and an optional immediate offset.",
    "file": "stur_fpsimd.html"
  },
  {
    "name": "STXP",
    "doc": "Store Exclusive Pair of registers stores two 32-bit words or two 64-bit doublewords from two registers to a memory location if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. For information on single-copy atomicity and alignment requirements, see Requirements for single-copy atomicity and Alignment of data accesses. If a 64-bit pair Store-Exclusive succeeds, it causes a single-copy atomic update of the 128-bit memory location being updated. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stxp.html"
  },
  {
    "name": "STXR",
    "doc": "Store Exclusive Register stores a 32-bit word or a 64-bit doubleword from a register to memory if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. For information about memory accesses, see Load/Store addressing modes.",
    "file": "stxr.html"
  },
  {
    "name": "STXRB",
    "doc": "Store Exclusive Register Byte stores a byte from a register to memory if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. The memory access is atomic.",
    "file": "stxrb.html"
  },
  {
    "name": "STXRH",
    "doc": "Store Exclusive Register Halfword stores a halfword from a register to memory if the PE has exclusive access to the memory address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed. See Synchronization and semaphores. The memory access is atomic.",
    "file": "stxrh.html"
  },
  {
    "name": "STZ2G",
    "doc": "Store Allocation Tags, Zeroing stores an Allocation Tag to two Tag granules of memory, zeroing the associated data locations. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the source register.",
    "file": "stz2g.html"
  },
  {
    "name": "STZG",
    "doc": "Store Allocation Tag, Zeroing stores an Allocation Tag to memory, zeroing the associated data location. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the source register.",
    "file": "stzg.html"
  },
  {
    "name": "STZGM",
    "doc": "Store Tag and Zero Multiple writes a naturally aligned block of N Allocation Tags and stores zero to the associated data locations, where the size of N is identified in DCZID_EL0.BS, and the Allocation Tag is taken from the source register bits&lt;3:0&gt;.",
    "file": "stzgm.html"
  },
  {
    "name": "SUBG",
    "doc": "Subtract with Tag subtracts an immediate value scaled by the Tag granule from the address in the source register, modifies the Logical Address Tag of the address using an immediate value, and writes the result to the destination register. Tags specified in GCR_EL1.Exclude are excluded from the possible outputs when modifying the Logical Address Tag.",
    "file": "subg.html"
  },
  {
    "name": "SUBHNB",
    "doc": "Subtract narrow high part (bottom)",
    "file": "subhnb_z_zz.html"
  },
  {
    "name": "SUBHNT",
    "doc": "Subtract narrow high part (top)",
    "file": "subhnt_z_zz.html"
  },
  {
    "name": "SUBHN",
    "doc": "Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "subhn_advsimd.html"
  },
  {
    "name": "SUBHN2",
    "doc": "Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.",
    "file": "subhn_advsimd.html"
  },
  {
    "name": "SUBP",
    "doc": "Subtract Pointer subtracts the 56-bit address held in the second source register from the 56-bit address held in the first source register, sign-extends the result to 64-bits, and writes the result to the destination register.",
    "file": "subp.html"
  },
  {
    "name": "SUBPS",
    "doc": "Subtract Pointer, setting Flags subtracts the 56-bit address held in the second source register from the 56-bit address held in the first source register, sign-extends the result to 64-bits, and writes the result to the destination register. It updates the condition flags based on the result of the subtraction.",
    "file": "subps.html"
  },
  {
    "name": "SUBR",
    "doc": "Reversed subtract vectors (predicated)",
    "file": "subr_z_p_zz.html"
  },
  {
    "name": "SUBS",
    "doc": "Subtract (extended register), setting flags, subtracts a sign or zero-extended register value, followed by an optional left shift amount, from a register value, and writes the result to the destination register. The argument that is extended from the &lt;Rm&gt; register can be a byte, halfword, word, or doubleword. It updates the condition flags based on the result.",
    "file": "subs_addsub_ext.html"
  },
  {
    "name": "SUB",
    "doc": "Subtract (extended register) subtracts a sign or zero-extended register value, followed by an optional left shift amount, from a register value, and writes the result to the destination register. The argument that is extended from the &lt;Rm&gt; register can be a byte, halfword, word, or doubleword.",
    "file": "sub_addsub_ext.html"
  },
  {
    "name": "SUDOT",
    "doc": "Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.",
    "file": "sudot_advsimd_elt.html"
  },
  {
    "name": "SUMLALL",
    "doc": "Multi-vector signed by unsigned integer multiply-add long-long by indexed element",
    "file": "sumlall_za_zzi.html"
  },
  {
    "name": "SUMOPA",
    "doc": "Signed by unsigned integer sum of outer products and accumulate",
    "file": "sumopa_za_pp_zz.html"
  },
  {
    "name": "SUMOPS",
    "doc": "Signed by unsigned integer sum of outer products and subtract",
    "file": "sumops_za_pp_zz.html"
  },
  {
    "name": "SUNPKHI",
    "doc": "Signed unpack and extend half of vector",
    "file": "sunpkhi_z_z.html"
  },
  {
    "name": "SUNPKLO",
    "doc": "Signed unpack and extend half of vector",
    "file": "sunpkhi_z_z.html"
  },
  {
    "name": "SUNPK",
    "doc": "Unpack and sign-extend multi-vector elements",
    "file": "sunpk_mz_z.html"
  },
  {
    "name": "SUQADD",
    "doc": "Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.",
    "file": "suqadd_advsimd.html"
  },
  {
    "name": "SUVDOT",
    "doc": "Multi-vector signed by unsigned integer vertical dot-product by indexed element",
    "file": "suvdot_za_zzi.html"
  },
  {
    "name": "SVC",
    "doc": "Supervisor Call causes an exception to be taken to EL1.",
    "file": "svc.html"
  },
  {
    "name": "SVDOT",
    "doc": "Multi-vector signed integer vertical dot-product by indexed element",
    "file": "svdot_za32_zzi.html"
  },
  {
    "name": "SWP",
    "doc": "Swap word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swp.html"
  },
  {
    "name": "SWPA",
    "doc": "Swap word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swp.html"
  },
  {
    "name": "SWPAL",
    "doc": "Swap word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swp.html"
  },
  {
    "name": "SWPL",
    "doc": "Swap word or doubleword in memory atomically loads a 32-bit word or 64-bit doubleword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swp.html"
  },
  {
    "name": "SWPB",
    "doc": "Swap byte in memory atomically loads an 8-bit byte from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swpb.html"
  },
  {
    "name": "SWPAB",
    "doc": "Swap byte in memory atomically loads an 8-bit byte from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swpb.html"
  },
  {
    "name": "SWPALB",
    "doc": "Swap byte in memory atomically loads an 8-bit byte from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swpb.html"
  },
  {
    "name": "SWPLB",
    "doc": "Swap byte in memory atomically loads an 8-bit byte from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swpb.html"
  },
  {
    "name": "SWPH",
    "doc": "Swap halfword in memory atomically loads a 16-bit halfword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swph.html"
  },
  {
    "name": "SWPAH",
    "doc": "Swap halfword in memory atomically loads a 16-bit halfword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swph.html"
  },
  {
    "name": "SWPALH",
    "doc": "Swap halfword in memory atomically loads a 16-bit halfword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swph.html"
  },
  {
    "name": "SWPLH",
    "doc": "Swap halfword in memory atomically loads a 16-bit halfword from a memory location, and stores the value held in a register back to the same memory location. The value initially loaded from memory is returned in the destination register.",
    "file": "swph.html"
  },
  {
    "name": "SWPP",
    "doc": "Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and stores the value held in a pair of registers back to the same memory location. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "swpp.html"
  },
  {
    "name": "SWPPA",
    "doc": "Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and stores the value held in a pair of registers back to the same memory location. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "swpp.html"
  },
  {
    "name": "SWPPAL",
    "doc": "Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and stores the value held in a pair of registers back to the same memory location. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "swpp.html"
  },
  {
    "name": "SWPPL",
    "doc": "Swap quadword in memory atomically loads a 128-bit quadword from a memory location, and stores the value held in a pair of registers back to the same memory location. The value initially loaded from memory is returned in the same pair of registers.",
    "file": "swpp.html"
  },
  {
    "name": "SXTB",
    "doc": "Signed Extend Byte extracts an 8-bit value from a register, sign-extends it to the size of the register, and writes the result to the destination register.",
    "file": "sxtb_sbfm.html"
  },
  {
    "name": "SXTH",
    "doc": "Signed byte / halfword / word extend (predicated)",
    "file": "sxtb_z_p_z.html"
  },
  {
    "name": "SXTW",
    "doc": "Signed byte / halfword / word extend (predicated)",
    "file": "sxtb_z_p_z.html"
  },
  {
    "name": "SXTL",
    "doc": "Signed extend Long. This instruction duplicates each vector element in the lower or upper half of the source SIMD&amp;FP register into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sxtl_sshll_advsimd.html"
  },
  {
    "name": "SXTL2",
    "doc": "Signed extend Long. This instruction duplicates each vector element in the lower or upper half of the source SIMD&amp;FP register into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.",
    "file": "sxtl_sshll_advsimd.html"
  },
  {
    "name": "SYS",
    "doc": "System instruction. For more information, see Op0 equals 0b01, cache maintenance, TLB maintenance, and address translation instructions for the encodings of System instructions.",
    "file": "sys.html"
  },
  {
    "name": "SYSL",
    "doc": "System instruction with result. For more information, see Op0 equals 0b01, cache maintenance, TLB maintenance, and address translation instructions for the encodings of System instructions.",
    "file": "sysl.html"
  },
  {
    "name": "SYSP",
    "doc": "128-bit System instruction.",
    "file": "sysp.html"
  },
  {
    "name": "TBLQ",
    "doc": "Programmable table lookup within each quadword vector segment (zeroing)",
    "file": "tblq_z_zz.html"
  },
  {
    "name": "TBL",
    "doc": "Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.",
    "file": "tbl_advsimd.html"
  },
  {
    "name": "TBNZ",
    "doc": "Test bit and Branch if Nonzero compares the value of a bit in a general-purpose register with zero, and conditionally branches to a label at a PC-relative offset if the comparison is not equal. It provides a hint that this is not a subroutine call or return. This instruction does not affect condition flags.",
    "file": "tbnz.html"
  },
  {
    "name": "TBXQ",
    "doc": "Programmable table lookup within each quadword vector segment (merging)",
    "file": "tbxq_z_zz.html"
  },
  {
    "name": "TBX",
    "doc": "Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.",
    "file": "tbx_advsimd.html"
  },
  {
    "name": "TBZ",
    "doc": "Test bit and Branch if Zero compares the value of a test bit with zero, and conditionally branches to a label at a PC-relative offset if the comparison is equal. It provides a hint that this is not a subroutine call or return. This instruction does not affect condition flags.",
    "file": "tbz.html"
  },
  {
    "name": "TCANCEL",
    "doc": "This instruction exits Transactional state and discards all state modifications that were performed transactionally. Execution continues at the instruction that follows the TSTART instruction of the outer transaction. The destination register of the TSTART instruction of the outer transaction is written with the immediate operand of TCANCEL.",
    "file": "tcancel.html"
  },
  {
    "name": "TCOMMIT",
    "doc": "This instruction commits the current transaction. If the current transaction is an outer transaction, then Transactional state is exited, and all state modifications performed transactionally are committed to the architectural state. TCOMMIT takes no inputs and returns no value.",
    "file": "tcommit.html"
  },
  {
    "name": "TLBIP",
    "doc": "TLB Invalidate Pair operation.",
    "file": "tlbip_sysp.html"
  },
  {
    "name": "TLBI",
    "doc": "TLB Invalidate operation. For more information, see op0==0b01, cache maintenance, TLB maintenance, and address translation instructions.",
    "file": "tlbi_sys.html"
  },
  {
    "name": "TRCIT",
    "doc": "Trace Instrumentation generates an instrumentation trace packet that contains the value of the provided register.",
    "file": "trcit_sys.html"
  },
  {
    "name": "TRN1",
    "doc": "Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.",
    "file": "trn1_advsimd.html"
  },
  {
    "name": "TRN2",
    "doc": "Interleave even or odd elements from two predicates",
    "file": "trn1_p_pp.html"
  },
  {
    "name": "TSB",
    "doc": "Trace Synchronization Barrier. This instruction is a barrier that synchronizes the trace operations of instructions, see Trace Synchronization Buffer (TSB CSYNC).",
    "file": "tsb.html"
  },
  {
    "name": "TSTART",
    "doc": "This instruction starts a new transaction. If the transaction started successfully, the destination register is set to zero. If the transaction failed or was canceled, then all state modifications that were performed transactionally are discarded and the destination register is written with a nonzero value that encodes the cause of the failure.",
    "file": "tstart.html"
  },
  {
    "name": "TST",
    "doc": "Test bits (immediate), setting the condition flags and discarding the result",
    "file": "tst_ands_log_imm.html"
  },
  {
    "name": "TTEST",
    "doc": "This instruction writes the depth of the transaction to the destination register, or the value 0 otherwise.",
    "file": "ttest.html"
  },
  {
    "name": "UABALB",
    "doc": "Unsigned absolute difference and accumulate long (bottom)",
    "file": "uabalb_z_zzz.html"
  },
  {
    "name": "UABALT",
    "doc": "Unsigned absolute difference and accumulate long (top)",
    "file": "uabalt_z_zzz.html"
  },
  {
    "name": "UABAL",
    "doc": "Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uabal_advsimd.html"
  },
  {
    "name": "UABAL2",
    "doc": "Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uabal_advsimd.html"
  },
  {
    "name": "UABA",
    "doc": "Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.",
    "file": "uaba_advsimd.html"
  },
  {
    "name": "UABDLB",
    "doc": "Unsigned absolute difference long (bottom)",
    "file": "uabdlb_z_zz.html"
  },
  {
    "name": "UABDLT",
    "doc": "Unsigned absolute difference long (top)",
    "file": "uabdlt_z_zz.html"
  },
  {
    "name": "UABDL",
    "doc": "Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uabdl_advsimd.html"
  },
  {
    "name": "UABDL2",
    "doc": "Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uabdl_advsimd.html"
  },
  {
    "name": "UABD",
    "doc": "Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uabd_advsimd.html"
  },
  {
    "name": "UADALP",
    "doc": "Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "uadalp_advsimd.html"
  },
  {
    "name": "UADDLB",
    "doc": "Unsigned add long (bottom)",
    "file": "uaddlb_z_zz.html"
  },
  {
    "name": "UADDLP",
    "doc": "Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "uaddlp_advsimd.html"
  },
  {
    "name": "UADDLT",
    "doc": "Unsigned add long (top)",
    "file": "uaddlt_z_zz.html"
  },
  {
    "name": "UADDLV",
    "doc": "Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uaddlv_advsimd.html"
  },
  {
    "name": "UADDL",
    "doc": "Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uaddl_advsimd.html"
  },
  {
    "name": "UADDL2",
    "doc": "Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.",
    "file": "uaddl_advsimd.html"
  },
  {
    "name": "UADDV",
    "doc": "Unsigned add reduction to scalar",
    "file": "uaddv_r_p_z.html"
  },
  {
    "name": "UADDWB",
    "doc": "Unsigned add wide (bottom)",
    "file": "uaddwb_z_zz.html"
  },
  {
    "name": "UADDWT",
    "doc": "Unsigned add wide (top)",
    "file": "uaddwt_z_zz.html"
  },
  {
    "name": "UADDW",
    "doc": "Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.",
    "file": "uaddw_advsimd.html"
  },
  {
    "name": "UADDW2",
    "doc": "Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.",
    "file": "uaddw_advsimd.html"
  },
  {
    "name": "UBFIZ",
    "doc": "Unsigned Bitfield Insert in Zeros copies a bitfield of &lt;width&gt; bits from the least significant bits of the source register to bit position &lt;lsb&gt; of the destination register, setting the destination bits above and below the bitfield to zero.",
    "file": "ubfiz_ubfm.html"
  },
  {
    "name": "UBFM",
    "doc": "Unsigned Bitfield Move is usually accessed via one of its aliases, which are always preferred for disassembly.",
    "file": "ubfm.html"
  },
  {
    "name": "UBFX",
    "doc": "Unsigned Bitfield Extract copies a bitfield of &lt;width&gt; bits starting from bit position &lt;lsb&gt; in the source register to the least significant bits of the destination register, and sets destination bits above the bitfield to zero.",
    "file": "ubfx_ubfm.html"
  },
  {
    "name": "UCLAMP",
    "doc": "Multi-vector unsigned clamp to minimum/maximum vector",
    "file": "uclamp_mz_zz.html"
  },
  {
    "name": "UCVTF",
    "doc": "Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.",
    "file": "ucvtf_advsimd_fix.html"
  },
  {
    "name": "UDF",
    "doc": "Permanently Undefined generates an Undefined Instruction exception (ESR_ELx.EC = 0b000000). The encodings for UDF used in this section are defined as permanently undefined.",
    "file": "udf_perm_undef.html"
  },
  {
    "name": "UDIV",
    "doc": "Unsigned Divide divides an unsigned integer register value by another unsigned integer register value, and writes the result to the destination register. The condition flags are not affected.",
    "file": "udiv.html"
  },
  {
    "name": "UDIVR",
    "doc": "Unsigned reversed divide (predicated)",
    "file": "udivr_z_p_zz.html"
  },
  {
    "name": "UDOT",
    "doc": "Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "udot_advsimd_elt.html"
  },
  {
    "name": "UHADD",
    "doc": "Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uhadd_advsimd.html"
  },
  {
    "name": "UHSUBR",
    "doc": "Unsigned halving subtract reversed vectors",
    "file": "uhsubr_z_p_zz.html"
  },
  {
    "name": "UHSUB",
    "doc": "Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uhsub_advsimd.html"
  },
  {
    "name": "UMADDL",
    "doc": "Unsigned Multiply-Add Long multiplies two 32-bit register values, adds a 64-bit register value, and writes the result to the 64-bit destination register.",
    "file": "umaddl.html"
  },
  {
    "name": "UMAXP",
    "doc": "Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "umaxp_advsimd.html"
  },
  {
    "name": "UMAXQV",
    "doc": "Unsigned maximum reduction of quadword vector segments",
    "file": "umaxqv_z_p_z.html"
  },
  {
    "name": "UMAXV",
    "doc": "Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "umaxv_advsimd.html"
  },
  {
    "name": "UMAX",
    "doc": "Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "umax_advsimd.html"
  },
  {
    "name": "UMINP",
    "doc": "Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uminp_advsimd.html"
  },
  {
    "name": "UMINQV",
    "doc": "Unsigned minimum reduction of quadword vector segments",
    "file": "uminqv_z_p_z.html"
  },
  {
    "name": "UMINV",
    "doc": "Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "uminv_advsimd.html"
  },
  {
    "name": "UMIN",
    "doc": "Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "umin_advsimd.html"
  },
  {
    "name": "UMLALB",
    "doc": "Unsigned multiply-add long to accumulator (bottom)",
    "file": "umlalb_z_zzz.html"
  },
  {
    "name": "UMLALL",
    "doc": "Multi-vector unsigned integer multiply-add long-long by indexed element",
    "file": "umlall_za_zzi.html"
  },
  {
    "name": "UMLALT",
    "doc": "Unsigned multiply-add long to accumulator (top)",
    "file": "umlalt_z_zzz.html"
  },
  {
    "name": "UMLAL",
    "doc": "Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umlal_advsimd_elt.html"
  },
  {
    "name": "UMLAL2",
    "doc": "Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umlal_advsimd_elt.html"
  },
  {
    "name": "UMLSLB",
    "doc": "Unsigned multiply-subtract long from accumulator (bottom)",
    "file": "umlslb_z_zzz.html"
  },
  {
    "name": "UMLSLL",
    "doc": "Multi-vector unsigned integer multiply-subtract long-long by indexed element",
    "file": "umlsll_za_zzi.html"
  },
  {
    "name": "UMLSLT",
    "doc": "Unsigned multiply-subtract long from accumulator (top)",
    "file": "umlslt_z_zzz.html"
  },
  {
    "name": "UMLSL",
    "doc": "Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umlsl_advsimd_elt.html"
  },
  {
    "name": "UMLSL2",
    "doc": "Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umlsl_advsimd_elt.html"
  },
  {
    "name": "UMMLA",
    "doc": "Unsigned 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of unsigned 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "ummla_advsimd_vec.html"
  },
  {
    "name": "UMNEGL",
    "doc": "Unsigned Multiply-Negate Long multiplies two 32-bit register values, negates the product, and writes the result to the 64-bit destination register.",
    "file": "umnegl_umsubl.html"
  },
  {
    "name": "UMOPA",
    "doc": "Unsigned integer sum of outer products and accumulate",
    "file": "umopa_za32_pp_zz.html"
  },
  {
    "name": "UMOPS",
    "doc": "Unsigned integer sum of outer products and subtract",
    "file": "umops_za32_pp_zz.html"
  },
  {
    "name": "UMOV",
    "doc": "Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.",
    "file": "umov_advsimd.html"
  },
  {
    "name": "UMSUBL",
    "doc": "Unsigned Multiply-Subtract Long multiplies two 32-bit register values, subtracts the product from a 64-bit register value, and writes the result to the 64-bit destination register.",
    "file": "umsubl.html"
  },
  {
    "name": "UMULH",
    "doc": "Unsigned Multiply High multiplies two 64-bit register values, and writes bits[127:64] of the 128-bit result to the 64-bit destination register.",
    "file": "umulh.html"
  },
  {
    "name": "UMULLB",
    "doc": "Unsigned multiply long (bottom)",
    "file": "umullb_z_zz.html"
  },
  {
    "name": "UMULLT",
    "doc": "Unsigned multiply long (top)",
    "file": "umullt_z_zz.html"
  },
  {
    "name": "UMULL",
    "doc": "Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umull_advsimd_elt.html"
  },
  {
    "name": "UMULL2",
    "doc": "Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "umull_advsimd_elt.html"
  },
  {
    "name": "UQADD",
    "doc": "Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uqadd_advsimd.html"
  },
  {
    "name": "UQCVTN",
    "doc": "Unsigned saturating extract narrow and interleave",
    "file": "uqcvtn_z_mz2.html"
  },
  {
    "name": "UQCVT",
    "doc": "Multi-vector unsigned saturating extract narrow",
    "file": "uqcvt_z_mz2.html"
  },
  {
    "name": "UQDECB",
    "doc": "Unsigned saturating decrement scalar by multiple of 8-bit predicate constraint element count",
    "file": "uqdecb_r_rs.html"
  },
  {
    "name": "UQDECD",
    "doc": "Unsigned saturating decrement scalar by multiple of 64-bit predicate constraint element count",
    "file": "uqdecd_r_rs.html"
  },
  {
    "name": "UQDECH",
    "doc": "Unsigned saturating decrement scalar by multiple of 16-bit predicate constraint element count",
    "file": "uqdech_r_rs.html"
  },
  {
    "name": "UQDECP",
    "doc": "Unsigned saturating decrement scalar by count of true predicate elements",
    "file": "uqdecp_r_p_r.html"
  },
  {
    "name": "UQDECW",
    "doc": "Unsigned saturating decrement scalar by multiple of 32-bit predicate constraint element count",
    "file": "uqdecw_r_rs.html"
  },
  {
    "name": "UQINCB",
    "doc": "Unsigned saturating increment scalar by multiple of 8-bit predicate constraint element count",
    "file": "uqincb_r_rs.html"
  },
  {
    "name": "UQINCD",
    "doc": "Unsigned saturating increment scalar by multiple of 64-bit predicate constraint element count",
    "file": "uqincd_r_rs.html"
  },
  {
    "name": "UQINCH",
    "doc": "Unsigned saturating increment scalar by multiple of 16-bit predicate constraint element count",
    "file": "uqinch_r_rs.html"
  },
  {
    "name": "UQINCP",
    "doc": "Unsigned saturating increment scalar by count of true predicate elements",
    "file": "uqincp_r_p_r.html"
  },
  {
    "name": "UQINCW",
    "doc": "Unsigned saturating increment scalar by multiple of 32-bit predicate constraint element count",
    "file": "uqincw_r_rs.html"
  },
  {
    "name": "UQRSHLR",
    "doc": "Unsigned saturating rounding shift left reversed vectors (predicated)",
    "file": "uqrshlr_z_p_zz.html"
  },
  {
    "name": "UQRSHL",
    "doc": "Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uqrshl_advsimd.html"
  },
  {
    "name": "UQRSHRNB",
    "doc": "Unsigned saturating rounding shift right narrow by immediate (bottom)",
    "file": "uqrshrnb_z_zi.html"
  },
  {
    "name": "UQRSHRNT",
    "doc": "Unsigned saturating rounding shift right narrow by immediate (top)",
    "file": "uqrshrnt_z_zi.html"
  },
  {
    "name": "UQRSHRN",
    "doc": "Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.",
    "file": "uqrshrn_advsimd.html"
  },
  {
    "name": "UQRSHRN2",
    "doc": "Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.",
    "file": "uqrshrn_advsimd.html"
  },
  {
    "name": "UQRSHR",
    "doc": "Multi-vector unsigned saturating rounding shift right narrow by immediate",
    "file": "uqrshr_z_mz2.html"
  },
  {
    "name": "UQSHLR",
    "doc": "Unsigned saturating shift left reversed vectors (predicated)",
    "file": "uqshlr_z_p_zz.html"
  },
  {
    "name": "UQSHL",
    "doc": "Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.",
    "file": "uqshl_advsimd_imm.html"
  },
  {
    "name": "UQSHRNB",
    "doc": "Unsigned saturating shift right narrow by immediate (bottom)",
    "file": "uqshrnb_z_zi.html"
  },
  {
    "name": "UQSHRNT",
    "doc": "Unsigned saturating shift right narrow by immediate (top)",
    "file": "uqshrnt_z_zi.html"
  },
  {
    "name": "UQSHRN",
    "doc": "Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.",
    "file": "uqshrn_advsimd.html"
  },
  {
    "name": "UQSHRN2",
    "doc": "Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.",
    "file": "uqshrn_advsimd.html"
  },
  {
    "name": "UQSUBR",
    "doc": "Unsigned saturating subtraction reversed vectors (predicated)",
    "file": "uqsubr_z_p_zz.html"
  },
  {
    "name": "UQSUB",
    "doc": "Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uqsub_advsimd.html"
  },
  {
    "name": "UQXTNB",
    "doc": "Unsigned saturating extract narrow (bottom)",
    "file": "uqxtnb_z_zz.html"
  },
  {
    "name": "UQXTNT",
    "doc": "Unsigned saturating extract narrow (top)",
    "file": "uqxtnt_z_zz.html"
  },
  {
    "name": "UQXTN",
    "doc": "Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "uqxtn_advsimd.html"
  },
  {
    "name": "UQXTN2",
    "doc": "Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "uqxtn_advsimd.html"
  },
  {
    "name": "URECPE",
    "doc": "Unsigned Reciprocal Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse for the unsigned integer value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "urecpe_advsimd.html"
  },
  {
    "name": "URHADD",
    "doc": "Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "urhadd_advsimd.html"
  },
  {
    "name": "URSHLR",
    "doc": "Unsigned rounding shift left reversed vectors (predicated)",
    "file": "urshlr_z_p_zz.html"
  },
  {
    "name": "URSHL",
    "doc": "Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "urshl_advsimd.html"
  },
  {
    "name": "URSHR",
    "doc": "Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.",
    "file": "urshr_advsimd.html"
  },
  {
    "name": "URSQRTE",
    "doc": "Unsigned Reciprocal Square Root Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse square root for each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.",
    "file": "ursqrte_advsimd.html"
  },
  {
    "name": "URSRA",
    "doc": "Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.",
    "file": "ursra_advsimd.html"
  },
  {
    "name": "USDOT",
    "doc": "Dot Product index form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "usdot_advsimd_elt.html"
  },
  {
    "name": "USHLLB",
    "doc": "Unsigned shift left long by immediate (bottom)",
    "file": "ushllb_z_zi.html"
  },
  {
    "name": "USHLLT",
    "doc": "Unsigned shift left long by immediate (top)",
    "file": "ushllt_z_zi.html"
  },
  {
    "name": "USHLL",
    "doc": "Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "ushll_advsimd.html"
  },
  {
    "name": "USHLL2",
    "doc": "Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "ushll_advsimd.html"
  },
  {
    "name": "USHL",
    "doc": "Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "ushl_advsimd.html"
  },
  {
    "name": "USHR",
    "doc": "Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.",
    "file": "ushr_advsimd.html"
  },
  {
    "name": "USMLALL",
    "doc": "Multi-vector unsigned by signed integer multiply-add long-long by indexed element",
    "file": "usmlall_za_zzi.html"
  },
  {
    "name": "USMMLA",
    "doc": "Unsigned and signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "usmmla_advsimd_vec.html"
  },
  {
    "name": "USMOPA",
    "doc": "Unsigned by signed integer sum of outer products and accumulate",
    "file": "usmopa_za_pp_zz.html"
  },
  {
    "name": "USMOPS",
    "doc": "Unsigned by signed integer sum of outer products and subtract",
    "file": "usmops_za_pp_zz.html"
  },
  {
    "name": "USQADD",
    "doc": "Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.",
    "file": "usqadd_advsimd.html"
  },
  {
    "name": "USRA",
    "doc": "Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.",
    "file": "usra_advsimd.html"
  },
  {
    "name": "USUBLB",
    "doc": "Unsigned subtract long (bottom)",
    "file": "usublb_z_zz.html"
  },
  {
    "name": "USUBLT",
    "doc": "Unsigned subtract long (top)",
    "file": "usublt_z_zz.html"
  },
  {
    "name": "USUBL",
    "doc": "Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.",
    "file": "usubl_advsimd.html"
  },
  {
    "name": "USUBL2",
    "doc": "Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.",
    "file": "usubl_advsimd.html"
  },
  {
    "name": "USUBWB",
    "doc": "Unsigned subtract wide (bottom)",
    "file": "usubwb_z_zz.html"
  },
  {
    "name": "USUBWT",
    "doc": "Unsigned subtract wide (top)",
    "file": "usubwt_z_zz.html"
  },
  {
    "name": "USUBW",
    "doc": "Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are unsigned integer values.",
    "file": "usubw_advsimd.html"
  },
  {
    "name": "USUBW2",
    "doc": "Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are unsigned integer values.",
    "file": "usubw_advsimd.html"
  },
  {
    "name": "USVDOT",
    "doc": "Multi-vector unsigned by signed integer vertical dot-product by indexed element",
    "file": "usvdot_za_zzi.html"
  },
  {
    "name": "UUNPKHI",
    "doc": "Unsigned unpack and extend half of vector",
    "file": "uunpkhi_z_z.html"
  },
  {
    "name": "UUNPKLO",
    "doc": "Unsigned unpack and extend half of vector",
    "file": "uunpkhi_z_z.html"
  },
  {
    "name": "UUNPK",
    "doc": "Unpack and zero-extend multi-vector elements",
    "file": "uunpk_mz_z.html"
  },
  {
    "name": "UVDOT",
    "doc": "Multi-vector unsigned integer vertical dot-product by indexed element",
    "file": "uvdot_za32_zzi.html"
  },
  {
    "name": "UXTB",
    "doc": "Unsigned Extend Byte extracts an 8-bit value from a register, zero-extends it to the size of the register, and writes the result to the destination register.",
    "file": "uxtb_ubfm.html"
  },
  {
    "name": "UXTH",
    "doc": "Unsigned byte / halfword / word extend (predicated)",
    "file": "uxtb_z_p_z.html"
  },
  {
    "name": "UXTW",
    "doc": "Unsigned byte / halfword / word extend (predicated)",
    "file": "uxtb_z_p_z.html"
  },
  {
    "name": "UXTL",
    "doc": "Unsigned extend Long. This instruction copies each vector element from the lower or upper half of the source SIMD&amp;FP register into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "uxtl_ushll_advsimd.html"
  },
  {
    "name": "UXTL2",
    "doc": "Unsigned extend Long. This instruction copies each vector element from the lower or upper half of the source SIMD&amp;FP register into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.",
    "file": "uxtl_ushll_advsimd.html"
  },
  {
    "name": "UZP1",
    "doc": "Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.",
    "file": "uzp1_advsimd.html"
  },
  {
    "name": "UZP2",
    "doc": "Concatenate even or odd elements from two predicates",
    "file": "uzp1_p_pp.html"
  },
  {
    "name": "UZPQ1",
    "doc": "Concatenate even elements within each pair of quadword vector segments",
    "file": "uzpq1_z_zz.html"
  },
  {
    "name": "UZPQ2",
    "doc": "Concatenate odd elements within each pair of quadword vector segments",
    "file": "uzpq2_z_zz.html"
  },
  {
    "name": "UZP",
    "doc": "Concatenate elements from four vectors",
    "file": "uzp_mz_z.html"
  },
  {
    "name": "WFE",
    "doc": "Wait For Event is a hint instruction that indicates that the PE can enter a low-power state and remain there until a wakeup event occurs. Wakeup events include the event signaled as a result of executing the SEV instruction on any PE in the multiprocessor system. For more information, see Wait For Event mechanism and Send event.",
    "file": "wfe.html"
  },
  {
    "name": "WFET",
    "doc": "Wait For Event with Timeout is a hint instruction that indicates that the PE can enter a low-power state and remain there until either a local timeout event or a wakeup event occurs. Wakeup events include the event signaled as a result of executing the SEV instruction on any PE in the multiprocessor system. For more information, see Wait For Event mechanism and Send event.",
    "file": "wfet.html"
  },
  {
    "name": "WFI",
    "doc": "Wait For Interrupt is a hint instruction that indicates that the PE can enter a low-power state and remain there until a wakeup event occurs. For more information, see Wait For Interrupt.",
    "file": "wfi.html"
  },
  {
    "name": "WFIT",
    "doc": "Wait For Interrupt with Timeout is a hint instruction that indicates that the PE can enter a low-power state and remain there until either a local timeout event or a wakeup event occurs. For more information, see Wait For Interrupt.",
    "file": "wfit.html"
  },
  {
    "name": "WHILEGE",
    "doc": "While decrementing signed scalar greater than or equal to scalar (predicate-as-counter)",
    "file": "whilege_pn_rr.html"
  },
  {
    "name": "WHILEGT",
    "doc": "While decrementing signed scalar greater than scalar (predicate-as-counter)",
    "file": "whilegt_pn_rr.html"
  },
  {
    "name": "WHILEHI",
    "doc": "While decrementing unsigned scalar higher than scalar (predicate-as-counter)",
    "file": "whilehi_pn_rr.html"
  },
  {
    "name": "WHILEHS",
    "doc": "While decrementing unsigned scalar higher or same as scalar (predicate-as-counter)",
    "file": "whilehs_pn_rr.html"
  },
  {
    "name": "WHILELE",
    "doc": "While incrementing signed scalar less than or equal to scalar (predicate-as-counter)",
    "file": "whilele_pn_rr.html"
  },
  {
    "name": "WHILELO",
    "doc": "While incrementing unsigned scalar lower than scalar (predicate-as-counter)",
    "file": "whilelo_pn_rr.html"
  },
  {
    "name": "WHILELS",
    "doc": "While incrementing unsigned scalar lower or same as scalar (predicate-as-counter)",
    "file": "whilels_pn_rr.html"
  },
  {
    "name": "WHILELT",
    "doc": "While incrementing signed scalar less than scalar (predicate-as-counter)",
    "file": "whilelt_pn_rr.html"
  },
  {
    "name": "WHILERW",
    "doc": "While free of read-after-write conflicts",
    "file": "whilerw_p_rr.html"
  },
  {
    "name": "WHILEWR",
    "doc": "While free of write-after-read/write conflicts",
    "file": "whilewr_p_rr.html"
  },
  {
    "name": "WRFFR",
    "doc": "Write the first-fault register",
    "file": "wrffr_f_p.html"
  },
  {
    "name": "XAFLAG",
    "doc": "Convert floating-point condition flags from external format to Arm format. This instruction converts the state of the PSTATE.{N,Z,C,V} flags from an alternative representation required by some software to a form representing the result of an Arm floating-point scalar compare instruction.",
    "file": "xaflag.html"
  },
  {
    "name": "XAR",
    "doc": "Exclusive-OR and Rotate performs a bitwise exclusive-OR of the 128-bit vectors in the two source SIMD&amp;FP registers, rotates each 64-bit element of the resulting 128-bit vector right by the value specified by a 6-bit immediate value, and writes the result to the destination SIMD&amp;FP register.",
    "file": "xar_advsimd.html"
  },
  {
    "name": "XPACD",
    "doc": "Strip Pointer Authentication Code. This instruction removes the pointer authentication code from an address. The address is in the specified general-purpose register for XPACI and XPACD, and is in LR for XPACLRI.",
    "file": "xpac.html"
  },
  {
    "name": "XPACI",
    "doc": "Strip Pointer Authentication Code. This instruction removes the pointer authentication code from an address. The address is in the specified general-purpose register for XPACI and XPACD, and is in LR for XPACLRI.",
    "file": "xpac.html"
  },
  {
    "name": "XPACLRI",
    "doc": "Strip Pointer Authentication Code. This instruction removes the pointer authentication code from an address. The address is in the specified general-purpose register for XPACI and XPACD, and is in LR for XPACLRI.",
    "file": "xpac.html"
  },
  {
    "name": "XTN",
    "doc": "Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.",
    "file": "xtn_advsimd.html"
  },
  {
    "name": "XTN2",
    "doc": "Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.",
    "file": "xtn_advsimd.html"
  },
  {
    "name": "YIELD",
    "doc": "YIELD is a hint instruction. Software with a multithreading capability can use a YIELD instruction to indicate to the PE that it is performing a task, for example a spin-lock, that could be swapped out to improve overall system performance. The PE can use this hint to suspend and resume multiple software threads if it supports the capability.",
    "file": "yield.html"
  },
  {
    "name": "ZERO",
    "doc": "Zero ZA single-vector groups",
    "file": "zero_za1_ri.html"
  },
  {
    "name": "ZIP1",
    "doc": "Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.",
    "file": "zip1_advsimd.html"
  },
  {
    "name": "ZIP2",
    "doc": "Interleave elements from two half predicates",
    "file": "zip1_p_pp.html"
  },
  {
    "name": "ZIPQ1",
    "doc": "Interleave elements from low halves of each pair of quadword vector segments",
    "file": "zipq1_z_zz.html"
  },
  {
    "name": "ZIPQ2",
    "doc": "Interleave elements from high halves of each pair of quadword vector segments",
    "file": "zipq2_z_zz.html"
  },
  {
    "name": "ZIP",
    "doc": "Interleave elements from four vectors",
    "file": "zip_mz_z.html"
  }
]
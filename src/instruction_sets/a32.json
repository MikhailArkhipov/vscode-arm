{
  "ADC": {
    "doc": "Add with Carry (immediate) adds an immediate value and the Carry flag value to a register value, and writes the result to the destination register.",
    "file": "adc_i.html"
  },
  "ADCS": {
    "doc": "Add with Carry (immediate) adds an immediate value and the Carry flag value to a register value, and writes the result to the destination register.",
    "file": "adc_i.html"
  },
  "ADD": {
    "doc": "Add to PC adds an immediate value to the Align(PC, 4) value to form a PC-relative address, and writes the result to the destination register.  Arm recommends that, where possible, software avoids using this alias.",
    "file": "add_adr.html"
  },
  "ADDS": {
    "doc": "Add (immediate) adds an immediate value to a register value, and writes the result to the destination register.",
    "file": "add_i.html"
  },
  "SP": {
    "doc": "Add to SP (immediate) adds an immediate value to the SP value, and writes the result to the destination register.",
    "file": "add_sp_i.html"
  },
  "ADR": {
    "doc": "Form PC-relative address adds an immediate value to the PC value to form a PC-relative address, and writes the result to the destination register.",
    "file": "adr.html"
  },
  "AESD": {
    "doc": "AES single round decryption.",
    "file": "aesd.html"
  },
  "AESE": {
    "doc": "AES single round encryption.",
    "file": "aese.html"
  },
  "AESIMC": {
    "doc": "AES inverse mix columns.",
    "file": "aesimc.html"
  },
  "AESMC": {
    "doc": "AES mix columns.",
    "file": "aesmc.html"
  },
  "AND": {
    "doc": "Bitwise AND (immediate) performs a bitwise AND of a register value and an immediate value, and writes the result to the destination register.",
    "file": "and_i.html"
  },
  "ANDS": {
    "doc": "Bitwise AND (immediate) performs a bitwise AND of a register value and an immediate value, and writes the result to the destination register.",
    "file": "and_i.html"
  },
  "ASRS": {
    "doc": "Arithmetic Shift Right, setting flags (immediate) shifts a register value right by an immediate number of bits, shifting in copies of its sign bit, and writes the result to the destination register.",
    "file": "asrs_mov_r.html"
  },
  "ASR": {
    "doc": "Arithmetic Shift Right (immediate) shifts a register value right by an immediate number of bits, shifting in copies of its sign bit, and writes the result to the destination register.",
    "file": "asr_mov_r.html"
  },
  "B": {
    "doc": "Branch causes a branch to a target address.",
    "file": "b.html"
  },
  "BFC": {
    "doc": "Bit Field Clear clears any number of adjacent bits at any position in a register, without affecting the other bits in the register.",
    "file": "bfc.html"
  },
  "BFI": {
    "doc": "Bit Field Insert copies any number of low order bits from a register into the same number of adjacent bits at any position in the destination register.",
    "file": "bfi.html"
  },
  "BIC": {
    "doc": "Bitwise Bit Clear (immediate) performs a bitwise AND of a register value and the complement of an immediate value, and writes the result to the destination register.",
    "file": "bic_i.html"
  },
  "BICS": {
    "doc": "Bitwise Bit Clear (immediate) performs a bitwise AND of a register value and the complement of an immediate value, and writes the result to the destination register.",
    "file": "bic_i.html"
  },
  "BKPT": {
    "doc": "Breakpoint causes a Breakpoint Instruction exception.",
    "file": "bkpt.html"
  },
  "BLX": {
    "doc": "Branch with Link and Exchange (register) calls a subroutine at an address specified in the register, and if necessary changes to the instruction set indicated by bit[0] of the register value. If the value in bit[0] is 0, the instruction set after the branch will be A32. If the value in bit[0] is 1, the instruction set after the branch will be T32.",
    "file": "blx_r.html"
  },
  "BL": {
    "doc": "Branch with Link calls a subroutine at a PC-relative address, and setting LR to the return address.",
    "file": "bl_i.html"
  },
  "BX": {
    "doc": "Branch and Exchange causes a branch to an address and instruction set\n      specified by a register.",
    "file": "bx.html"
  },
  "BXJ": {
    "doc": "Branch and Exchange, previously Branch and Exchange Jazelle.",
    "file": "bxj.html"
  },
  "CBNZ": {
    "doc": "Compare and Branch on Nonzero and Compare and Branch on Zero compare the value in a register with zero, and conditionally branch forward a constant value. They do not affect the condition flags.",
    "file": "cbnz.html"
  },
  "CBZ": {
    "doc": "Compare and Branch on Nonzero and Compare and Branch on Zero compare the value in a register with zero, and conditionally branch forward a constant value. They do not affect the condition flags.",
    "file": "cbnz.html"
  },
  "CLRBHB": {
    "doc": "Clear Branch History clears the branch history for the current context to the extent that branch history information created before the CLRBHB instruction cannot be used by code before the CLRBHB instruction to exploitatively control the execution of any indirect branches in code in the current context that appear in program order after the instruction.",
    "file": "clrbhb.html"
  },
  "CLREX": {
    "doc": "Clear-Exclusive clears the local monitor of the executing PE.",
    "file": "clrex.html"
  },
  "CLZ": {
    "doc": "Count Leading Zeros returns the number of binary zero bits before the first binary one bit in a value.",
    "file": "clz.html"
  },
  "CMN": {
    "doc": "Compare Negative (immediate) adds a register value and an immediate value. It updates the condition flags based on the result, and discards the result.",
    "file": "cmn_i.html"
  },
  "CMP": {
    "doc": "Compare (immediate) subtracts an immediate value from a register value. It updates the condition flags based on the result, and discards the result.",
    "file": "cmp_i.html"
  },
  "CPS": {
    "doc": "Change PE State changes one or more of the PSTATE.{A, I, F} interrupt mask bits and, optionally, the PSTATE.M mode field, without changing any other PSTATE bits.",
    "file": "cps.html"
  },
  "CPSID": {
    "doc": "Change PE State changes one or more of the PSTATE.{A, I, F} interrupt mask bits and, optionally, the PSTATE.M mode field, without changing any other PSTATE bits.",
    "file": "cps.html"
  },
  "CPSIE": {
    "doc": "Change PE State changes one or more of the PSTATE.{A, I, F} interrupt mask bits and, optionally, the PSTATE.M mode field, without changing any other PSTATE bits.",
    "file": "cps.html"
  },
  "CRC32": {
    "doc": "CRC32 performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, or 32 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.",
    "file": "crc32.html"
  },
  "CRC32C": {
    "doc": "CRC32C performs a cyclic redundancy check\n      (CRC) calculation on a value held in a general-purpose register. It takes\n      an input CRC value in the first source operand, performs a CRC on the\n      input value in the second source operand, and returns the output CRC\n      value. The second source operand can be 8, 16, or 32 bits. To align with\n      common usage, the bit order of the values is reversed as part of the\n      operation, and the polynomial 0x1EDC6F41 is used for the CRC calculation.",
    "file": "crc32c.html"
  },
  "CSDB": {
    "doc": "Consumption of Speculative Data Barrier is a memory barrier that controls speculative execution and data value prediction.",
    "file": "csdb.html"
  },
  "DBG": {
    "doc": "DBG executes as a NOP. Arm deprecates any use of the DBG instruction.",
    "file": "dbg.html"
  },
  "DCPS1": {
    "doc": "Debug Change PE State to EL1 allows the debugger to move the PE into EL1 from EL0 or to a specific mode at the current Exception level.",
    "file": "dcps1.html"
  },
  "DCPS2": {
    "doc": "Debug Change PE State to EL2 allows the debugger to move the PE into EL2 from a lower Exception level.",
    "file": "dcps2.html"
  },
  "DCPS3": {
    "doc": "Debug Change PE State to EL3 allows the debugger to move the PE into EL3 from a lower Exception level or to a specific mode at the current Exception level.",
    "file": "dcps3.html"
  },
  "DMB": {
    "doc": "Data Memory Barrier is a memory barrier that ensures the ordering of observations of memory accesses, see Data Memory Barrier (DMB).",
    "file": "dmb.html"
  },
  "DSB": {
    "doc": "Data Synchronization Barrier is a memory barrier that ensures the completion of memory accesses, see Data Synchronization Barrier (DSB).",
    "file": "dsb.html"
  },
  "EOR": {
    "doc": "Bitwise Exclusive-OR (immediate) performs a bitwise exclusive-OR of a register value and an immediate value, and writes the result to the destination register.",
    "file": "eor_i.html"
  },
  "EORS": {
    "doc": "Bitwise Exclusive-OR (immediate) performs a bitwise exclusive-OR of a register value and an immediate value, and writes the result to the destination register.",
    "file": "eor_i.html"
  },
  "ERET": {
    "doc": "Exception Return.",
    "file": "eret.html"
  },
  "ESB": {
    "doc": "Error Synchronization Barrier is an error synchronization event that might also update DISR and VDISR. This instruction can be used at all Exception levels and in Debug state.",
    "file": "esb.html"
  },
  "FLDM": {
    "doc": "FLDMDBX is the Decrement Before variant of this instruction, and FLDMIAX is the Increment After variant. FLDM*X loads multiple SIMD&amp;FP registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "fldmx.html"
  },
  "X": {
    "doc": "FLDMDBX is the Decrement Before variant of this instruction, and FLDMIAX is the Increment After variant. FLDM*X loads multiple SIMD&amp;FP registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "fldmx.html"
  },
  "FLDMDBX": {
    "doc": "FLDMDBX is the Decrement Before variant of this instruction, and FLDMIAX is the Increment After variant. FLDM*X loads multiple SIMD&amp;FP registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "fldmx.html"
  },
  "FLDMIAX": {
    "doc": "FLDMDBX is the Decrement Before variant of this instruction, and FLDMIAX is the Increment After variant. FLDM*X loads multiple SIMD&amp;FP registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "fldmx.html"
  },
  "FSTMDBX": {
    "doc": "FSTMX stores multiple SIMD&amp;FP registers from the Advanced SIMD and floating-point register file to consecutive locations in using an address from a general-purpose register.",
    "file": "fstmx.html"
  },
  "FSTMIAX": {
    "doc": "FSTMX stores multiple SIMD&amp;FP registers from the Advanced SIMD and floating-point register file to consecutive locations in using an address from a general-purpose register.",
    "file": "fstmx.html"
  },
  "HLT": {
    "doc": "Halting breakpoint causes a software breakpoint to occur.",
    "file": "hlt.html"
  },
  "HVC": {
    "doc": "Hypervisor Call causes a Hypervisor Call exception. For more information, see Hypervisor Call (HVC) exception. Software executing at EL1 can use this instruction to call the hypervisor to request a service.",
    "file": "hvc.html"
  },
  "ISB": {
    "doc": "Instruction Synchronization Barrier flushes the pipeline in the PE and is a context synchronization event. For more information, see Instruction Synchronization Barrier (ISB).",
    "file": "isb.html"
  },
  "IT": {
    "doc": "If-Then makes up to four following instructions (the IT block) conditional. The conditions for the instructions in the IT block are the same as, or the inverse of, the condition the IT instruction specifies for the first instruction in the block.",
    "file": "it.html"
  },
  "LDA": {
    "doc": "Load-Acquire Word loads a word from memory and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release",
    "file": "lda.html"
  },
  "LDAB": {
    "doc": "Load-Acquire Byte loads a byte from memory, zero-extends it to form a 32-bit word and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release.",
    "file": "ldab.html"
  },
  "LDAEX": {
    "doc": "Load-Acquire Exclusive Word loads a word from memory, writes it to a register and:",
    "file": "ldaex.html"
  },
  "LDAEXB": {
    "doc": "Load-Acquire Exclusive Byte loads a byte from memory, zero-extends it to form a 32-bit word, writes it to a register and:",
    "file": "ldaexb.html"
  },
  "LDAEXD": {
    "doc": "Load-Acquire Exclusive Doubleword loads a doubleword from memory, writes it to two registers and:",
    "file": "ldaexd.html"
  },
  "LDAEXH": {
    "doc": "Load-Acquire Exclusive Halfword loads a halfword from memory, zero-extends it to form a 32-bit word, writes it to a register and:",
    "file": "ldaexh.html"
  },
  "LDAH": {
    "doc": "Load-Acquire Halfword loads a halfword from memory, zero-extends it to form a 32-bit word and writes it to a register. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release.",
    "file": "ldah.html"
  },
  "LDC": {
    "doc": "Load data to System register (immediate) calculates an address from a base register value and an immediate offset, loads a word from memory, and writes it to the DBGDTRTXint System register. It can use offset, post-indexed, pre-indexed, or unindexed addressing. For information about memory accesses see Memory accesses.",
    "file": "ldc_i.html"
  },
  "LDM": {
    "doc": "Load Multiple (Increment After, Full Descending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the highest of those locations can optionally be written back to the base register.",
    "file": "ldm.html"
  },
  "LDMIA": {
    "doc": "Load Multiple (Increment After, Full Descending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the highest of those locations can optionally be written back to the base register.",
    "file": "ldm.html"
  },
  "LDMFD": {
    "doc": "Load Multiple (Increment After, Full Descending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the highest of those locations can optionally be written back to the base register.",
    "file": "ldm.html"
  },
  "LDMDA": {
    "doc": "Load Multiple Decrement After (Full Ascending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations end at this address, and the address just below the lowest of those locations can optionally be written back to the base register.",
    "file": "ldmda.html"
  },
  "LDMFA": {
    "doc": "Load Multiple Decrement After (Full Ascending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations end at this address, and the address just below the lowest of those locations can optionally be written back to the base register.",
    "file": "ldmda.html"
  },
  "LDMDB": {
    "doc": "Load Multiple Decrement Before (Empty Ascending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations end just below this address, and the address of the lowest of those locations can optionally be written back to the base register.",
    "file": "ldmdb.html"
  },
  "LDMEA": {
    "doc": "Load Multiple Decrement Before (Empty Ascending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations end just below this address, and the address of the lowest of those locations can optionally be written back to the base register.",
    "file": "ldmdb.html"
  },
  "LDMIB": {
    "doc": "Load Multiple Increment Before (Empty Descending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations start just above this address, and the address of the last of those locations can optionally be written back to the base register.",
    "file": "ldmib.html"
  },
  "LDMED": {
    "doc": "Load Multiple Increment Before (Empty Descending) loads multiple registers from consecutive memory locations using an address from a base register. The consecutive memory locations start just above this address, and the address of the last of those locations can optionally be written back to the base register.",
    "file": "ldmib.html"
  },
  "U": {
    "doc": "In an EL1 mode other than System mode, Load Multiple (User registers) loads multiple User mode registers from consecutive memory locations using an address from a base register. The registers loaded cannot include the PC. The PE reads the base register value normally, using the current mode to determine the correct Banked version of the register. This instruction cannot writeback to the base register.",
    "file": "ldm_u.html"
  },
  "LDRBT": {
    "doc": "Load Register Byte Unprivileged loads a byte from memory, zero-extends it to form a 32-bit word, and writes it to a register. For information about memory accesses see Memory accesses.",
    "file": "ldrbt.html"
  },
  "LDRB": {
    "doc": "Load Register Byte (immediate) calculates an address from a base register value and an immediate offset, loads a byte from memory, zero-extends it to form a 32-bit word, and writes it to a register. It can use offset, post-indexed, or pre-indexed addressing.  For information about memory accesses see Memory accesses.",
    "file": "ldrb_i.html"
  },
  "LDRD": {
    "doc": "Load Register Dual (immediate) calculates an address from a base register value and an immediate offset, loads two words from memory, and writes them to two registers. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "ldrd_i.html"
  },
  "LDREX": {
    "doc": "Load Register Exclusive calculates an address from a base register value and an immediate offset, loads a word from memory, writes it to a register and:",
    "file": "ldrex.html"
  },
  "LDREXB": {
    "doc": "Load Register Exclusive Byte derives an address from a base register value, loads a byte from memory, zero-extends it to form a 32-bit word, writes it to a register and:",
    "file": "ldrexb.html"
  },
  "LDREXD": {
    "doc": "Load Register Exclusive Doubleword derives an address from a base register value, loads a 64-bit doubleword from memory, writes it to two registers and:",
    "file": "ldrexd.html"
  },
  "LDREXH": {
    "doc": "Load Register Exclusive Halfword derives an address from a base register value, loads a halfword from memory, zero-extends it to form a 32-bit word, writes it to a register and:",
    "file": "ldrexh.html"
  },
  "LDRHT": {
    "doc": "Load Register Halfword Unprivileged loads a halfword from memory, zero-extends it to form a 32-bit word, and writes it to a register. For information about memory accesses see Memory accesses.",
    "file": "ldrht.html"
  },
  "LDRH": {
    "doc": "Load Register Halfword (immediate) calculates an address from a base register value and an immediate offset, loads a halfword from memory, zero-extends it to form a 32-bit word, and writes it to a register. It can use offset, post-indexed, or pre-indexed addressing.  For information about memory accesses see Memory accesses.",
    "file": "ldrh_i.html"
  },
  "LDRSBT": {
    "doc": "Load Register Signed Byte Unprivileged loads a byte from memory, sign-extends it to form a 32-bit word, and writes it to a register. For information about memory accesses see Memory accesses.",
    "file": "ldrsbt.html"
  },
  "LDRSB": {
    "doc": "Load Register Signed Byte (immediate) calculates an address from a base register value and an immediate offset, loads a byte from memory, sign-extends it to form a 32-bit word, and writes it to a register. It can use offset, post-indexed, or pre-indexed addressing.  For information about memory accesses see Memory accesses.",
    "file": "ldrsb_i.html"
  },
  "LDRSHT": {
    "doc": "Load Register Signed Halfword Unprivileged loads a halfword from memory, sign-extends it to form a 32-bit word, and writes it to a register. For information about memory accesses see Memory accesses.",
    "file": "ldrsht.html"
  },
  "LDRSH": {
    "doc": "Load Register Signed Halfword (immediate) calculates an address from a base register value and an immediate offset, loads a halfword from memory, sign-extends it to form a 32-bit word, and writes it to a register. It can use offset, post-indexed, or pre-indexed addressing.  For information about memory accesses see Memory accesses.",
    "file": "ldrsh_i.html"
  },
  "LDRT": {
    "doc": "Load Register Unprivileged loads a word from memory, and writes it to a register. For information about memory accesses see Memory accesses.",
    "file": "ldrt.html"
  },
  "LDR": {
    "doc": "Load Register (immediate) calculates an address from a base register value and an immediate offset, loads a word from memory, and writes it to a register. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "ldr_i.html"
  },
  "LSLS": {
    "doc": "Logical Shift Left, setting flags (immediate) shifts a register value left by an immediate number of bits, shifting in zeros, and writes the result to the destination register.",
    "file": "lsls_mov_r.html"
  },
  "LSL": {
    "doc": "Logical Shift Left (immediate) shifts a register value left by an immediate number of bits, shifting in zeros, and writes the result to the destination register.",
    "file": "lsl_mov_r.html"
  },
  "LSRS": {
    "doc": "Logical Shift Right, setting flags (immediate) shifts a register value right by an immediate number of bits, shifting in zeros, and writes the result to the destination register.",
    "file": "lsrs_mov_r.html"
  },
  "LSR": {
    "doc": "Logical Shift Right (immediate) shifts a register value right by an immediate number of bits, shifting in zeros, and writes the result to the destination register.",
    "file": "lsr_mov_r.html"
  },
  "MCR": {
    "doc": "Move to System register from general-purpose register or execute a System instruction. This instruction copies the value of a general-purpose register to a System register, or executes a System instruction.",
    "file": "mcr.html"
  },
  "MCRR": {
    "doc": "Move to System register from two general-purpose registers. This instruction copies the values of two general-purpose registers to a System register.",
    "file": "mcrr.html"
  },
  "MLA": {
    "doc": "Multiply Accumulate multiplies two register values, and adds a third register value. The least significant 32 bits of the result are written to the destination register. These 32 bits do not depend on whether the source register values are considered to be signed values or unsigned values.",
    "file": "mla.html"
  },
  "MLAS": {
    "doc": "Multiply Accumulate multiplies two register values, and adds a third register value. The least significant 32 bits of the result are written to the destination register. These 32 bits do not depend on whether the source register values are considered to be signed values or unsigned values.",
    "file": "mla.html"
  },
  "MLS": {
    "doc": "Multiply and Subtract multiplies two register values, and subtracts the product from a third register value. The least significant 32 bits of the result are written to the destination register. These 32 bits do not depend on whether the source register values are considered to be signed values or unsigned values.",
    "file": "mls.html"
  },
  "MOVT": {
    "doc": "Move Top writes an immediate value to the top halfword of the destination register. It does not affect the contents of the bottom halfword.",
    "file": "movt.html"
  },
  "MOV": {
    "doc": "Move (immediate) writes an immediate value to the destination register.",
    "file": "mov_i.html"
  },
  "MOVS": {
    "doc": "Move (immediate) writes an immediate value to the destination register.",
    "file": "mov_i.html"
  },
  "MRC": {
    "doc": "Move to general-purpose register from System register. This instruction copies the value of a System register to a general-purpose register.",
    "file": "mrc.html"
  },
  "MRRC": {
    "doc": "Move to two general-purpose registers from System register. This instruction copies the value of a System register to two general-purpose registers.",
    "file": "mrrc.html"
  },
  "MRS": {
    "doc": "Move Special register to general-purpose register moves the value of the APSR, CPSR, or SPSR_&lt;current_mode&gt; into a general-purpose register.",
    "file": "mrs.html"
  },
  "MSR": {
    "doc": "Move to Banked or Special register from general-purpose register moves the value of a general-purpose register to the Banked general-purpose register or Saved Program Status Registers (SPSRs) of the specified mode, or to ELR_hyp.",
    "file": "msr_br.html"
  },
  "MUL": {
    "doc": "Multiply multiplies two register values. The least significant 32 bits of the result are written to the destination register. These 32 bits do not depend on whether the source register values are considered to be signed values or unsigned values.",
    "file": "mul.html"
  },
  "MULS": {
    "doc": "Multiply multiplies two register values. The least significant 32 bits of the result are written to the destination register. These 32 bits do not depend on whether the source register values are considered to be signed values or unsigned values.",
    "file": "mul.html"
  },
  "MVN": {
    "doc": "Bitwise NOT (immediate) writes the bitwise inverse of an immediate value to the destination register.",
    "file": "mvn_i.html"
  },
  "MVNS": {
    "doc": "Bitwise NOT (immediate) writes the bitwise inverse of an immediate value to the destination register.",
    "file": "mvn_i.html"
  },
  "NOP": {
    "doc": "No Operation does nothing. This instruction can be used for instruction alignment purposes.",
    "file": "nop.html"
  },
  "ORN": {
    "doc": "Bitwise OR NOT (immediate) performs a bitwise (inclusive) OR of a register value and the complement of an immediate value, and writes the result to the destination register. It can optionally update the condition flags based on the result.",
    "file": "orn_i.html"
  },
  "ORNS": {
    "doc": "Bitwise OR NOT (immediate) performs a bitwise (inclusive) OR of a register value and the complement of an immediate value, and writes the result to the destination register. It can optionally update the condition flags based on the result.",
    "file": "orn_i.html"
  },
  "ORR": {
    "doc": "Bitwise OR (immediate) performs a bitwise (inclusive) OR of a register value and an immediate value, and writes the result to the destination register.",
    "file": "orr_i.html"
  },
  "ORRS": {
    "doc": "Bitwise OR (immediate) performs a bitwise (inclusive) OR of a register value and an immediate value, and writes the result to the destination register.",
    "file": "orr_i.html"
  },
  "PKHBT": {
    "doc": "Pack Halfword combines one halfword of its first operand with the other\n      halfword of its shifted second operand.",
    "file": "pkh.html"
  },
  "PKHTB": {
    "doc": "Pack Halfword combines one halfword of its first operand with the other\n      halfword of its shifted second operand.",
    "file": "pkh.html"
  },
  "PLD": {
    "doc": "Preload Data (immediate) signals the memory system that data memory accesses from a specified address are likely in the near future. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as preloading the cache line containing the specified address into the data cache.",
    "file": "pld_i.html"
  },
  "PLDW": {
    "doc": "Preload Data (immediate) signals the memory system that data memory accesses from a specified address are likely in the near future. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as preloading the cache line containing the specified address into the data cache.",
    "file": "pld_i.html"
  },
  "PLI": {
    "doc": "Preload Instruction signals the memory system that instruction memory accesses from a specified address are likely in the near future. The memory system can respond by taking actions that are expected to speed up the memory accesses when they do occur, such as pre-loading the cache line containing the specified address into the instruction cache.",
    "file": "pli_i.html"
  },
  "POP": {
    "doc": "Pop Multiple Registers from Stack loads multiple general-purpose registers\n      from the stack, loading from consecutive memory locations starting at the\n      address in SP, and updates SP to point just above the loaded data.",
    "file": "pop.html"
  },
  "PSSBB": {
    "doc": "Physical Speculative Store Bypass Barrier is a memory barrier that prevents speculative loads from bypassing earlier stores to the same physical address under certain conditions. For more information and details of the semantics, see Physical Speculative Store Bypass Barrier (PSSBB).",
    "file": "pssbb.html"
  },
  "PUSH": {
    "doc": "Push Multiple Registers to Stack stores multiple general-purpose registers to the stack, storing to consecutive memory locations ending just below the address in SP, and updates SP to point to the start of the stored data.",
    "file": "push.html"
  },
  "QADD": {
    "doc": "Saturating Add adds two register values, saturates the result to the 32-bit signed integer range -231 to (231 - 1), and writes the result to the destination register. If saturation occurs, it sets PSTATE.Q to 1.",
    "file": "qadd.html"
  },
  "QADD16": {
    "doc": "Saturating Add 16 performs two 16-bit integer additions, saturates the results to the 16-bit signed integer range -215 &lt;= x &lt;= 215 - 1, and writes the results to the destination register.",
    "file": "qadd16.html"
  },
  "QADD8": {
    "doc": "Saturating Add 8 performs four 8-bit integer additions, saturates the results to the 8-bit signed integer range -27 &lt;= x &lt;= 27 - 1, and writes the results to the destination register.",
    "file": "qadd8.html"
  },
  "QASX": {
    "doc": "Saturating Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one 16-bit integer addition and one 16-bit subtraction, saturates the results to the 16-bit signed integer range -215 &lt;= x &lt;= 215 - 1, and writes the results to the destination register.",
    "file": "qasx.html"
  },
  "QDADD": {
    "doc": "Saturating Double and Add adds a doubled register value to another register value, and writes the result to the destination register. Both the doubling and the addition have their results saturated to the 32-bit signed integer range -231 &lt;= x &lt;= 231 - 1. If saturation occurs in either operation, it sets PSTATE.Q to 1.",
    "file": "qdadd.html"
  },
  "QDSUB": {
    "doc": "Saturating Double and Subtract subtracts a doubled register value from another register value, and writes the result to the destination register. Both the doubling and the subtraction have their results saturated to the 32-bit signed integer range -231 &lt;= x &lt;= 231 - 1. If saturation occurs in either operation, it sets PSTATE.Q to 1.",
    "file": "qdsub.html"
  },
  "QSAX": {
    "doc": "Saturating Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one 16-bit integer subtraction and one 16-bit addition, saturates the results to the 16-bit signed integer range -215 &lt;= x &lt;= 215 - 1, and writes the results to the destination register.",
    "file": "qsax.html"
  },
  "QSUB": {
    "doc": "Saturating Subtract subtracts one register value from another register value, saturates the result to the 32-bit signed integer range -231 &lt;= x &lt;= 231 - 1, and writes the result to the destination register. If saturation occurs, it sets PSTATE.Q to 1.",
    "file": "qsub.html"
  },
  "QSUB16": {
    "doc": "Saturating Subtract 16 performs two 16-bit integer subtractions, saturates the results to the 16-bit signed integer range -215 &lt;= x &lt;= 215 - 1, and writes the results to the destination register.",
    "file": "qsub16.html"
  },
  "QSUB8": {
    "doc": "Saturating Subtract 8 performs four 8-bit integer subtractions, saturates the results to the 8-bit signed integer range -27 &lt;= x &lt;= 27 - 1, and writes the results to the destination register.",
    "file": "qsub8.html"
  },
  "RBIT": {
    "doc": "Reverse Bits reverses the bit order in a 32-bit register.",
    "file": "rbit.html"
  },
  "REV": {
    "doc": "Byte-Reverse Word reverses the byte order in a 32-bit register.",
    "file": "rev.html"
  },
  "REV16": {
    "doc": "Byte-Reverse Packed Halfword reverses the byte order in each16-bit halfword of a 32-bit register.",
    "file": "rev16.html"
  },
  "REVSH": {
    "doc": "Byte-Reverse Signed Halfword reverses the byte order in the lower 16-bit halfword of a 32-bit register, and sign-extends the result to 32 bits.",
    "file": "revsh.html"
  },
  "RFE": {
    "doc": "Return From Exception loads two consecutive memory locations using an address in a base register:",
    "file": "rfe.html"
  },
  "RFEDA": {
    "doc": "Return From Exception loads two consecutive memory locations using an address in a base register:",
    "file": "rfe.html"
  },
  "RFEDB": {
    "doc": "Return From Exception loads two consecutive memory locations using an address in a base register:",
    "file": "rfe.html"
  },
  "RFEIA": {
    "doc": "Return From Exception loads two consecutive memory locations using an address in a base register:",
    "file": "rfe.html"
  },
  "RFEIB": {
    "doc": "Return From Exception loads two consecutive memory locations using an address in a base register:",
    "file": "rfe.html"
  },
  "RORS": {
    "doc": "Rotate Right, setting flags (immediate) provides the value of the contents of a register rotated by a constant value. The bits that are rotated off the right end are inserted into the vacated bit positions on the left.",
    "file": "rors_mov_r.html"
  },
  "ROR": {
    "doc": "Rotate Right (immediate) provides the value of the contents of a register rotated by a constant value. The bits that are rotated off the right end are inserted into the vacated bit positions on the left.",
    "file": "ror_mov_r.html"
  },
  "RRXS": {
    "doc": "Rotate Right with Extend, setting flags provides the value of the contents of a register shifted right by one place, with the Carry flag shifted into bit[31].",
    "file": "rrxs_mov_r.html"
  },
  "RRX": {
    "doc": "Rotate Right with Extend provides the value of the contents of a register shifted right by one place, with the Carry flag shifted into bit[31].",
    "file": "rrx_mov_r.html"
  },
  "RSB": {
    "doc": "Reverse Subtract (immediate) subtracts a register value from an immediate value, and writes the result to the destination register.",
    "file": "rsb_i.html"
  },
  "RSBS": {
    "doc": "Reverse Subtract (immediate) subtracts a register value from an immediate value, and writes the result to the destination register.",
    "file": "rsb_i.html"
  },
  "RSC": {
    "doc": "Reverse Subtract with Carry (immediate) subtracts a register value and the value of NOT (Carry flag) from an immediate value, and writes the result to the destination register.",
    "file": "rsc_i.html"
  },
  "RSCS": {
    "doc": "Reverse Subtract with Carry (immediate) subtracts a register value and the value of NOT (Carry flag) from an immediate value, and writes the result to the destination register.",
    "file": "rsc_i.html"
  },
  "SADD16": {
    "doc": "Signed Add 16 performs two 16-bit signed integer additions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the additions.",
    "file": "sadd16.html"
  },
  "SADD8": {
    "doc": "Signed Add 8 performs four 8-bit signed integer additions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the additions.",
    "file": "sadd8.html"
  },
  "SASX": {
    "doc": "Signed Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one 16-bit integer addition and one 16-bit subtraction, and writes the results to the destination register. It sets PSTATE.GE according to the results.",
    "file": "sasx.html"
  },
  "SB": {
    "doc": "Speculation Barrier is a barrier that controls speculation.",
    "file": "sb.html"
  },
  "SBC": {
    "doc": "Subtract with Carry (immediate) subtracts an immediate value and the value of NOT (Carry flag) from a register value, and writes the result to the destination register.",
    "file": "sbc_i.html"
  },
  "SBCS": {
    "doc": "Subtract with Carry (immediate) subtracts an immediate value and the value of NOT (Carry flag) from a register value, and writes the result to the destination register.",
    "file": "sbc_i.html"
  },
  "SBFX": {
    "doc": "Signed Bit Field Extract extracts any number of adjacent bits at any position from a register, sign-extends them to 32 bits, and writes the result to the destination register.",
    "file": "sbfx.html"
  },
  "SDIV": {
    "doc": "Signed Divide divides a 32-bit signed integer register value by a 32-bit signed integer register value, and writes the result to the destination register. The condition flags are not affected.",
    "file": "sdiv.html"
  },
  "SEL": {
    "doc": "Select Bytes selects each byte of its result from either its first operand or its second operand, according to the values of the PSTATE.GE flags.",
    "file": "sel.html"
  },
  "SETEND": {
    "doc": "Set Endianness writes a new value to PSTATE.E.",
    "file": "setend.html"
  },
  "SETPAN": {
    "doc": "Set Privileged Access Never writes a new value to PSTATE.PAN.",
    "file": "setpan.html"
  },
  "SEV": {
    "doc": "Send Event is a hint instruction. It causes an event to be signaled to all PEs in the multiprocessor system. For more information, see Wait For Event and Send Event.",
    "file": "sev.html"
  },
  "SEVL": {
    "doc": "Send Event Local is a hint instruction that causes an event to be signaled locally without requiring the event to be signaled to other PEs in the multiprocessor system. It can prime a wait-loop which starts with a WFE instruction.",
    "file": "sevl.html"
  },
  "SHA1C": {
    "doc": "SHA1 hash update (choose).",
    "file": "sha1c.html"
  },
  "SHA1H": {
    "doc": "SHA1 fixed rotate.",
    "file": "sha1h.html"
  },
  "SHA1M": {
    "doc": "SHA1 hash update (majority).",
    "file": "sha1m.html"
  },
  "SHA1P": {
    "doc": "SHA1 hash update (parity).",
    "file": "sha1p.html"
  },
  "SHA1SU0": {
    "doc": "SHA1 schedule update 0.",
    "file": "sha1su0.html"
  },
  "SHA1SU1": {
    "doc": "SHA1 schedule update 1.",
    "file": "sha1su1.html"
  },
  "SHA256H": {
    "doc": "SHA256 hash update part 1.",
    "file": "sha256h.html"
  },
  "SHA256H2": {
    "doc": "SHA256 hash update part 2.",
    "file": "sha256h2.html"
  },
  "SHA256SU0": {
    "doc": "SHA256 schedule update 0.",
    "file": "sha256su0.html"
  },
  "SHA256SU1": {
    "doc": "SHA256 schedule update 1.",
    "file": "sha256su1.html"
  },
  "SHADD16": {
    "doc": "Signed Halving Add 16 performs two signed 16-bit integer additions, halves the results, and writes the results to the destination register.",
    "file": "shadd16.html"
  },
  "SHADD8": {
    "doc": "Signed Halving Add 8 performs four signed 8-bit integer additions, halves the results, and writes the results to the destination register.",
    "file": "shadd8.html"
  },
  "S": {
    "doc": "This page displays common pseudocode functions shared by many pages",
    "file": "shared_pseudocode.html"
  },
  "SHASX": {
    "doc": "Signed Halving Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one signed 16-bit integer addition and one signed 16-bit subtraction, halves the results, and writes the results to the destination register.",
    "file": "shasx.html"
  },
  "SHSAX": {
    "doc": "Signed Halving Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one signed 16-bit integer subtraction and one signed 16-bit addition, halves the results, and writes the results to the destination register.",
    "file": "shsax.html"
  },
  "SHSUB16": {
    "doc": "Signed Halving Subtract 16 performs two signed 16-bit integer subtractions, halves the results, and writes the results to the destination register.",
    "file": "shsub16.html"
  },
  "SHSUB8": {
    "doc": "Signed Halving Subtract 8 performs four signed 8-bit integer subtractions, halves the results, and writes the results to the destination register.",
    "file": "shsub8.html"
  },
  "SMC": {
    "doc": "Secure Monitor Call causes a Secure Monitor Call exception.  For more information see Secure Monitor Call (SMC) exception.",
    "file": "smc.html"
  },
  "SMLABB": {
    "doc": "Signed Multiply Accumulate (halfwords) performs a signed multiply accumulate operation. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored.  The 32-bit product is added to a 32-bit accumulate value and the result is written to the destination register.",
    "file": "smlabb.html"
  },
  "SMLABT": {
    "doc": "Signed Multiply Accumulate (halfwords) performs a signed multiply accumulate operation. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored.  The 32-bit product is added to a 32-bit accumulate value and the result is written to the destination register.",
    "file": "smlabb.html"
  },
  "SMLATB": {
    "doc": "Signed Multiply Accumulate (halfwords) performs a signed multiply accumulate operation. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored.  The 32-bit product is added to a 32-bit accumulate value and the result is written to the destination register.",
    "file": "smlabb.html"
  },
  "SMLATT": {
    "doc": "Signed Multiply Accumulate (halfwords) performs a signed multiply accumulate operation. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored.  The 32-bit product is added to a 32-bit accumulate value and the result is written to the destination register.",
    "file": "smlabb.html"
  },
  "SMLAD": {
    "doc": "Signed Multiply Accumulate Dual performs two signed 16 x 16-bit multiplications. It adds the products to a 32-bit accumulate operand.",
    "file": "smlad.html"
  },
  "SMLADX": {
    "doc": "Signed Multiply Accumulate Dual performs two signed 16 x 16-bit multiplications. It adds the products to a 32-bit accumulate operand.",
    "file": "smlad.html"
  },
  "SMLAL": {
    "doc": "Signed Multiply Accumulate Long multiplies two signed 32-bit values to produce a 64-bit value, and accumulates this with a 64-bit value.",
    "file": "smlal.html"
  },
  "SMLALS": {
    "doc": "Signed Multiply Accumulate Long multiplies two signed 32-bit values to produce a 64-bit value, and accumulates this with a 64-bit value.",
    "file": "smlal.html"
  },
  "SMLALBB": {
    "doc": "Signed Multiply Accumulate Long (halfwords) multiplies two signed 16-bit values to produce a 32-bit value, and accumulates this with a 64-bit value. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is sign-extended and accumulated with a 64-bit accumulate value.",
    "file": "smlalbb.html"
  },
  "SMLALBT": {
    "doc": "Signed Multiply Accumulate Long (halfwords) multiplies two signed 16-bit values to produce a 32-bit value, and accumulates this with a 64-bit value. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is sign-extended and accumulated with a 64-bit accumulate value.",
    "file": "smlalbb.html"
  },
  "SMLALTB": {
    "doc": "Signed Multiply Accumulate Long (halfwords) multiplies two signed 16-bit values to produce a 32-bit value, and accumulates this with a 64-bit value. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is sign-extended and accumulated with a 64-bit accumulate value.",
    "file": "smlalbb.html"
  },
  "SMLALTT": {
    "doc": "Signed Multiply Accumulate Long (halfwords) multiplies two signed 16-bit values to produce a 32-bit value, and accumulates this with a 64-bit value. The multiply acts on two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is sign-extended and accumulated with a 64-bit accumulate value.",
    "file": "smlalbb.html"
  },
  "SMLALD": {
    "doc": "Signed Multiply Accumulate Long Dual performs two signed 16 x 16-bit multiplications. It adds the products to a 64-bit accumulate operand.",
    "file": "smlald.html"
  },
  "SMLALDX": {
    "doc": "Signed Multiply Accumulate Long Dual performs two signed 16 x 16-bit multiplications. It adds the products to a 64-bit accumulate operand.",
    "file": "smlald.html"
  },
  "SMLAWB": {
    "doc": "Signed Multiply Accumulate (word by halfword) performs a signed multiply accumulate operation. The multiply acts on a signed 32-bit quantity and a signed 16-bit quantity. The signed 16-bit quantity is taken from either the bottom or the top half of its source register. The other half of the second source register is ignored. The top 32 bits of the 48-bit product are added to a 32-bit accumulate value and the result is written to the destination register. The bottom 16 bits of the 48-bit product are ignored.",
    "file": "smlawb.html"
  },
  "SMLAWT": {
    "doc": "Signed Multiply Accumulate (word by halfword) performs a signed multiply accumulate operation. The multiply acts on a signed 32-bit quantity and a signed 16-bit quantity. The signed 16-bit quantity is taken from either the bottom or the top half of its source register. The other half of the second source register is ignored. The top 32 bits of the 48-bit product are added to a 32-bit accumulate value and the result is written to the destination register. The bottom 16 bits of the 48-bit product are ignored.",
    "file": "smlawb.html"
  },
  "SMLSD": {
    "doc": "Signed Multiply Subtract Dual performs two signed 16 x 16-bit multiplications. It adds the difference of the products to a 32-bit accumulate operand.",
    "file": "smlsd.html"
  },
  "SMLSDX": {
    "doc": "Signed Multiply Subtract Dual performs two signed 16 x 16-bit multiplications. It adds the difference of the products to a 32-bit accumulate operand.",
    "file": "smlsd.html"
  },
  "SMLSLD": {
    "doc": "Signed Multiply Subtract Long Dual performs two signed 16 x 16-bit multiplications. It adds the difference of the products to a 64-bit accumulate operand.",
    "file": "smlsld.html"
  },
  "SMLSLDX": {
    "doc": "Signed Multiply Subtract Long Dual performs two signed 16 x 16-bit multiplications. It adds the difference of the products to a 64-bit accumulate operand.",
    "file": "smlsld.html"
  },
  "SMMLA": {
    "doc": "Signed Most Significant Word Multiply Accumulate multiplies two signed 32-bit values, extracts the most significant 32 bits of the result, and adds an accumulate value.",
    "file": "smmla.html"
  },
  "SMMLAR": {
    "doc": "Signed Most Significant Word Multiply Accumulate multiplies two signed 32-bit values, extracts the most significant 32 bits of the result, and adds an accumulate value.",
    "file": "smmla.html"
  },
  "SMMLS": {
    "doc": "Signed Most Significant Word Multiply Subtract multiplies two signed 32-bit values, subtracts the result from a 32-bit accumulate value that is shifted left by 32 bits, and extracts the most significant 32 bits of the result of that subtraction.",
    "file": "smmls.html"
  },
  "SMMLSR": {
    "doc": "Signed Most Significant Word Multiply Subtract multiplies two signed 32-bit values, subtracts the result from a 32-bit accumulate value that is shifted left by 32 bits, and extracts the most significant 32 bits of the result of that subtraction.",
    "file": "smmls.html"
  },
  "SMMUL": {
    "doc": "Signed Most Significant Word Multiply multiplies two signed 32-bit values, extracts the most significant 32 bits of the result, and writes those bits to the destination register.",
    "file": "smmul.html"
  },
  "SMMULR": {
    "doc": "Signed Most Significant Word Multiply multiplies two signed 32-bit values, extracts the most significant 32 bits of the result, and writes those bits to the destination register.",
    "file": "smmul.html"
  },
  "SMUAD": {
    "doc": "Signed Dual Multiply Add performs two signed 16 x 16-bit multiplications. It adds the products together, and writes the result to the destination register.",
    "file": "smuad.html"
  },
  "SMUADX": {
    "doc": "Signed Dual Multiply Add performs two signed 16 x 16-bit multiplications. It adds the products together, and writes the result to the destination register.",
    "file": "smuad.html"
  },
  "SMULBB": {
    "doc": "Signed Multiply (halfwords) multiplies two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is written to the destination register. No overflow is possible during this instruction.",
    "file": "smulbb.html"
  },
  "SMULBT": {
    "doc": "Signed Multiply (halfwords) multiplies two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is written to the destination register. No overflow is possible during this instruction.",
    "file": "smulbb.html"
  },
  "SMULTB": {
    "doc": "Signed Multiply (halfwords) multiplies two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is written to the destination register. No overflow is possible during this instruction.",
    "file": "smulbb.html"
  },
  "SMULTT": {
    "doc": "Signed Multiply (halfwords) multiplies two signed 16-bit quantities, taken from either the bottom or the top half of their respective source registers. The other halves of these source registers are ignored. The 32-bit product is written to the destination register. No overflow is possible during this instruction.",
    "file": "smulbb.html"
  },
  "SMULL": {
    "doc": "Signed Multiply Long multiplies two 32-bit signed values to produce a 64-bit result.",
    "file": "smull.html"
  },
  "SMULLS": {
    "doc": "Signed Multiply Long multiplies two 32-bit signed values to produce a 64-bit result.",
    "file": "smull.html"
  },
  "SMULWB": {
    "doc": "Signed Multiply (word by halfword) multiplies a signed 32-bit quantity and a signed 16-bit quantity. The signed 16-bit quantity is taken from either the bottom or the top half of its source register. The other half of the second source register is ignored. The top 32 bits of the 48-bit product are written to the destination register. The bottom 16 bits of the 48-bit product are ignored. No overflow is possible during this instruction.",
    "file": "smulwb.html"
  },
  "SMULWT": {
    "doc": "Signed Multiply (word by halfword) multiplies a signed 32-bit quantity and a signed 16-bit quantity. The signed 16-bit quantity is taken from either the bottom or the top half of its source register. The other half of the second source register is ignored. The top 32 bits of the 48-bit product are written to the destination register. The bottom 16 bits of the 48-bit product are ignored. No overflow is possible during this instruction.",
    "file": "smulwb.html"
  },
  "SMUSD": {
    "doc": "Signed Multiply Subtract Dual performs two signed 16 x 16-bit multiplications. It subtracts one of the products from the other, and writes the result to the destination register.",
    "file": "smusd.html"
  },
  "SMUSDX": {
    "doc": "Signed Multiply Subtract Dual performs two signed 16 x 16-bit multiplications. It subtracts one of the products from the other, and writes the result to the destination register.",
    "file": "smusd.html"
  },
  "SRS": {
    "doc": "Store Return State stores the LR_&lt;current_mode&gt; and SPSR_&lt;current_mode&gt; to the stack of a specified mode. For information about memory accesses see Memory accesses.",
    "file": "srs.html"
  },
  "SRSDA": {
    "doc": "Store Return State stores the LR_&lt;current_mode&gt; and SPSR_&lt;current_mode&gt; to the stack of a specified mode. For information about memory accesses see Memory accesses.",
    "file": "srs.html"
  },
  "SRSDB": {
    "doc": "Store Return State stores the LR_&lt;current_mode&gt; and SPSR_&lt;current_mode&gt; to the stack of a specified mode. For information about memory accesses see Memory accesses.",
    "file": "srs.html"
  },
  "SRSIA": {
    "doc": "Store Return State stores the LR_&lt;current_mode&gt; and SPSR_&lt;current_mode&gt; to the stack of a specified mode. For information about memory accesses see Memory accesses.",
    "file": "srs.html"
  },
  "SRSIB": {
    "doc": "Store Return State stores the LR_&lt;current_mode&gt; and SPSR_&lt;current_mode&gt; to the stack of a specified mode. For information about memory accesses see Memory accesses.",
    "file": "srs.html"
  },
  "SSAT": {
    "doc": "Signed Saturate saturates an optionally-shifted signed value to a selectable signed range.",
    "file": "ssat.html"
  },
  "SSAT16": {
    "doc": "Signed Saturate 16 saturates two signed 16-bit values to a selected signed range.",
    "file": "ssat16.html"
  },
  "SSAX": {
    "doc": "Signed Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one 16-bit integer subtraction and one 16-bit addition, and writes the results to the destination register. It sets PSTATE.GE according to the results.",
    "file": "ssax.html"
  },
  "SSBB": {
    "doc": "Speculative Store Bypass Barrier is a memory barrier that prevents speculative loads from bypassing earlier stores to the same virtual address under certain conditions. For more information and details of the semantics, see Speculative Store Bypass Barrier (SSBB).",
    "file": "ssbb.html"
  },
  "SSUB16": {
    "doc": "Signed Subtract 16 performs two 16-bit signed integer subtractions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the subtractions.",
    "file": "ssub16.html"
  },
  "SSUB8": {
    "doc": "Signed Subtract 8 performs four 8-bit signed integer subtractions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the subtractions.",
    "file": "ssub8.html"
  },
  "STC": {
    "doc": "Store data to System register calculates an address from a base register value and an immediate offset, and stores a word from the DBGDTRRXint System register to memory. It can use offset, post-indexed, pre-indexed, or unindexed addressing. For information about memory accesses, see Memory accesses.",
    "file": "stc.html"
  },
  "STL": {
    "doc": "Store-Release Word stores a word from a register to memory.  The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release.",
    "file": "stl.html"
  },
  "STLB": {
    "doc": "Store-Release Byte stores a byte from a register to memory.  The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release.",
    "file": "stlb.html"
  },
  "STLEX": {
    "doc": "Store-Release Exclusive Word stores a word from a register to memory if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "stlex.html"
  },
  "STLEXB": {
    "doc": "Store-Release Exclusive Byte stores a byte from a register to memory if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "stlexb.html"
  },
  "STLEXD": {
    "doc": "Store-Release Exclusive Doubleword stores a doubleword from two registers to memory if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "stlexd.html"
  },
  "STLEXH": {
    "doc": "Store-Release Exclusive Halfword stores a halfword from a register to memory if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "stlexh.html"
  },
  "STLH": {
    "doc": "Store-Release Halfword stores a halfword from a register to memory. The instruction also has memory ordering semantics as described in Load-Acquire, Store-Release.",
    "file": "stlh.html"
  },
  "STM": {
    "doc": "Store Multiple (Increment After, Empty Ascending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the last of those locations can optionally be written back to the base register.",
    "file": "stm.html"
  },
  "STMIA": {
    "doc": "Store Multiple (Increment After, Empty Ascending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the last of those locations can optionally be written back to the base register.",
    "file": "stm.html"
  },
  "STMEA": {
    "doc": "Store Multiple (Increment After, Empty Ascending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations start at this address, and the address just above the last of those locations can optionally be written back to the base register.",
    "file": "stm.html"
  },
  "STMDA": {
    "doc": "Store Multiple Decrement After (Empty Descending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations end at this address, and the address just below the lowest of those locations can optionally be written back to the base register.",
    "file": "stmda.html"
  },
  "STMED": {
    "doc": "Store Multiple Decrement After (Empty Descending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations end at this address, and the address just below the lowest of those locations can optionally be written back to the base register.",
    "file": "stmda.html"
  },
  "STMDB": {
    "doc": "Store Multiple Decrement Before (Full Descending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations end just below this address, and the address of the first of those locations can optionally be written back to the base register.",
    "file": "stmdb.html"
  },
  "STMFD": {
    "doc": "Store Multiple Decrement Before (Full Descending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations end just below this address, and the address of the first of those locations can optionally be written back to the base register.",
    "file": "stmdb.html"
  },
  "STMIB": {
    "doc": "Store Multiple Increment Before (Full Ascending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations start just above this address, and the address of the last of those locations can optionally be written back to the base register.",
    "file": "stmib.html"
  },
  "STMFA": {
    "doc": "Store Multiple Increment Before (Full Ascending) stores multiple registers to consecutive memory locations using an address from a base register. The consecutive memory locations start just above this address, and the address of the last of those locations can optionally be written back to the base register.",
    "file": "stmib.html"
  },
  "STRBT": {
    "doc": "Store Register Byte Unprivileged stores a byte from a register to memory. For information about memory accesses see Memory accesses.",
    "file": "strbt.html"
  },
  "STRB": {
    "doc": "Store Register Byte (immediate) calculates an address from a base register value and an immediate offset, and stores a byte from a register to memory. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "strb_i.html"
  },
  "STRD": {
    "doc": "Store Register Dual (immediate) calculates an address from a base register value and an immediate offset, and stores two words from two registers to memory. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "strd_i.html"
  },
  "STREX": {
    "doc": "Store Register Exclusive calculates an address from a base register value and an immediate offset, stores a word from a register to the calculated address if the PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "strex.html"
  },
  "STREXB": {
    "doc": "Store Register Exclusive Byte derives an address from a base register value, stores a byte from a register to the derived address if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "strexb.html"
  },
  "STREXD": {
    "doc": "Store Register Exclusive Doubleword derives an address from a base register value, stores a 64-bit doubleword from two registers to the derived address if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "strexd.html"
  },
  "STREXH": {
    "doc": "Store Register Exclusive Halfword derives an address from a base register value, stores a halfword from a register to the derived address if the executing PE has exclusive access to the memory at that address, and returns a status value of 0 if the store was successful, or of 1 if no store was performed.",
    "file": "strexh.html"
  },
  "STRHT": {
    "doc": "Store Register Halfword Unprivileged stores a halfword from a register to memory. For information about memory accesses see Memory accesses.",
    "file": "strht.html"
  },
  "STRH": {
    "doc": "Store Register Halfword (immediate) calculates an address from a base register value and an immediate offset, and stores a halfword from a register to memory. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "strh_i.html"
  },
  "STRT": {
    "doc": "Store Register Unprivileged stores a word from a register to memory. For information about memory accesses see Memory accesses.",
    "file": "strt.html"
  },
  "STR": {
    "doc": "Store Register (immediate) calculates an address from a base register value and an immediate offset, and stores a word from a register to memory. It can use offset, post-indexed, or pre-indexed addressing. For information about memory accesses see Memory accesses.",
    "file": "str_i.html"
  },
  "SUB": {
    "doc": "Subtract from PC subtracts an immediate value from the Align(PC, 4) value to form a PC-relative address, and writes the result to the destination register.  Arm recommends that, where possible, software avoids using this alias.",
    "file": "sub_adr.html"
  },
  "SUBS": {
    "doc": "Subtract (immediate) subtracts an immediate value from a register value, and writes the result to the destination register.",
    "file": "sub_i.html"
  },
  "SVC": {
    "doc": "Supervisor Call causes a Supervisor Call exception. For more information, see Supervisor Call (SVC) exception.",
    "file": "svc.html"
  },
  "SXTAB": {
    "doc": "Signed Extend and Add Byte extracts an 8-bit value from a register, sign-extends it to 32 bits, adds the result to the value in another register, and writes the final result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.",
    "file": "sxtab.html"
  },
  "SXTAB16": {
    "doc": "Signed Extend and Add Byte 16 extracts two 8-bit values from a register, sign-extends them to 16 bits each, adds the results to two 16-bit values from another register, and writes the final results to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit values.",
    "file": "sxtab16.html"
  },
  "SXTAH": {
    "doc": "Signed Extend and Add Halfword extracts a 16-bit value from a register, sign-extends it to 32 bits, adds the result to a value from another register, and writes the final result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.",
    "file": "sxtah.html"
  },
  "SXTB": {
    "doc": "Signed Extend Byte extracts an 8-bit value from a register, sign-extends it to 32 bits, and writes the result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.",
    "file": "sxtb.html"
  },
  "SXTB16": {
    "doc": "Signed Extend Byte 16 extracts two 8-bit values from a register, sign-extends them to 16 bits each, and writes the results to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit values.",
    "file": "sxtb16.html"
  },
  "SXTH": {
    "doc": "Signed Extend Halfword extracts a 16-bit value from a register, sign-extends it to 32 bits, and writes the result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.",
    "file": "sxth.html"
  },
  "TBB": {
    "doc": "Table Branch Byte or Halfword causes a PC-relative forward branch using a table of single byte or halfword offsets. A base register provides a pointer to the table, and a second register supplies an index into the table. The branch length is twice the value returned from the table.",
    "file": "tbb.html"
  },
  "TBH": {
    "doc": "Table Branch Byte or Halfword causes a PC-relative forward branch using a table of single byte or halfword offsets. A base register provides a pointer to the table, and a second register supplies an index into the table. The branch length is twice the value returned from the table.",
    "file": "tbb.html"
  },
  "TEQ": {
    "doc": "Test Equivalence (immediate) performs a bitwise exclusive OR operation on a register value and an immediate value. It updates the condition flags based on the result, and discards the result.",
    "file": "teq_i.html"
  },
  "TSB": {
    "doc": "Trace Synchronization Barrier. This instruction is a barrier that synchronizes the trace operations of instructions, see Trace Synchronization Buffer (TSB CSYNC).",
    "file": "tsb.html"
  },
  "CSYNC": {
    "doc": "Trace Synchronization Barrier. This instruction is a barrier that synchronizes the trace operations of instructions, see Trace Synchronization Buffer (TSB CSYNC).",
    "file": "tsb.html"
  },
  "TST": {
    "doc": "Test (immediate) performs a bitwise AND operation on a register value and an immediate value. It updates the condition flags based on the result, and discards the result.",
    "file": "tst_i.html"
  },
  "UADD16": {
    "doc": "Unsigned Add 16 performs two 16-bit unsigned integer additions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the additions.",
    "file": "uadd16.html"
  },
  "UADD8": {
    "doc": "Unsigned Add 8 performs four unsigned 8-bit integer additions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the additions.",
    "file": "uadd8.html"
  },
  "UASX": {
    "doc": "Unsigned Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer addition and one unsigned 16-bit subtraction, and writes the results to the destination register. It sets PSTATE.GE according to the results.",
    "file": "uasx.html"
  },
  "UBFX": {
    "doc": "Unsigned Bit Field Extract extracts any number of adjacent bits at any position from a register, zero-extends them to 32 bits, and writes the result to the destination register.",
    "file": "ubfx.html"
  },
  "UDF": {
    "doc": "Permanently Undefined generates an Undefined Instruction exception.",
    "file": "udf.html"
  },
  "UDIV": {
    "doc": "Unsigned Divide divides a 32-bit unsigned integer register value by a 32-bit unsigned integer register value, and writes the result to the destination register. The condition flags are not affected.",
    "file": "udiv.html"
  },
  "UHADD16": {
    "doc": "Unsigned Halving Add 16 performs two unsigned 16-bit integer additions, halves the results, and writes the results to the destination register.",
    "file": "uhadd16.html"
  },
  "UHADD8": {
    "doc": "Unsigned Halving Add 8 performs four unsigned 8-bit integer additions, halves the results, and writes the results to the destination register.",
    "file": "uhadd8.html"
  },
  "UHASX": {
    "doc": "Unsigned Halving Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer addition and one unsigned 16-bit subtraction, halves the results, and writes the results to the destination register.",
    "file": "uhasx.html"
  },
  "UHSAX": {
    "doc": "Unsigned Halving Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer subtraction and one unsigned 16-bit addition, halves the results, and writes the results to the destination register.",
    "file": "uhsax.html"
  },
  "UHSUB16": {
    "doc": "Unsigned Halving Subtract 16 performs two unsigned 16-bit integer subtractions, halves the results, and writes the results to the destination register.",
    "file": "uhsub16.html"
  },
  "UHSUB8": {
    "doc": "Unsigned Halving Subtract 8 performs four unsigned 8-bit integer subtractions, halves the results, and writes the results to the destination register.",
    "file": "uhsub8.html"
  },
  "UMAAL": {
    "doc": "Unsigned Multiply Accumulate Accumulate Long multiplies two unsigned 32-bit values to produce a 64-bit value, adds two unsigned 32-bit values, and writes the 64-bit result to two registers.",
    "file": "umaal.html"
  },
  "UMLAL": {
    "doc": "Unsigned Multiply Accumulate Long multiplies two unsigned 32-bit values to produce a 64-bit value, and accumulates this with a 64-bit value.",
    "file": "umlal.html"
  },
  "UMLALS": {
    "doc": "Unsigned Multiply Accumulate Long multiplies two unsigned 32-bit values to produce a 64-bit value, and accumulates this with a 64-bit value.",
    "file": "umlal.html"
  },
  "UMULL": {
    "doc": "Unsigned Multiply Long multiplies two 32-bit unsigned values to produce a 64-bit result.",
    "file": "umull.html"
  },
  "UMULLS": {
    "doc": "Unsigned Multiply Long multiplies two 32-bit unsigned values to produce a 64-bit result.",
    "file": "umull.html"
  },
  "UQADD16": {
    "doc": "Unsigned Saturating Add 16 performs two unsigned 16-bit integer additions, saturates the results to the 16-bit unsigned integer range 0 &lt;= x &lt;= 216 - 1, and writes the results to the destination register.",
    "file": "uqadd16.html"
  },
  "UQADD8": {
    "doc": "Unsigned Saturating Add 8 performs four unsigned 8-bit integer additions, saturates the results to the 8-bit unsigned integer range 0 &lt;= x &lt;= 28 - 1, and writes the results to the destination register.",
    "file": "uqadd8.html"
  },
  "UQASX": {
    "doc": "Unsigned Saturating Add and Subtract with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer addition and one unsigned 16-bit subtraction, saturates the results to the 16-bit unsigned integer range 0 &lt;= x &lt;= 216 - 1, and writes the results to the destination register.",
    "file": "uqasx.html"
  },
  "UQSAX": {
    "doc": "Unsigned Saturating Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer subtraction and one unsigned 16-bit addition, saturates the results to the 16-bit unsigned integer range 0 &lt;= x &lt;= 216 - 1, and writes the results to the destination register.",
    "file": "uqsax.html"
  },
  "UQSUB16": {
    "doc": "Unsigned Saturating Subtract 16 performs two unsigned 16-bit integer subtractions, saturates the results to the 16-bit unsigned integer range 0 &lt;= x &lt;= 216 - 1, and writes the results to the destination register.",
    "file": "uqsub16.html"
  },
  "UQSUB8": {
    "doc": "Unsigned Saturating Subtract 8 performs four unsigned 8-bit integer subtractions, saturates the results to the 8-bit unsigned integer range 0 &lt;= x &lt;= 28 - 1, and writes the results to the destination register.",
    "file": "uqsub8.html"
  },
  "USAD8": {
    "doc": "Unsigned Sum of Absolute Differences performs four unsigned 8-bit subtractions, and adds the absolute values of the differences together.",
    "file": "usad8.html"
  },
  "USADA8": {
    "doc": "Unsigned Sum of Absolute Differences and Accumulate performs four unsigned 8-bit subtractions, and adds the absolute values of the differences to a 32-bit accumulate operand.",
    "file": "usada8.html"
  },
  "USAT": {
    "doc": "Unsigned Saturate saturates an optionally-shifted signed value to a selected unsigned range.",
    "file": "usat.html"
  },
  "USAT16": {
    "doc": "Unsigned Saturate 16 saturates two signed 16-bit values to a selected unsigned range.",
    "file": "usat16.html"
  },
  "USAX": {
    "doc": "Unsigned Subtract and Add with Exchange exchanges the two halfwords of the second operand, performs one unsigned 16-bit integer subtraction and one unsigned 16-bit addition, and writes the results to the destination register. It sets PSTATE.GE according to the results.",
    "file": "usax.html"
  },
  "USUB16": {
    "doc": "Unsigned Subtract 16 performs two 16-bit unsigned integer subtractions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the subtractions.",
    "file": "usub16.html"
  },
  "USUB8": {
    "doc": "Unsigned Subtract 8 performs four 8-bit unsigned integer subtractions, and writes the results to the destination register. It sets PSTATE.GE according to the results of the subtractions.",
    "file": "usub8.html"
  },
  "UXTAB": {
    "doc": "Unsigned Extend and Add Byte extracts an 8-bit value from a register, zero-extends it to 32 bits, adds the result to the value in another register, and writes the final result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.",
    "file": "uxtab.html"
  },
  "UXTAB16": {
    "doc": "Unsigned Extend and Add Byte 16 extracts two 8-bit values from a register, zero-extends them to 16 bits each, adds the results to two 16-bit values from another register, and writes the final results to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit values.",
    "file": "uxtab16.html"
  },
  "UXTAH": {
    "doc": "Unsigned Extend and Add Halfword extracts a 16-bit value from a register, zero-extends it to 32 bits, adds the result to a value from another register, and writes the final result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.",
    "file": "uxtah.html"
  },
  "UXTB": {
    "doc": "Unsigned Extend Byte extracts an 8-bit value from a register, zero-extends it to 32 bits, and writes the result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit value.",
    "file": "uxtb.html"
  },
  "UXTB16": {
    "doc": "Unsigned Extend Byte 16 extracts two 8-bit values from a register, zero-extends them to 16 bits each, and writes the results to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 8-bit values.",
    "file": "uxtb16.html"
  },
  "UXTH": {
    "doc": "Unsigned Extend Halfword extracts a 16-bit value from a register, zero-extends it to 32 bits, and writes the result to the destination register. The instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting the 16-bit value.",
    "file": "uxth.html"
  },
  "VABA": {
    "doc": "Vector Absolute Difference and Accumulate subtracts the elements of one vector from the corresponding elements of another vector, and accumulates the absolute values of the results into the elements of the destination vector.",
    "file": "vaba.html"
  },
  "VABAL": {
    "doc": "Vector Absolute Difference and Accumulate Long subtracts the elements of one vector from the corresponding elements of another vector, and accumulates the absolute values of the results into the elements of the destination vector.",
    "file": "vabal.html"
  },
  "VABDL": {
    "doc": "Vector Absolute Difference Long (integer) subtracts the elements of one vector from the corresponding elements of another vector, and places the absolute values of the results in the elements of the destination vector.",
    "file": "vabdl_i.html"
  },
  "VABD": {
    "doc": "Vector Absolute Difference (floating-point) subtracts the elements of one vector from the corresponding elements of another vector, and places the absolute values of the results in the elements of the destination vector.",
    "file": "vabd_f.html"
  },
  "VABS": {
    "doc": "Vector Absolute takes the absolute value of each element in a vector, and places the results in a second vector. The floating-point version only clears the sign bit.",
    "file": "vabs.html"
  },
  "VACGE": {
    "doc": "Vector Absolute Compare Greater Than or Equal takes the absolute value of each element in a vector, and compares it with the absolute value of the corresponding element of a second vector. If the first is greater than or equal to the second, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vacge.html"
  },
  "VACGT": {
    "doc": "Vector Absolute Compare Greater Than takes the absolute value of each element in a vector, and compares it with the absolute value of the corresponding element of a second vector. If the first is greater than the second, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vacgt.html"
  },
  "VACLE": {
    "doc": "Vector Absolute Compare Less Than or Equal takes the absolute value of each element in a vector, and compares it with the absolute value of the corresponding element of a second vector. If the first is less than or equal to the second, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vacle_vacge.html"
  },
  "VACLT": {
    "doc": "Vector Absolute Compare Less Than takes the absolute value of each element in a vector, and compares it with the absolute value of the corresponding element of a second vector. If the first is less than the second, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vaclt_vacgt.html"
  },
  "VADDHN": {
    "doc": "Vector Add and Narrow, returning High Half adds corresponding elements in two quadword vectors, and places the most significant half of each result in a doubleword vector. The results are truncated. For rounded results, see VRADDHN.",
    "file": "vaddhn.html"
  },
  "VADDL": {
    "doc": "Vector Add Long adds corresponding elements in two doubleword vectors, and places the results in a quadword vector. Before adding, it sign-extends or zero-extends the elements of both operands.",
    "file": "vaddl.html"
  },
  "VADDW": {
    "doc": "Vector Add Wide adds corresponding elements in one quadword and one doubleword vector, and places the results in a quadword vector. Before adding, it sign-extends or zero-extends the elements of the doubleword operand.",
    "file": "vaddw.html"
  },
  "VADD": {
    "doc": "Vector Add (floating-point) adds corresponding elements in two vectors, and places the results in the destination vector.",
    "file": "vadd_f.html"
  },
  "VAND": {
    "doc": "Vector Bitwise AND (register) performs a bitwise AND operation between two registers, and places the result in the destination register.",
    "file": "vand_r.html"
  },
  "VBIC": {
    "doc": "Vector Bitwise Bit Clear (immediate) performs a bitwise AND between a register value and the complement of an immediate value, and returns the result into the destination vector.",
    "file": "vbic_i.html"
  },
  "VBIF": {
    "doc": "Vector Bitwise Insert if False inserts each bit from the first source register into the destination register if the corresponding bit of the second source register is 0, otherwise leaves the bit in the destination register unchanged.",
    "file": "vbif.html"
  },
  "VBIT": {
    "doc": "Vector Bitwise Insert if True inserts each bit from the first source register into the destination register if the corresponding bit of the second source register is 1, otherwise leaves the bit in the destination register unchanged.",
    "file": "vbit.html"
  },
  "VBSL": {
    "doc": "Vector Bitwise Select sets each bit in the destination to the corresponding bit from the first source operand when the original destination bit was 1, otherwise from the second source operand.",
    "file": "vbsl.html"
  },
  "VCADD": {
    "doc": "Vector Complex Add.",
    "file": "vcadd.html"
  },
  "VCEQ": {
    "doc": "Vector Compare Equal to Zero takes each element in a vector, and compares it with zero.  If it is equal to zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vceq_i.html"
  },
  "VCGE": {
    "doc": "Vector Compare Greater Than or Equal to Zero takes each element in a vector, and compares it with zero. If it is greater than or equal to zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vcge_i.html"
  },
  "VCGT": {
    "doc": "Vector Compare Greater Than Zero takes each element in a vector, and compares it with zero.  If it is greater than zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vcgt_i.html"
  },
  "VCLE": {
    "doc": "Vector Compare Less Than or Equal to Zero takes each element in a vector, and compares it with zero. If it is less than or equal to zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vcle_i.html"
  },
  "VCLS": {
    "doc": "Vector Count Leading Sign Bits counts the number of consecutive bits following the topmost bit, that are the same as the topmost bit, in each element in a vector, and places the results in a second vector. The count does not include the topmost bit itself.",
    "file": "vcls.html"
  },
  "VCLT": {
    "doc": "Vector Compare Less Than Zero takes each element in a vector, and compares it with zero.  If it is less than zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vclt_i.html"
  },
  "VCLZ": {
    "doc": "Vector Count Leading Zeros counts the number of consecutive zeros, starting from the most significant bit, in each element in a vector, and places the results in a second vector.",
    "file": "vclz.html"
  },
  "VCMLA": {
    "doc": "Vector Complex Multiply Accumulate.",
    "file": "vcmla.html"
  },
  "VCMP": {
    "doc": "Vector Compare compares two floating-point registers, or one floating-point register and zero. It writes the result to the FPSCR flags. These are normally transferred to the PSTATE.{N, Z, C, V} Condition flags by a subsequent VMRS instruction.",
    "file": "vcmp.html"
  },
  "VCMPE": {
    "doc": "Vector Compare, raising Invalid Operation on NaN compares two floating-point registers, or one floating-point register and zero. It writes the result to the FPSCR flags. These are normally transferred to the PSTATE.{N, Z, C, V} Condition flags by a subsequent VMRS instruction.",
    "file": "vcmpe.html"
  },
  "VCNT": {
    "doc": "Vector Count Set Bits counts the number of bits that are one in each element in a vector, and places the results in a second vector.",
    "file": "vcnt.html"
  },
  "VCVTA": {
    "doc": "Vector Convert floating-point to integer with Round to Nearest with Ties to Away converts each element in a vector from floating-point to integer using the Round to Nearest with Ties to Away rounding mode, and places the results in a second vector.",
    "file": "vcvta_asimd.html"
  },
  "A": {
    "doc": "Vector Convert floating-point to integer with Round to Nearest with Ties to Away converts each element in a vector from floating-point to integer using the Round to Nearest with Ties to Away rounding mode, and places the results in a second vector.",
    "file": "vcvta_asimd.html"
  },
  "VCVTB": {
    "doc": "Convert to or from a half-precision value in the bottom half of a single-precision register does one of the following:",
    "file": "vcvtb.html"
  },
  "BF": {
    "doc": "Converts the single-precision value in a single-precision register to BFloat16 format and writes the result into the bottom half of a single precision register, preserving the top 16 bits of the destination register.",
    "file": "vcvtb_bfs.html"
  },
  "VCVTM": {
    "doc": "Vector Convert floating-point to integer with Round towards -Infinity converts each element in a vector from floating-point to integer using the Round towards -Infinity rounding mode, and places the results in a second vector.",
    "file": "vcvtm_asimd.html"
  },
  "VCVTN": {
    "doc": "Vector Convert floating-point to integer with Round to Nearest converts each element in a vector from floating-point to integer using the Round to Nearest rounding mode, and places the results in a second vector.",
    "file": "vcvtn_asimd.html"
  },
  "VCVTP": {
    "doc": "Vector Convert floating-point to integer with Round towards +Infinity converts each element in a vector from floating-point to integer using the Round towards +Infinity rounding mode, and places the results in a second vector.",
    "file": "vcvtp_asimd.html"
  },
  "VCVTR": {
    "doc": "Convert floating-point to integer converts a value in a register from floating-point to a 32-bit integer, using the rounding mode specified by the FPSCR and places the result in a second register.",
    "file": "vcvtr_iv.html"
  },
  "VCVTT": {
    "doc": "Convert to or from a half-precision value in the top half of a single-precision register does one of the following:",
    "file": "vcvtt.html"
  },
  "VCVT": {
    "doc": "Vector Convert from single-precision to BFloat16 converts each 32-bit element in a vector from single-precision floating-point to BFloat16 format, and writes the result into a second vector. The result vector elements are half the width of the source vector elements.",
    "file": "vcvt_bfs.html"
  },
  "VDIV": {
    "doc": "Divide divides one floating-point value by another floating-point value and writes the result to a third floating-point register.",
    "file": "vdiv.html"
  },
  "VDOT": {
    "doc": "BFloat16 floating-point (BF16) dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element in the destination vector which aligns with the pair of BF16 values in the first source vector. The instruction does not update the FPSCR exception status.",
    "file": "vdot.html"
  },
  "VDUP": {
    "doc": "Duplicate general-purpose register to vector duplicates an element from a general-purpose register into every element of the destination vector.",
    "file": "vdup_r.html"
  },
  "VEOR": {
    "doc": "Vector Bitwise Exclusive-OR performs a bitwise exclusive-OR operation between two registers, and places the result in the destination register. The operand and result registers can be quadword or doubleword. They must all be the same size.",
    "file": "veor.html"
  },
  "VEXT": {
    "doc": "Vector Extract extracts elements from the bottom end of the second operand vector and the top end of the first, concatenates them and places the result in the destination vector.",
    "file": "vext.html"
  },
  "VFMA": {
    "doc": "Vector Fused Multiply Accumulate multiplies corresponding elements of two\n      vectors, and accumulates the results into the elements of the destination\n      vector. The instruction does not round the result of the multiply before\n      the accumulation.",
    "file": "vfma.html"
  },
  "VFMAL": {
    "doc": "Vector Floating-point Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding values in the vectors in the two source SIMD&amp;FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "vfmal.html"
  },
  "VFMAB": {
    "doc": "The Bfloat16 floating-point widening multiply-add long instruction widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
    "file": "vfma_bf.html"
  },
  "VFMAT": {
    "doc": "The Bfloat16 floating-point widening multiply-add long instruction widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.",
    "file": "vfma_bf.html"
  },
  "VFMS": {
    "doc": "Vector Fused Multiply Subtract negates the elements of one vector and multiplies them with the corresponding elements of another vector, adds the products to the corresponding elements of the destination vector, and places the results in the destination vector. The instruction does not round the result of the multiply before the addition.",
    "file": "vfms.html"
  },
  "VFMSL": {
    "doc": "Vector Floating-point Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&amp;FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&amp;FP register. The instruction does not round the result of the multiply before the accumulation.",
    "file": "vfmsl.html"
  },
  "VFNMA": {
    "doc": "Vector Fused Negate Multiply Accumulate negates one floating-point register value and multiplies it by another floating-point register value, adds the negation of the floating-point value in the destination register to the product, and writes the result back to the destination register. The instruction does not round the result of the multiply before the addition.",
    "file": "vfnma.html"
  },
  "VFNMS": {
    "doc": "Vector Fused Negate Multiply Subtract multiplies together two floating-point register values, adds the negation of the floating-point value in the destination register to the product, and writes the result back to the destination register. The instruction does not round the result of the multiply before the addition.",
    "file": "vfnms.html"
  },
  "VHADD": {
    "doc": "Vector Halving Add adds corresponding elements in two vectors of integers, shifts each result right one bit, and places the final results in the destination vector. The results of the halving operations are truncated. For rounded results, see VRHADD).",
    "file": "vhadd.html"
  },
  "VHSUB": {
    "doc": "Vector Halving Subtract subtracts the elements of the second operand from the corresponding elements of the first operand, shifts each result right one bit, and places the final results in the destination vector. The results of the halving operations are truncated. There is no rounding version.",
    "file": "vhsub.html"
  },
  "VINS": {
    "doc": "Vector move Insertion. This instruction copies the lower 16 bits of the 32-bit source SIMD&amp;FP register into the upper 16 bits of the 32-bit destination SIMD&amp;FP register, while preserving the values in the remaining bits.",
    "file": "vins.html"
  },
  "VJCVT": {
    "doc": "Javascript Convert to signed fixed-point, rounding toward Zero. This instruction converts the double-precision floating-point value in the SIMD&amp;FP source register to a 32-bit signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register. If the result is too large to be accommodated as a signed 32-bit integer, then the result is the integer modulo 232, as held in a 32-bit signed integer.",
    "file": "vjcvt.html"
  },
  "VLD1": {
    "doc": "Load single 1-element structure to one lane of one register loads one element from memory into one element of a register. Elements of the register that are not loaded are unchanged. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vld1_1.html"
  },
  "VLD2": {
    "doc": "Load single 2-element structure to one lane of two registers loads one 2-element structure from memory into corresponding elements of two registers. Elements of the registers that are not loaded are unchanged. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vld2_1.html"
  },
  "VLD3": {
    "doc": "Load single 3-element structure to one lane of three registers loads one 3-element structure from memory into corresponding elements of three registers. Elements of the registers that are not loaded are unchanged. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vld3_1.html"
  },
  "VLD4": {
    "doc": "Load single 4-element structure to one lane of four registers loads one 4-element structure from memory into corresponding elements of four registers. Elements of the registers that are not loaded are unchanged. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vld4_1.html"
  },
  "VLDM": {
    "doc": "Load Multiple SIMD&amp;FP registers loads multiple registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "vldm.html"
  },
  "VLDMDB": {
    "doc": "Load Multiple SIMD&amp;FP registers loads multiple registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "vldm.html"
  },
  "VLDMIA": {
    "doc": "Load Multiple SIMD&amp;FP registers loads multiple registers from consecutive locations in the Advanced SIMD and floating-point register file using an address from a general-purpose register.",
    "file": "vldm.html"
  },
  "VLDR": {
    "doc": "Load SIMD&amp;FP register (immediate) loads a single register from the Advanced SIMD and floating-point register file, using an address from a general-purpose register, with an optional offset.",
    "file": "vldr_i.html"
  },
  "VMAXNM": {
    "doc": "This instruction determines the floating-point maximum number.",
    "file": "vmaxnm.html"
  },
  "VMAX": {
    "doc": "Vector Maximum compares corresponding elements in two vectors, and copies the larger of each pair into the corresponding element in the destination vector.",
    "file": "vmax_f.html"
  },
  "VMINNM": {
    "doc": "This instruction determines the floating point minimum number.",
    "file": "vminnm.html"
  },
  "VMIN": {
    "doc": "Vector Minimum compares corresponding elements in two vectors, and copies the smaller of each pair into the corresponding element in the destination vector.",
    "file": "vmin_f.html"
  },
  "VMLAL": {
    "doc": "Vector Multiply Accumulate Long multiplies corresponding elements in two vectors, and add the products to the corresponding element of the destination vector. The destination vector element is twice as long as the elements that are multiplied.",
    "file": "vmlal_i.html"
  },
  "VMLA": {
    "doc": "Vector Multiply Accumulate multiplies corresponding elements in two vectors, and accumulates the results into the elements of the destination vector.",
    "file": "vmla_f.html"
  },
  "VMLSL": {
    "doc": "Vector Multiply Subtract Long multiplies corresponding elements in two vectors, and subtract the products from the corresponding elements of the destination vector. The destination vector element is twice as long as the elements that are multiplied.",
    "file": "vmlsl_i.html"
  },
  "VMLS": {
    "doc": "Vector Multiply Subtract multiplies corresponding elements in two vectors, subtracts the products from corresponding elements of the destination vector, and places the results in the destination vector.",
    "file": "vmls_f.html"
  },
  "VMMLA": {
    "doc": "BFloat16 floating-point matrix multiply-accumulate. This instruction multiplies the 2x4 matrix of BF16 values in the first 128-bit source vector by the 4x2 BF16 matrix in the second 128-bit source vector. The resulting 2x2 single-precision matrix product is then added destructively to the 2x2 single-precision matrix in the 128-bit destination vector. This is equivalent to performing a 4-way dot product per destination element. The instruction does not update the FPSCR exception status.",
    "file": "vmmla.html"
  },
  "VMOVL": {
    "doc": "Vector Move Long takes each element in a doubleword vector, sign or zero-extends them to twice their original length, and places the results in a quadword vector.",
    "file": "vmovl.html"
  },
  "VMOVN": {
    "doc": "Vector Move and Narrow copies the least significant half of each element of a quadword vector into the corresponding elements of a doubleword vector.",
    "file": "vmovn.html"
  },
  "VMOVX": {
    "doc": "Vector Move extraction. This instruction copies the upper 16 bits of the 32-bit source SIMD&amp;FP register into the lower 16 bits of the 32-bit destination SIMD&amp;FP register, while clearing the remaining bits to zero.",
    "file": "vmovx.html"
  },
  "VMOV": {
    "doc": "Copy two general-purpose registers to or from a SIMD&amp;FP register copies two words from two general-purpose registers into a doubleword register in the Advanced SIMD and floating-point register file, or from a doubleword register in the Advanced SIMD and floating-point register file to two general-purpose registers.",
    "file": "vmov_d.html"
  },
  "VMRS": {
    "doc": "Move SIMD&amp;FP Special register to general-purpose register moves the value of an Advanced SIMD and floating-point System register to a general-purpose register. When the specified System register is the FPSCR, a form of the instruction transfers the FPSCR.{N, Z, C, V} condition flags to the APSR.{N, Z, C, V} condition flags.",
    "file": "vmrs.html"
  },
  "VMSR": {
    "doc": "Move general-purpose register to SIMD&amp;FP Special register moves the value of a general-purpose register to a floating-point System register.",
    "file": "vmsr.html"
  },
  "VMULL": {
    "doc": "Vector Multiply Long multiplies corresponding elements in two vectors. The destination vector elements are twice as long as the elements that are multiplied.",
    "file": "vmull_i.html"
  },
  "VMUL": {
    "doc": "Vector Multiply multiplies corresponding elements in two vectors, and places the results in the destination vector.",
    "file": "vmul_f.html"
  },
  "VMVN": {
    "doc": "Vector Bitwise NOT (immediate) places the bitwise inverse of an immediate integer constant into every element of the destination register.",
    "file": "vmvn_i.html"
  },
  "VNEG": {
    "doc": "Vector Negate negates each element in a vector, and places the results in a second vector. The floating-point version only inverts the sign bit.",
    "file": "vneg.html"
  },
  "VNMLA": {
    "doc": "Vector Negate Multiply Accumulate multiplies together two floating-point register values, adds the negation of the floating-point value in the destination register to the negation of the product, and writes the result back to the destination register.",
    "file": "vnmla.html"
  },
  "VNMLS": {
    "doc": "Vector Negate Multiply Subtract multiplies together two floating-point register values, adds the negation of the floating-point value in the destination register to the product, and writes the result back to the destination register.",
    "file": "vnmls.html"
  },
  "VNMUL": {
    "doc": "Vector Negate Multiply multiplies together two floating-point register values, and writes the negation of the result to the destination register.",
    "file": "vnmul.html"
  },
  "VORN": {
    "doc": "Vector bitwise OR NOT (register) performs a bitwise OR NOT operation between two registers, and places the result in the destination register.  The operand and result registers can be quadword or doubleword.  They must all be the same size.",
    "file": "vorn_r.html"
  },
  "VORR": {
    "doc": "Vector Bitwise OR (immediate) performs a bitwise OR between a register value and an immediate value, and returns the result into the destination vector.",
    "file": "vorr_i.html"
  },
  "VPADAL": {
    "doc": "Vector Pairwise Add and Accumulate Long adds adjacent pairs of elements of a vector, and accumulates the results into the elements of the destination vector.",
    "file": "vpadal.html"
  },
  "VPADDL": {
    "doc": "Vector Pairwise Add Long adds adjacent pairs of elements of two vectors, and places the results in the destination vector.",
    "file": "vpaddl.html"
  },
  "VPADD": {
    "doc": "Vector Pairwise Add (floating-point) adds adjacent pairs of elements of two vectors, and places the results in the destination vector.",
    "file": "vpadd_f.html"
  },
  "VPMAX": {
    "doc": "Vector Pairwise Maximum compares adjacent pairs of elements in two doubleword vectors, and copies the larger of each pair into the corresponding element in the destination doubleword vector.",
    "file": "vpmax_f.html"
  },
  "VPMIN": {
    "doc": "Vector Pairwise Minimum compares adjacent pairs of elements in two doubleword vectors, and copies the smaller of each pair into the corresponding element in the destination doubleword vector.",
    "file": "vpmin_f.html"
  },
  "VPOP": {
    "doc": "Pop SIMD&amp;FP registers from stack loads multiple consecutive Advanced SIMD and floating-point register file registers from the stack.",
    "file": "vpop_vldm.html"
  },
  "VPUSH": {
    "doc": "Push SIMD&amp;FP registers to stack stores multiple consecutive registers from the Advanced SIMD and floating-point register file to the stack.",
    "file": "vpush_vstm.html"
  },
  "VQABS": {
    "doc": "Vector Saturating Absolute takes the absolute value of each element in a vector, and places the results in the destination vector.",
    "file": "vqabs.html"
  },
  "VQADD": {
    "doc": "Vector Saturating Add adds the values of corresponding elements of two vectors, and places the results in the destination vector.",
    "file": "vqadd.html"
  },
  "VQDMLAL": {
    "doc": "Vector Saturating Doubling Multiply Accumulate Long multiplies corresponding elements in two doubleword vectors, doubles the products, and accumulates the results into the elements of a quadword vector.",
    "file": "vqdmlal.html"
  },
  "VQDMLSL": {
    "doc": "Vector Saturating Doubling Multiply Subtract Long multiplies corresponding elements in two doubleword vectors, subtracts double the products from corresponding elements of a quadword vector, and places the results in the same quadword vector.",
    "file": "vqdmlsl.html"
  },
  "VQDMULH": {
    "doc": "Vector Saturating Doubling Multiply Returning High Half multiplies corresponding elements in two vectors, doubles the results, and places the most significant half of the final results in the destination vector. The results are truncated, for rounded results see VQRDMULH.",
    "file": "vqdmulh.html"
  },
  "VQDMULL": {
    "doc": "Vector Saturating Doubling Multiply Long multiplies corresponding elements in two doubleword vectors, doubles the products, and places the results in a quadword vector.",
    "file": "vqdmull.html"
  },
  "VQMOVN": {
    "doc": "Vector Saturating Move and Narrow copies each element of the operand vector to the corresponding element of the destination vector.",
    "file": "vqmovn.html"
  },
  "VQMOVUN": {
    "doc": "Vector Saturating Move and Narrow copies each element of the operand vector to the corresponding element of the destination vector.",
    "file": "vqmovn.html"
  },
  "VQNEG": {
    "doc": "Vector Saturating Negate negates each element in a vector, and places the results in the destination vector.",
    "file": "vqneg.html"
  },
  "VQRDMLAH": {
    "doc": "Vector Saturating Rounding Doubling Multiply Accumulate Returning High Half. This instruction multiplies the vector elements of the first source SIMD&amp;FP register with either the corresponding vector elements of the second source SIMD&amp;FP register or the value of a vector element of the second source SIMD&amp;FP register, without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.",
    "file": "vqrdmlah.html"
  },
  "VQRDMLSH": {
    "doc": "Vector Saturating Rounding Doubling Multiply Subtract Returning High Half. This instruction multiplies the vector elements of the first source SIMD&amp;FP register with either the corresponding vector elements of the second source SIMD&amp;FP register or the value of a vector element of the second source SIMD&amp;FP register, without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.",
    "file": "vqrdmlsh.html"
  },
  "VQRDMULH": {
    "doc": "Vector Saturating Rounding Doubling Multiply Returning High Half multiplies corresponding elements in two vectors, doubles the results, and places the most significant half of the final results in the destination vector. The results are rounded. For truncated results see VQDMULH.",
    "file": "vqrdmulh.html"
  },
  "VQRSHL": {
    "doc": "Vector Saturating Rounding Shift Left takes each element in a vector, shifts them by a value from the least significant byte of the corresponding element of a second vector, and places the results in the destination vector. If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift.",
    "file": "vqrshl.html"
  },
  "VQRSHRN": {
    "doc": "Vector Saturating Rounding Shift Right, Narrow takes each element in a quadword vector of integers, right shifts them by an immediate value, and places the rounded results in a doubleword vector.",
    "file": "vqrshrn.html"
  },
  "VQRSHRUN": {
    "doc": "Vector Saturating Rounding Shift Right, Narrow takes each element in a quadword vector of integers, right shifts them by an immediate value, and places the rounded results in a doubleword vector.",
    "file": "vqrshrn.html"
  },
  "VQSHL": {
    "doc": "Vector Saturating Shift Left (immediate) takes each element in a vector of integers, left shifts them by an immediate value, and places the results in a second vector.",
    "file": "vqshl_i.html"
  },
  "VQSHLU": {
    "doc": "Vector Saturating Shift Left (immediate) takes each element in a vector of integers, left shifts them by an immediate value, and places the results in a second vector.",
    "file": "vqshl_i.html"
  },
  "VQSHRN": {
    "doc": "Vector Saturating Shift Right, Narrow takes each element in a quadword vector of integers, right shifts them by an immediate value, and places the truncated results in a doubleword vector.",
    "file": "vqshrn.html"
  },
  "VQSHRUN": {
    "doc": "Vector Saturating Shift Right, Narrow takes each element in a quadword vector of integers, right shifts them by an immediate value, and places the truncated results in a doubleword vector.",
    "file": "vqshrn.html"
  },
  "VQSUB": {
    "doc": "Vector Saturating Subtract subtracts the elements of the second operand vector from the corresponding elements of the first operand vector, and places the results in the destination vector. Signed and unsigned operations are distinct.",
    "file": "vqsub.html"
  },
  "VRADDHN": {
    "doc": "Vector Rounding Add and Narrow, returning High Half adds corresponding elements in two quadword vectors, and places the most significant half of each result in a doubleword vector. The results are rounded.  For truncated results, see VADDHN.",
    "file": "vraddhn.html"
  },
  "VRECPE": {
    "doc": "Vector Reciprocal Estimate finds an approximate reciprocal of each element in the operand vector, and places the results in the destination vector.",
    "file": "vrecpe.html"
  },
  "VRECPS": {
    "doc": "Vector Reciprocal Step multiplies the elements of one vector by the corresponding elements of another vector, subtracts each of the products from 2.0, and places the results into the elements of the destination vector.",
    "file": "vrecps.html"
  },
  "VREV16": {
    "doc": "Vector Reverse in halfwords reverses the order of 8-bit elements in each halfword of the vector, and places the result in the corresponding destination vector.",
    "file": "vrev16.html"
  },
  "VREV32": {
    "doc": "Vector Reverse in words reverses the order of 8-bit or 16-bit elements in each word of the vector, and places the result in the corresponding destination vector.",
    "file": "vrev32.html"
  },
  "VREV64": {
    "doc": "Vector Reverse in doublewords reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector, and places the result in the corresponding destination vector.",
    "file": "vrev64.html"
  },
  "VRHADD": {
    "doc": "Vector Rounding Halving Add adds corresponding elements in two vectors of integers, shifts each result right one bit, and places the final results in the destination vector.",
    "file": "vrhadd.html"
  },
  "VRINTA": {
    "doc": "Vector Round floating-point to integer towards Nearest with Ties to Away rounds a vector of floating-point values to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrinta_asimd.html"
  },
  "VRINTM": {
    "doc": "Vector Round floating-point to integer towards -Infinity rounds a vector of floating-point values to integral floating-point values of the same size, using the Round towards -Infinity rounding mode. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintm_asimd.html"
  },
  "VRINTN": {
    "doc": "Vector Round floating-point to integer to Nearest rounds a vector of floating-point values to integral floating-point values of the same size using the Round to Nearest rounding mode. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintn_asimd.html"
  },
  "VRINTP": {
    "doc": "Vector Round floating-point to integer towards +Infinity rounds a vector of floating-point values to integral floating-point values of the same size using the Round towards +Infinity rounding mode. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintp_asimd.html"
  },
  "VRINTR": {
    "doc": "Round floating-point to integer rounds a floating-point value to an integral floating-point value of the same size using the rounding mode specified in the FPSCR. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintr_vfp.html"
  },
  "VRINTX": {
    "doc": "Vector round floating-point to integer inexact rounds a vector of floating-point values to integral floating-point values of the same size, using the Round to Nearest rounding mode, and raises the Inexact exception when the result value is not numerically equal to the input value. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintx_asimd.html"
  },
  "VRINTZ": {
    "doc": "Vector round floating-point to integer towards Zero rounds a vector of floating-point values to integral floating-point values of the same size, using the Round towards Zero rounding mode. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.",
    "file": "vrintz_asimd.html"
  },
  "VRSHL": {
    "doc": "Vector Rounding Shift Left takes each element in a vector, shifts them by a value from the least significant byte of the corresponding element of a second vector, and places the results in the destination vector. If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see VSHL.",
    "file": "vrshl.html"
  },
  "VRSHR": {
    "doc": "Vector Rounding Shift Right takes each element in a vector, right shifts them by an immediate value, and places the rounded results in the destination vector. For truncated results, see VSHR.",
    "file": "vrshr.html"
  },
  "VRSHRN": {
    "doc": "Vector Rounding Shift Right and Narrow takes each element in a vector, right shifts them by an immediate value, and places the rounded results in the destination vector. For truncated results, see VSHRN.",
    "file": "vrshrn.html"
  },
  "VRSQRTE": {
    "doc": "Vector Reciprocal Square Root Estimate finds an approximate reciprocal square root of each element in a vector, and places the results in a second vector.",
    "file": "vrsqrte.html"
  },
  "VRSQRTS": {
    "doc": "Vector Reciprocal Square Root Step multiplies the elements of one vector by the corresponding elements of another vector, subtracts each of the products from 3.0, divides these results by 2.0, and places the results into the elements of the destination vector.",
    "file": "vrsqrts.html"
  },
  "VRSRA": {
    "doc": "Vector Rounding Shift Right and Accumulate takes each element in a vector, right shifts them by an immediate value, and accumulates the rounded results into the destination vector. For truncated results, see VSRA.",
    "file": "vrsra.html"
  },
  "VRSUBHN": {
    "doc": "Vector Rounding Subtract and Narrow, returning High Half subtracts the elements of one quadword vector from the corresponding elements of another quadword vector, takes the most significant half of each result, and places the final results in a doubleword vector. The results are rounded. For truncated results, see VSUBHN.",
    "file": "vrsubhn.html"
  },
  "VSDOT": {
    "doc": "Dot Product vector form with signed integers. This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "vsdot.html"
  },
  "VSELEQ": {
    "doc": "Floating-point conditional select allows the destination register to take the value in either one or the other source register according to the condition codes in the APSR.",
    "file": "vsel.html"
  },
  "VSELGE": {
    "doc": "Floating-point conditional select allows the destination register to take the value in either one or the other source register according to the condition codes in the APSR.",
    "file": "vsel.html"
  },
  "VSELGT": {
    "doc": "Floating-point conditional select allows the destination register to take the value in either one or the other source register according to the condition codes in the APSR.",
    "file": "vsel.html"
  },
  "VSELVS": {
    "doc": "Floating-point conditional select allows the destination register to take the value in either one or the other source register according to the condition codes in the APSR.",
    "file": "vsel.html"
  },
  "VSHLL": {
    "doc": "Vector Shift Left Long takes each element in a doubleword vector, left shifts them by an immediate value, and places the results in a quadword vector.",
    "file": "vshll.html"
  },
  "VSHL": {
    "doc": "Vector Shift Left (immediate) takes each element in a vector of integers, left shifts them by an immediate value, and places the results in the destination vector.",
    "file": "vshl_i.html"
  },
  "VSHR": {
    "doc": "Vector Shift Right takes each element in a vector, right shifts them by an immediate value, and places the truncated results in the destination vector. For rounded results, see VRSHR.",
    "file": "vshr.html"
  },
  "VSHRN": {
    "doc": "Vector Shift Right Narrow takes each element in a vector, right shifts them by an immediate value, and places the truncated results in the destination vector. For rounded results, see VRSHRN.",
    "file": "vshrn.html"
  },
  "VSLI": {
    "doc": "Vector Shift Left and Insert takes each element in the operand vector, left shifts them by an immediate value, and inserts the results in the destination vector. Bits shifted out of the left of each element are lost.",
    "file": "vsli.html"
  },
  "VSMMLA": {
    "doc": "The widening integer matrix multiply-accumulate instruction multiplies the 2x8 matrix of signed 8-bit integer values held in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator held in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "vsmmla.html"
  },
  "VSQRT": {
    "doc": "Square Root calculates the square root of the value in a floating-point register and writes the result to another floating-point register.",
    "file": "vsqrt.html"
  },
  "VSRA": {
    "doc": "Vector Shift Right and Accumulate takes each element in a vector, right shifts them by an immediate value, and accumulates the truncated results into the destination vector. For rounded results, see VRSRA.",
    "file": "vsra.html"
  },
  "VSRI": {
    "doc": "Vector Shift Right and Insert takes each element in the operand vector, right shifts them by an immediate value, and inserts the results in the destination vector. Bits shifted out of the right of each element are lost.",
    "file": "vsri.html"
  },
  "VST1": {
    "doc": "Store single element from one lane of one register stores one element to memory from one element of a register. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vst1_1.html"
  },
  "VST2": {
    "doc": "Store single 2-element structure from one lane of two registers stores one 2-element structure to memory from corresponding elements of two registers. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vst2_1.html"
  },
  "VST3": {
    "doc": "Store single 3-element structure from one lane of three registers stores one 3-element structure to memory from corresponding elements of three registers. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vst3_1.html"
  },
  "VST4": {
    "doc": "Store single 4-element structure from one lane of four registers stores one 4-element structure to memory from corresponding elements of four registers. For details of the addressing mode, see Advanced SIMD addressing mode.",
    "file": "vst4_1.html"
  },
  "VSTM": {
    "doc": "Store multiple SIMD&amp;FP registers stores multiple registers from the Advanced SIMD and floating-point register file to consecutive memory locations using an address from a general-purpose register.",
    "file": "vstm.html"
  },
  "VSTMDB": {
    "doc": "Store multiple SIMD&amp;FP registers stores multiple registers from the Advanced SIMD and floating-point register file to consecutive memory locations using an address from a general-purpose register.",
    "file": "vstm.html"
  },
  "VSTMIA": {
    "doc": "Store multiple SIMD&amp;FP registers stores multiple registers from the Advanced SIMD and floating-point register file to consecutive memory locations using an address from a general-purpose register.",
    "file": "vstm.html"
  },
  "VSTR": {
    "doc": "Store SIMD&amp;FP register stores a single register from the Advanced SIMD and floating-point register file to memory, using an address from a general-purpose register, with an optional offset.",
    "file": "vstr.html"
  },
  "VSUBHN": {
    "doc": "Vector Subtract and Narrow, returning High Half subtracts the elements of one quadword vector from the corresponding elements of another quadword vector, takes the most significant half of each result, and places the final results in a doubleword vector. The results are truncated. For rounded results, see VRSUBHN.",
    "file": "vsubhn.html"
  },
  "VSUBL": {
    "doc": "Vector Subtract Long subtracts the elements of one doubleword vector from the corresponding elements of another doubleword vector, and places the results in a quadword vector. Before subtracting, it sign-extends or zero-extends the elements of both operands.",
    "file": "vsubl.html"
  },
  "VSUBW": {
    "doc": "Vector Subtract Wide subtracts the elements of a doubleword vector from the corresponding elements of a quadword vector, and places the results in another quadword vector. Before subtracting, it sign-extends or zero-extends the elements of the doubleword operand.",
    "file": "vsubw.html"
  },
  "VSUB": {
    "doc": "Vector Subtract (floating-point) subtracts the elements of one vector from the corresponding elements of another vector, and places the results in the destination vector.",
    "file": "vsub_f.html"
  },
  "VSUDOT": {
    "doc": "Dot Product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "vsudot_s.html"
  },
  "VSWP": {
    "doc": "Vector Swap exchanges the contents of two vectors. The vectors can be either doubleword or quadword. There is no distinction between data types.",
    "file": "vswp.html"
  },
  "VTBL": {
    "doc": "Vector Table Lookup uses byte indexes in a control vector to look up byte values in a table and generate a new vector. Indexes out of range return 0.",
    "file": "vtbl.html"
  },
  "VTBX": {
    "doc": "Vector Table Lookup uses byte indexes in a control vector to look up byte values in a table and generate a new vector. Indexes out of range return 0.",
    "file": "vtbl.html"
  },
  "VTRN": {
    "doc": "Vector Transpose treats the elements of its operand vectors as elements of 2 x 2 matrices, and transposes the matrices.",
    "file": "vtrn.html"
  },
  "VTST": {
    "doc": "Vector Test Bits takes each element in a vector, and bitwise ANDs it with the corresponding element of a second vector. If the result is not zero, the corresponding element in the destination vector is set to all ones. Otherwise, it is set to all zeros.",
    "file": "vtst.html"
  },
  "VUDOT": {
    "doc": "Dot Product vector form with unsigned integers. This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "vudot.html"
  },
  "VUMMLA": {
    "doc": "The widening integer matrix multiply-accumulate instruction multiplies the 2x8 matrix of unsigned 8-bit integer values held in the first source vector by the 8x2 matrix of unsigned 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator held in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "vummla.html"
  },
  "VUSDOT": {
    "doc": "Dot Product vector form with mixed-sign integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.",
    "file": "vusdot.html"
  },
  "VUSMMLA": {
    "doc": "The widening integer matrix multiply-accumulate instruction multiplies the 2x8 matrix of unsigned 8-bit integer values held in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator held in the destination vector. This is equivalent to performing an 8-way dot product per destination element.",
    "file": "vusmmla.html"
  },
  "VUZP": {
    "doc": "Vector Unzip de-interleaves the elements of two vectors.",
    "file": "vuzp.html"
  },
  "VZIP": {
    "doc": "Vector Zip interleaves the elements of two vectors.",
    "file": "vzip.html"
  },
  "WFE": {
    "doc": "Wait For Event is a hint instruction that indicates that the PE can enter a low-power state and remain there until a wakeup event occurs. Wakeup events include the event signaled as a result of executing the SEV instruction on any PE in the multiprocessor system. For more information, see Wait For Event and Send Event.",
    "file": "wfe.html"
  },
  "WFI": {
    "doc": "Wait For Interrupt is a hint instruction that indicates that the PE can enter a low-power state and remain there until a wakeup event occurs. For more information, see Wait For Interrupt.",
    "file": "wfi.html"
  },
  "YIELD": {
    "doc": "YIELD is a hint instruction. Software with a multithreading capability can use a YIELD instruction to indicate to the PE that it is performing a task, for example a spin-lock, that could be swapped out to improve overall system performance. The PE can use this hint to suspend and resume multiple software threads if it supports the capability.",
    "file": "yield.html"
  }
}